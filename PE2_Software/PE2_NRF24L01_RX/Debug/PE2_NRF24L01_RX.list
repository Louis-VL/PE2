
PE2_NRF24L01_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b38  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08004cc8  08004cc8  00014cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004db0  08004db0  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004db0  08004db0  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004db0  08004db0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004db0  08004db0  00014db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004db4  08004db4  00014db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004db8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  20000078  08004e30  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001f4  08004e30  000201f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d670  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c1d  00000000  00000000  0002d718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000968  00000000  00000000  0002f338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c0  00000000  00000000  0002fca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001670d  00000000  00000000  00030560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bb49  00000000  00000000  00046c6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000830c2  00000000  00000000  000527b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d5878  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d4c  00000000  00000000  000d58cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004cb0 	.word	0x08004cb0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08004cb0 	.word	0x08004cb0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <CS_Select>:

#define NRF24_CS_PORT	GPIOB
#define NRF24_CS_PIN	GPIO_PIN_12


void CS_Select(void){
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CS_PORT, NRF24_CS_PIN, GPIO_PIN_RESET);
 8000284:	2200      	movs	r2, #0
 8000286:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800028a:	4802      	ldr	r0, [pc, #8]	; (8000294 <CS_Select+0x14>)
 800028c:	f001 f8bc 	bl	8001408 <HAL_GPIO_WritePin>
}
 8000290:	bf00      	nop
 8000292:	bd80      	pop	{r7, pc}
 8000294:	48000400 	.word	0x48000400

08000298 <CS_UnSelect>:

void CS_UnSelect(void){
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CS_PORT, NRF24_CS_PIN, GPIO_PIN_SET);
 800029c:	2201      	movs	r2, #1
 800029e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002a2:	4802      	ldr	r0, [pc, #8]	; (80002ac <CS_UnSelect+0x14>)
 80002a4:	f001 f8b0 	bl	8001408 <HAL_GPIO_WritePin>
}
 80002a8:	bf00      	nop
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	48000400 	.word	0x48000400

080002b0 <CE_Enable>:

void CE_Enable(void){
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 80002b4:	2201      	movs	r2, #1
 80002b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002be:	f001 f8a3 	bl	8001408 <HAL_GPIO_WritePin>
}
 80002c2:	bf00      	nop
 80002c4:	bd80      	pop	{r7, pc}

080002c6 <CE_Disable>:

void CE_Disable(void){
 80002c6:	b580      	push	{r7, lr}
 80002c8:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 80002ca:	2200      	movs	r2, #0
 80002cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002d4:	f001 f898 	bl	8001408 <HAL_GPIO_WritePin>
}
 80002d8:	bf00      	nop
 80002da:	bd80      	pop	{r7, pc}

080002dc <nrf24_WriteReg>:

//write a single byte to a particular register
void nrf24_WriteReg(uint8_t Reg, uint8_t Data){
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	4603      	mov	r3, r0
 80002e4:	460a      	mov	r2, r1
 80002e6:	71fb      	strb	r3, [r7, #7]
 80002e8:	4613      	mov	r3, r2
 80002ea:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80002ec:	79fb      	ldrb	r3, [r7, #7]
 80002ee:	f043 0320 	orr.w	r3, r3, #32
 80002f2:	b2db      	uxtb	r3, r3
 80002f4:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 80002f6:	79bb      	ldrb	r3, [r7, #6]
 80002f8:	737b      	strb	r3, [r7, #13]

	//Pull the CS Pin LOW to select the device
	CS_Select();
 80002fa:	f7ff ffc1 	bl	8000280 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 80002fe:	f107 010c 	add.w	r1, r7, #12
 8000302:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000306:	2202      	movs	r2, #2
 8000308:	4804      	ldr	r0, [pc, #16]	; (800031c <nrf24_WriteReg+0x40>)
 800030a:	f002 fa9a 	bl	8002842 <HAL_SPI_Transmit>

	//Pull the CS HIGH to release the device
	CS_UnSelect();
 800030e:	f7ff ffc3 	bl	8000298 <CS_UnSelect>
}
 8000312:	bf00      	nop
 8000314:	3710      	adds	r7, #16
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	200000a0 	.word	0x200000a0

08000320 <nrf24_WriteRegMulti>:


//write multiple bytes to a particular register
void nrf24_WriteRegMulti(uint8_t Reg, uint8_t *data, int size){
 8000320:	b580      	push	{r7, lr}
 8000322:	b086      	sub	sp, #24
 8000324:	af00      	add	r7, sp, #0
 8000326:	4603      	mov	r3, r0
 8000328:	60b9      	str	r1, [r7, #8]
 800032a:	607a      	str	r2, [r7, #4]
 800032c:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg | 1<<5;
 800032e:	7bfb      	ldrb	r3, [r7, #15]
 8000330:	f043 0320 	orr.w	r3, r3, #32
 8000334:	b2db      	uxtb	r3, r3
 8000336:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	//Pull the CS Pin LOW to select the device
	CS_Select();
 8000338:	f7ff ffa2 	bl	8000280 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 800033c:	f107 0114 	add.w	r1, r7, #20
 8000340:	2364      	movs	r3, #100	; 0x64
 8000342:	2201      	movs	r2, #1
 8000344:	4808      	ldr	r0, [pc, #32]	; (8000368 <nrf24_WriteRegMulti+0x48>)
 8000346:	f002 fa7c 	bl	8002842 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	b29a      	uxth	r2, r3
 800034e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000352:	68b9      	ldr	r1, [r7, #8]
 8000354:	4804      	ldr	r0, [pc, #16]	; (8000368 <nrf24_WriteRegMulti+0x48>)
 8000356:	f002 fa74 	bl	8002842 <HAL_SPI_Transmit>

	//Pull the CS HIGH to release the device
	CS_UnSelect();
 800035a:	f7ff ff9d 	bl	8000298 <CS_UnSelect>
}
 800035e:	bf00      	nop
 8000360:	3718      	adds	r7, #24
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	200000a0 	.word	0x200000a0

0800036c <nrf24_ReadReg>:


//Read multiple bytes from the register
uint8_t nrf24_ReadReg (uint8_t Reg){
 800036c:	b580      	push	{r7, lr}
 800036e:	b084      	sub	sp, #16
 8000370:	af00      	add	r7, sp, #0
 8000372:	4603      	mov	r3, r0
 8000374:	71fb      	strb	r3, [r7, #7]
	uint8_t data =0;
 8000376:	2300      	movs	r3, #0
 8000378:	73fb      	strb	r3, [r7, #15]
	//Pull the CS Pin LOW to select the device
	CS_Select();
 800037a:	f7ff ff81 	bl	8000280 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 800037e:	1df9      	adds	r1, r7, #7
 8000380:	2364      	movs	r3, #100	; 0x64
 8000382:	2201      	movs	r2, #1
 8000384:	4808      	ldr	r0, [pc, #32]	; (80003a8 <nrf24_ReadReg+0x3c>)
 8000386:	f002 fa5c 	bl	8002842 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 800038a:	f107 010f 	add.w	r1, r7, #15
 800038e:	2364      	movs	r3, #100	; 0x64
 8000390:	2201      	movs	r2, #1
 8000392:	4805      	ldr	r0, [pc, #20]	; (80003a8 <nrf24_ReadReg+0x3c>)
 8000394:	f002 fbca 	bl	8002b2c <HAL_SPI_Receive>

	//Pull the CS HIGH to release the device
	CS_UnSelect();
 8000398:	f7ff ff7e 	bl	8000298 <CS_UnSelect>

	return data;
 800039c:	7bfb      	ldrb	r3, [r7, #15]
}
 800039e:	4618      	mov	r0, r3
 80003a0:	3710      	adds	r7, #16
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	200000a0 	.word	0x200000a0

080003ac <nrf24_ReadReg_Multi>:

/* Read multiple bytes from the register */
void nrf24_ReadReg_Multi (uint8_t Reg, uint8_t *data, int size)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b084      	sub	sp, #16
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	4603      	mov	r3, r0
 80003b4:	60b9      	str	r1, [r7, #8]
 80003b6:	607a      	str	r2, [r7, #4]
 80003b8:	73fb      	strb	r3, [r7, #15]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 80003ba:	f7ff ff61 	bl	8000280 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 80003be:	f107 010f 	add.w	r1, r7, #15
 80003c2:	2364      	movs	r3, #100	; 0x64
 80003c4:	2201      	movs	r2, #1
 80003c6:	4808      	ldr	r0, [pc, #32]	; (80003e8 <nrf24_ReadReg_Multi+0x3c>)
 80003c8:	f002 fa3b 	bl	8002842 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, data, size, 1000);
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	b29a      	uxth	r2, r3
 80003d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003d4:	68b9      	ldr	r1, [r7, #8]
 80003d6:	4804      	ldr	r0, [pc, #16]	; (80003e8 <nrf24_ReadReg_Multi+0x3c>)
 80003d8:	f002 fba8 	bl	8002b2c <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80003dc:	f7ff ff5c 	bl	8000298 <CS_UnSelect>
}
 80003e0:	bf00      	nop
 80003e2:	3710      	adds	r7, #16
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	200000a0 	.word	0x200000a0

080003ec <nrfsendCmd>:

//send command to the NRF24
void nrfsendCmd(uint8_t cmd){
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	4603      	mov	r3, r0
 80003f4:	71fb      	strb	r3, [r7, #7]
	//Pull the CS Pin LOW to select the device
	CS_Select();
 80003f6:	f7ff ff43 	bl	8000280 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 80003fa:	1df9      	adds	r1, r7, #7
 80003fc:	2364      	movs	r3, #100	; 0x64
 80003fe:	2201      	movs	r2, #1
 8000400:	4804      	ldr	r0, [pc, #16]	; (8000414 <nrfsendCmd+0x28>)
 8000402:	f002 fa1e 	bl	8002842 <HAL_SPI_Transmit>

	//Pull the CS HIGH to release the device
	CS_UnSelect();
 8000406:	f7ff ff47 	bl	8000298 <CS_UnSelect>
}
 800040a:	bf00      	nop
 800040c:	3708      	adds	r7, #8
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	200000a0 	.word	0x200000a0

08000418 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b088      	sub	sp, #32
 800041c:	af00      	add	r7, sp, #0
 800041e:	4603      	mov	r3, r0
 8000420:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 8000422:	79fb      	ldrb	r3, [r7, #7]
 8000424:	2b07      	cmp	r3, #7
 8000426:	d104      	bne.n	8000432 <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 8000428:	2100      	movs	r1, #0
 800042a:	2007      	movs	r0, #7
 800042c:	f7ff ff56 	bl	80002dc <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 8000430:	e090      	b.n	8000554 <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	2b17      	cmp	r3, #23
 8000436:	d104      	bne.n	8000442 <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 8000438:	2111      	movs	r1, #17
 800043a:	2017      	movs	r0, #23
 800043c:	f7ff ff4e 	bl	80002dc <nrf24_WriteReg>
}
 8000440:	e088      	b.n	8000554 <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 8000442:	2108      	movs	r1, #8
 8000444:	2000      	movs	r0, #0
 8000446:	f7ff ff49 	bl	80002dc <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 800044a:	213f      	movs	r1, #63	; 0x3f
 800044c:	2001      	movs	r0, #1
 800044e:	f7ff ff45 	bl	80002dc <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 8000452:	2103      	movs	r1, #3
 8000454:	2002      	movs	r0, #2
 8000456:	f7ff ff41 	bl	80002dc <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 800045a:	2103      	movs	r1, #3
 800045c:	2003      	movs	r0, #3
 800045e:	f7ff ff3d 	bl	80002dc <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 8000462:	2103      	movs	r1, #3
 8000464:	2004      	movs	r0, #4
 8000466:	f7ff ff39 	bl	80002dc <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 800046a:	2102      	movs	r1, #2
 800046c:	2005      	movs	r0, #5
 800046e:	f7ff ff35 	bl	80002dc <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x26);
 8000472:	2126      	movs	r1, #38	; 0x26
 8000474:	2006      	movs	r0, #6
 8000476:	f7ff ff31 	bl	80002dc <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 800047a:	2100      	movs	r1, #0
 800047c:	2007      	movs	r0, #7
 800047e:	f7ff ff2d 	bl	80002dc <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 8000482:	2100      	movs	r1, #0
 8000484:	2008      	movs	r0, #8
 8000486:	f7ff ff29 	bl	80002dc <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 800048a:	2100      	movs	r1, #0
 800048c:	2009      	movs	r0, #9
 800048e:	f7ff ff25 	bl	80002dc <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000492:	4a32      	ldr	r2, [pc, #200]	; (800055c <nrf24_reset+0x144>)
 8000494:	f107 0318 	add.w	r3, r7, #24
 8000498:	e892 0003 	ldmia.w	r2, {r0, r1}
 800049c:	6018      	str	r0, [r3, #0]
 800049e:	3304      	adds	r3, #4
 80004a0:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 80004a2:	f107 0318 	add.w	r3, r7, #24
 80004a6:	2205      	movs	r2, #5
 80004a8:	4619      	mov	r1, r3
 80004aa:	200a      	movs	r0, #10
 80004ac:	f7ff ff38 	bl	8000320 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 80004b0:	4a2b      	ldr	r2, [pc, #172]	; (8000560 <nrf24_reset+0x148>)
 80004b2:	f107 0310 	add.w	r3, r7, #16
 80004b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004ba:	6018      	str	r0, [r3, #0]
 80004bc:	3304      	adds	r3, #4
 80004be:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 80004c0:	f107 0310 	add.w	r3, r7, #16
 80004c4:	2205      	movs	r2, #5
 80004c6:	4619      	mov	r1, r3
 80004c8:	200b      	movs	r0, #11
 80004ca:	f7ff ff29 	bl	8000320 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 80004ce:	21c3      	movs	r1, #195	; 0xc3
 80004d0:	200c      	movs	r0, #12
 80004d2:	f7ff ff03 	bl	80002dc <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 80004d6:	21c4      	movs	r1, #196	; 0xc4
 80004d8:	200d      	movs	r0, #13
 80004da:	f7ff feff 	bl	80002dc <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 80004de:	21c5      	movs	r1, #197	; 0xc5
 80004e0:	200e      	movs	r0, #14
 80004e2:	f7ff fefb 	bl	80002dc <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 80004e6:	21c6      	movs	r1, #198	; 0xc6
 80004e8:	200f      	movs	r0, #15
 80004ea:	f7ff fef7 	bl	80002dc <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80004ee:	4a1b      	ldr	r2, [pc, #108]	; (800055c <nrf24_reset+0x144>)
 80004f0:	f107 0308 	add.w	r3, r7, #8
 80004f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004f8:	6018      	str	r0, [r3, #0]
 80004fa:	3304      	adds	r3, #4
 80004fc:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 80004fe:	f107 0308 	add.w	r3, r7, #8
 8000502:	2205      	movs	r2, #5
 8000504:	4619      	mov	r1, r3
 8000506:	2010      	movs	r0, #16
 8000508:	f7ff ff0a 	bl	8000320 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 800050c:	2100      	movs	r1, #0
 800050e:	2011      	movs	r0, #17
 8000510:	f7ff fee4 	bl	80002dc <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 8000514:	2100      	movs	r1, #0
 8000516:	2012      	movs	r0, #18
 8000518:	f7ff fee0 	bl	80002dc <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 800051c:	2100      	movs	r1, #0
 800051e:	2013      	movs	r0, #19
 8000520:	f7ff fedc 	bl	80002dc <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 8000524:	2100      	movs	r1, #0
 8000526:	2014      	movs	r0, #20
 8000528:	f7ff fed8 	bl	80002dc <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 800052c:	2100      	movs	r1, #0
 800052e:	2015      	movs	r0, #21
 8000530:	f7ff fed4 	bl	80002dc <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 8000534:	2100      	movs	r1, #0
 8000536:	2016      	movs	r0, #22
 8000538:	f7ff fed0 	bl	80002dc <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 800053c:	2111      	movs	r1, #17
 800053e:	2017      	movs	r0, #23
 8000540:	f7ff fecc 	bl	80002dc <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 8000544:	2100      	movs	r1, #0
 8000546:	201c      	movs	r0, #28
 8000548:	f7ff fec8 	bl	80002dc <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 800054c:	2100      	movs	r1, #0
 800054e:	201d      	movs	r0, #29
 8000550:	f7ff fec4 	bl	80002dc <nrf24_WriteReg>
}
 8000554:	bf00      	nop
 8000556:	3720      	adds	r7, #32
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	08004cc8 	.word	0x08004cc8
 8000560:	08004cd0 	.word	0x08004cd0

08000564 <NRF24_Init>:


void NRF24_Init(void){
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
	//disable the chip before configuration
	CE_Disable();
 8000568:	f7ff fead 	bl	80002c6 <CE_Disable>

	// reset everything
	nrf24_reset (0);
 800056c:	2000      	movs	r0, #0
 800056e:	f7ff ff53 	bl	8000418 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0); 		//Will be configure later
 8000572:	2100      	movs	r1, #0
 8000574:	2000      	movs	r0, #0
 8000576:	f7ff feb1 	bl	80002dc <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0); 		//No auto ACK
 800057a:	2100      	movs	r1, #0
 800057c:	2001      	movs	r0, #1
 800057e:	f7ff fead 	bl	80002dc <nrf24_WriteReg>

	nrf24_WriteReg(EN_RXADDR, 0);	//Not enabling any data pipe right now
 8000582:	2100      	movs	r1, #0
 8000584:	2002      	movs	r0, #2
 8000586:	f7ff fea9 	bl	80002dc <nrf24_WriteReg>

	nrf24_WriteReg(SETUP_AW, 0x03);	//5 Bytes for the TX_RX address
 800058a:	2103      	movs	r1, #3
 800058c:	2003      	movs	r0, #3
 800058e:	f7ff fea5 	bl	80002dc <nrf24_WriteReg>

	nrf24_WriteReg(SETUP_RETR, 0);	//No retransmission
 8000592:	2100      	movs	r1, #0
 8000594:	2004      	movs	r0, #4
 8000596:	f7ff fea1 	bl	80002dc <nrf24_WriteReg>

	nrf24_WriteReg(RF_CH, 0);		//Will be setup during TX or RX
 800059a:	2100      	movs	r1, #0
 800059c:	2005      	movs	r0, #5
 800059e:	f7ff fe9d 	bl	80002dc <nrf24_WriteReg>

	nrf24_WriteReg(RF_SETUP,  0x26);	//Power = 0dbm, data rate = 250kbps zie datasheet for other options
 80005a2:	2126      	movs	r1, #38	; 0x26
 80005a4:	2006      	movs	r0, #6
 80005a6:	f7ff fe99 	bl	80002dc <nrf24_WriteReg>
	//b3 = 0 (Select between the high speed data rates. This bit is dont't care if b5 = 1)
	//b2&1 = 11 (Set RF output power in TX mode, '00' = -18dBm, '01' = -12dBm, '10' = -6dBm, '11' 0dBm)
	//b0 = 0/1 (Dont care)

	//enable the chip after configuring the device
	CE_Enable();
 80005aa:	f7ff fe81 	bl	80002b0 <CE_Enable>
}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}

080005b2 <NRF24_RxMode>:
		return 0;
}



void NRF24_RxMode(uint8_t *Address, uint8_t channel){
 80005b2:	b580      	push	{r7, lr}
 80005b4:	b084      	sub	sp, #16
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]
 80005ba:	460b      	mov	r3, r1
 80005bc:	70fb      	strb	r3, [r7, #3]

	//disable the chip before configuring the device
	CE_Disable();
 80005be:	f7ff fe82 	bl	80002c6 <CE_Disable>

	nrf24_reset (STATUS);
 80005c2:	2007      	movs	r0, #7
 80005c4:	f7ff ff28 	bl	8000418 <nrf24_reset>

	nrf24_WriteReg(RF_CH, channel); 	//select the channel
 80005c8:	78fb      	ldrb	r3, [r7, #3]
 80005ca:	4619      	mov	r1, r3
 80005cc:	2005      	movs	r0, #5
 80005ce:	f7ff fe85 	bl	80002dc <nrf24_WriteReg>

	//select data pipe 1
	uint8_t en_rxaddr = nrf24_ReadReg(EN_RXADDR);
 80005d2:	2002      	movs	r0, #2
 80005d4:	f7ff feca 	bl	800036c <nrf24_ReadReg>
 80005d8:	4603      	mov	r3, r0
 80005da:	73fb      	strb	r3, [r7, #15]
	en_rxaddr = en_rxaddr | ( 1<<2);
 80005dc:	7bfb      	ldrb	r3, [r7, #15]
 80005de:	f043 0304 	orr.w	r3, r3, #4
 80005e2:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg(EN_RXADDR, en_rxaddr);	//select data pipe 1
 80005e4:	7bfb      	ldrb	r3, [r7, #15]
 80005e6:	4619      	mov	r1, r3
 80005e8:	2002      	movs	r0, #2
 80005ea:	f7ff fe77 	bl	80002dc <nrf24_WriteReg>
		 * Pipe 2 ADDR = 0xAABBCCDD22
		 * Pipe 3 ADDR = 0xAABBCCDD33
		 *
	*/

	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);	//Write the TX address
 80005ee:	2205      	movs	r2, #5
 80005f0:	6879      	ldr	r1, [r7, #4]
 80005f2:	200b      	movs	r0, #11
 80005f4:	f7ff fe94 	bl	8000320 <nrf24_WriteRegMulti>

	nrf24_WriteReg(RX_ADDR_P2, 0xEE);  // Write the Pipe2 LSB address
 80005f8:	21ee      	movs	r1, #238	; 0xee
 80005fa:	200c      	movs	r0, #12
 80005fc:	f7ff fe6e 	bl	80002dc <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 32); //32 bytes payload size
 8000600:	2120      	movs	r1, #32
 8000602:	2013      	movs	r0, #19
 8000604:	f7ff fe6a 	bl	80002dc <nrf24_WriteReg>

	//power up the device
	uint8_t config = nrf24_ReadReg(CONFIG);
 8000608:	2000      	movs	r0, #0
 800060a:	f7ff feaf 	bl	800036c <nrf24_ReadReg>
 800060e:	4603      	mov	r3, r0
 8000610:	73bb      	strb	r3, [r7, #14]
	config = config | (1<<1) | (1<<0);
 8000612:	7bbb      	ldrb	r3, [r7, #14]
 8000614:	f043 0303 	orr.w	r3, r3, #3
 8000618:	73bb      	strb	r3, [r7, #14]
	nrf24_WriteReg (CONFIG, config);
 800061a:	7bbb      	ldrb	r3, [r7, #14]
 800061c:	4619      	mov	r1, r3
 800061e:	2000      	movs	r0, #0
 8000620:	f7ff fe5c 	bl	80002dc <nrf24_WriteReg>

	//Enable the chip after configuring the device
	CE_Enable();
 8000624:	f7ff fe44 	bl	80002b0 <CE_Enable>
}
 8000628:	bf00      	nop
 800062a:	3710      	adds	r7, #16
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <isDataAvailable>:


uint8_t isDataAvailable(int pipenum){
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	uint8_t status = nrf24_ReadReg(STATUS);
 8000638:	2007      	movs	r0, #7
 800063a:	f7ff fe97 	bl	800036c <nrf24_ReadReg>
 800063e:	4603      	mov	r3, r0
 8000640:	73fb      	strb	r3, [r7, #15]

	if ((status&(1<<6))&&(status&(pipenum<<1)))
 8000642:	7bfb      	ldrb	r3, [r7, #15]
 8000644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000648:	2b00      	cmp	r3, #0
 800064a:	d00b      	beq.n	8000664 <isDataAvailable+0x34>
 800064c:	7bfa      	ldrb	r2, [r7, #15]
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	005b      	lsls	r3, r3, #1
 8000652:	4013      	ands	r3, r2
 8000654:	2b00      	cmp	r3, #0
 8000656:	d005      	beq.n	8000664 <isDataAvailable+0x34>
	{
			nrf24_WriteReg(STATUS, (1<<6));
 8000658:	2140      	movs	r1, #64	; 0x40
 800065a:	2007      	movs	r0, #7
 800065c:	f7ff fe3e 	bl	80002dc <nrf24_WriteReg>

			return 1;
 8000660:	2301      	movs	r3, #1
 8000662:	e000      	b.n	8000666 <isDataAvailable+0x36>
	}
	return 0;
 8000664:	2300      	movs	r3, #0
}
 8000666:	4618      	mov	r0, r3
 8000668:	3710      	adds	r7, #16
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
	...

08000670 <NRF24_Receive>:

void NRF24_Receive (uint8_t *data){
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 8000678:	2300      	movs	r3, #0
 800067a:	73fb      	strb	r3, [r7, #15]

	//select the device
	CS_Select();
 800067c:	f7ff fe00 	bl	8000280 <CS_Select>

	//payload command
	cmdtosend = R_RX_PAYLOAD;
 8000680:	2361      	movs	r3, #97	; 0x61
 8000682:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 8000684:	f107 010f 	add.w	r1, r7, #15
 8000688:	2364      	movs	r3, #100	; 0x64
 800068a:	2201      	movs	r2, #1
 800068c:	480c      	ldr	r0, [pc, #48]	; (80006c0 <NRF24_Receive+0x50>)
 800068e:	f002 f8d8 	bl	8002842 <HAL_SPI_Transmit>

	//receive the payload
	HAL_SPI_Receive(NRF24_SPI, data, 32, 1000);
 8000692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000696:	2220      	movs	r2, #32
 8000698:	6879      	ldr	r1, [r7, #4]
 800069a:	4809      	ldr	r0, [pc, #36]	; (80006c0 <NRF24_Receive+0x50>)
 800069c:	f002 fa46 	bl	8002b2c <HAL_SPI_Receive>

	//unselect the device
	CS_UnSelect();
 80006a0:	f7ff fdfa 	bl	8000298 <CS_UnSelect>

	HAL_Delay(1);
 80006a4:	2001      	movs	r0, #1
 80006a6:	f000 fc33 	bl	8000f10 <HAL_Delay>

	cmdtosend = FLUSH_RX;
 80006aa:	23e2      	movs	r3, #226	; 0xe2
 80006ac:	73fb      	strb	r3, [r7, #15]
	nrfsendCmd(cmdtosend);
 80006ae:	7bfb      	ldrb	r3, [r7, #15]
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff fe9b 	bl	80003ec <nrfsendCmd>

}
 80006b6:	bf00      	nop
 80006b8:	3710      	adds	r7, #16
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	200000a0 	.word	0x200000a0

080006c4 <NRF24_ReadAll>:

// Read all the Register data
void NRF24_ReadAll (uint8_t *data)
{
 80006c4:	b590      	push	{r4, r7, lr}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	for (int i=0; i<10; i++)
 80006cc:	2300      	movs	r3, #0
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	e00c      	b.n	80006ec <NRF24_ReadAll+0x28>
	{
		*(data+i) = nrf24_ReadReg(i);
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	b2d9      	uxtb	r1, r3
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	687a      	ldr	r2, [r7, #4]
 80006da:	18d4      	adds	r4, r2, r3
 80006dc:	4608      	mov	r0, r1
 80006de:	f7ff fe45 	bl	800036c <nrf24_ReadReg>
 80006e2:	4603      	mov	r3, r0
 80006e4:	7023      	strb	r3, [r4, #0]
	for (int i=0; i<10; i++)
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	3301      	adds	r3, #1
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	2b09      	cmp	r3, #9
 80006f0:	ddef      	ble.n	80006d2 <NRF24_ReadAll+0xe>
	}

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+10), 5);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	330a      	adds	r3, #10
 80006f6:	2205      	movs	r2, #5
 80006f8:	4619      	mov	r1, r3
 80006fa:	200a      	movs	r0, #10
 80006fc:	f7ff fe56 	bl	80003ac <nrf24_ReadReg_Multi>

	nrf24_ReadReg_Multi(RX_ADDR_P1, (data+15), 5);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	330f      	adds	r3, #15
 8000704:	2205      	movs	r2, #5
 8000706:	4619      	mov	r1, r3
 8000708:	200b      	movs	r0, #11
 800070a:	f7ff fe4f 	bl	80003ac <nrf24_ReadReg_Multi>

	*(data+20) = nrf24_ReadReg(RX_ADDR_P2);
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	f103 0414 	add.w	r4, r3, #20
 8000714:	200c      	movs	r0, #12
 8000716:	f7ff fe29 	bl	800036c <nrf24_ReadReg>
 800071a:	4603      	mov	r3, r0
 800071c:	7023      	strb	r3, [r4, #0]
	*(data+21) = nrf24_ReadReg(RX_ADDR_P3);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	f103 0415 	add.w	r4, r3, #21
 8000724:	200d      	movs	r0, #13
 8000726:	f7ff fe21 	bl	800036c <nrf24_ReadReg>
 800072a:	4603      	mov	r3, r0
 800072c:	7023      	strb	r3, [r4, #0]
	*(data+22) = nrf24_ReadReg(RX_ADDR_P4);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	f103 0416 	add.w	r4, r3, #22
 8000734:	200e      	movs	r0, #14
 8000736:	f7ff fe19 	bl	800036c <nrf24_ReadReg>
 800073a:	4603      	mov	r3, r0
 800073c:	7023      	strb	r3, [r4, #0]
	*(data+23) = nrf24_ReadReg(RX_ADDR_P5);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	f103 0417 	add.w	r4, r3, #23
 8000744:	200f      	movs	r0, #15
 8000746:	f7ff fe11 	bl	800036c <nrf24_ReadReg>
 800074a:	4603      	mov	r3, r0
 800074c:	7023      	strb	r3, [r4, #0]

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+24), 5);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	3318      	adds	r3, #24
 8000752:	2205      	movs	r2, #5
 8000754:	4619      	mov	r1, r3
 8000756:	200a      	movs	r0, #10
 8000758:	f7ff fe28 	bl	80003ac <nrf24_ReadReg_Multi>

	for (int i=29; i<38; i++)
 800075c:	231d      	movs	r3, #29
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	e00e      	b.n	8000780 <NRF24_ReadAll+0xbc>
	{
		*(data+i) = nrf24_ReadReg(i-12);
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	b2db      	uxtb	r3, r3
 8000766:	3b0c      	subs	r3, #12
 8000768:	b2d9      	uxtb	r1, r3
 800076a:	68bb      	ldr	r3, [r7, #8]
 800076c:	687a      	ldr	r2, [r7, #4]
 800076e:	18d4      	adds	r4, r2, r3
 8000770:	4608      	mov	r0, r1
 8000772:	f7ff fdfb 	bl	800036c <nrf24_ReadReg>
 8000776:	4603      	mov	r3, r0
 8000778:	7023      	strb	r3, [r4, #0]
	for (int i=29; i<38; i++)
 800077a:	68bb      	ldr	r3, [r7, #8]
 800077c:	3301      	adds	r3, #1
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	2b25      	cmp	r3, #37	; 0x25
 8000784:	dded      	ble.n	8000762 <NRF24_ReadAll+0x9e>
	}

}
 8000786:	bf00      	nop
 8000788:	bf00      	nop
 800078a:	3714      	adds	r7, #20
 800078c:	46bd      	mov	sp, r7
 800078e:	bd90      	pop	{r4, r7, pc}

08000790 <_write>:
#include <stdio.h>
#include <errno.h>
#include <sys/stat.h>
#include <sys/times.h>
#include <sys/unistd.h>
int _write(int file, char *ptr, int len) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef xStatus;
    switch (file) {
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	2b01      	cmp	r3, #1
 80007a0:	d003      	beq.n	80007aa <_write+0x1a>
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	2b02      	cmp	r3, #2
 80007a6:	d015      	beq.n	80007d4 <_write+0x44>
 80007a8:	e029      	b.n	80007fe <_write+0x6e>
    case STDOUT_FILENO: /*stdout*/
		xStatus = HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	b29a      	uxth	r2, r3
 80007ae:	f04f 33ff 	mov.w	r3, #4294967295
 80007b2:	68b9      	ldr	r1, [r7, #8]
 80007b4:	481a      	ldr	r0, [pc, #104]	; (8000820 <_write+0x90>)
 80007b6:	f002 ff1d 	bl	80035f4 <HAL_UART_Transmit>
 80007ba:	4603      	mov	r3, r0
 80007bc:	75fb      	strb	r3, [r7, #23]
		if (xStatus != HAL_OK) {
 80007be:	7dfb      	ldrb	r3, [r7, #23]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d024      	beq.n	800080e <_write+0x7e>
			errno = EIO;
 80007c4:	f003 faec 	bl	8003da0 <__errno>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2205      	movs	r2, #5
 80007cc:	601a      	str	r2, [r3, #0]
			return -1;
 80007ce:	f04f 33ff 	mov.w	r3, #4294967295
 80007d2:	e020      	b.n	8000816 <_write+0x86>
		}
        break;
    case STDERR_FILENO: /*stderr*/
		xStatus = HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	b29a      	uxth	r2, r3
 80007d8:	f04f 33ff 	mov.w	r3, #4294967295
 80007dc:	68b9      	ldr	r1, [r7, #8]
 80007de:	4810      	ldr	r0, [pc, #64]	; (8000820 <_write+0x90>)
 80007e0:	f002 ff08 	bl	80035f4 <HAL_UART_Transmit>
 80007e4:	4603      	mov	r3, r0
 80007e6:	75fb      	strb	r3, [r7, #23]
		if (xStatus != HAL_OK) {
 80007e8:	7dfb      	ldrb	r3, [r7, #23]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d011      	beq.n	8000812 <_write+0x82>
			errno = EIO;
 80007ee:	f003 fad7 	bl	8003da0 <__errno>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2205      	movs	r2, #5
 80007f6:	601a      	str	r2, [r3, #0]
			return -1;
 80007f8:	f04f 33ff 	mov.w	r3, #4294967295
 80007fc:	e00b      	b.n	8000816 <_write+0x86>
		}
        break;
    default:
        errno = EBADF;
 80007fe:	f003 facf 	bl	8003da0 <__errno>
 8000802:	4603      	mov	r3, r0
 8000804:	2209      	movs	r2, #9
 8000806:	601a      	str	r2, [r3, #0]
        return -1;
 8000808:	f04f 33ff 	mov.w	r3, #4294967295
 800080c:	e003      	b.n	8000816 <_write+0x86>
        break;
 800080e:	bf00      	nop
 8000810:	e000      	b.n	8000814 <_write+0x84>
        break;
 8000812:	bf00      	nop
    }
    return len;
 8000814:	687b      	ldr	r3, [r7, #4]
}
 8000816:	4618      	mov	r0, r3
 8000818:	3718      	adds	r7, #24
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000158 	.word	0x20000158

08000824 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000828:	f000 fb0c 	bl	8000e44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800082c:	f000 f838 	bl	80008a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000830:	f000 f8ec 	bl	8000a0c <MX_GPIO_Init>
  MX_SPI2_Init();
 8000834:	f000 f878 	bl	8000928 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000838:	f000 f8b4 	bl	80009a4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  NRF24_Init();
 800083c:	f7ff fe92 	bl	8000564 <NRF24_Init>

  NRF24_RxMode(RxAddress, 10);
 8000840:	210a      	movs	r1, #10
 8000842:	4812      	ldr	r0, [pc, #72]	; (800088c <main+0x68>)
 8000844:	f7ff feb5 	bl	80005b2 <NRF24_RxMode>

  NRF24_ReadAll(data);
 8000848:	4811      	ldr	r0, [pc, #68]	; (8000890 <main+0x6c>)
 800084a:	f7ff ff3b 	bl	80006c4 <NRF24_ReadAll>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(isDataAvailable(2) == 1)
 800084e:	2002      	movs	r0, #2
 8000850:	f7ff feee 	bl	8000630 <isDataAvailable>
 8000854:	4603      	mov	r3, r0
 8000856:	2b01      	cmp	r3, #1
 8000858:	d1f9      	bne.n	800084e <main+0x2a>
	  	  {
		  	  HAL_GPIO_TogglePin(LEDA_GPIO_Port, LEDA_Pin);
 800085a:	2120      	movs	r1, #32
 800085c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000860:	f000 fdea 	bl	8001438 <HAL_GPIO_TogglePin>
	  		  NRF24_Receive(RxData);
 8000864:	480b      	ldr	r0, [pc, #44]	; (8000894 <main+0x70>)
 8000866:	f7ff ff03 	bl	8000670 <NRF24_Receive>
	  		  HAL_UART_Transmit(&huart2, RxData, strlen((char *)RxData), 1000);
 800086a:	480a      	ldr	r0, [pc, #40]	; (8000894 <main+0x70>)
 800086c:	f7ff fcb0 	bl	80001d0 <strlen>
 8000870:	4603      	mov	r3, r0
 8000872:	b29a      	uxth	r2, r3
 8000874:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000878:	4906      	ldr	r1, [pc, #24]	; (8000894 <main+0x70>)
 800087a:	4807      	ldr	r0, [pc, #28]	; (8000898 <main+0x74>)
 800087c:	f002 feba 	bl	80035f4 <HAL_UART_Transmit>
	  		  printf("\n%d\r\n", RxData);
 8000880:	4904      	ldr	r1, [pc, #16]	; (8000894 <main+0x70>)
 8000882:	4806      	ldr	r0, [pc, #24]	; (800089c <main+0x78>)
 8000884:	f003 fabe 	bl	8003e04 <iprintf>
	  if(isDataAvailable(2) == 1)
 8000888:	e7e1      	b.n	800084e <main+0x2a>
 800088a:	bf00      	nop
 800088c:	20000000 	.word	0x20000000
 8000890:	20000104 	.word	0x20000104
 8000894:	20000138 	.word	0x20000138
 8000898:	20000158 	.word	0x20000158
 800089c:	08004cd8 	.word	0x08004cd8

080008a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b090      	sub	sp, #64	; 0x40
 80008a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a6:	f107 0318 	add.w	r3, r7, #24
 80008aa:	2228      	movs	r2, #40	; 0x28
 80008ac:	2100      	movs	r1, #0
 80008ae:	4618      	mov	r0, r3
 80008b0:	f003 faa0 	bl	8003df4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b4:	1d3b      	adds	r3, r7, #4
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
 80008c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008c2:	2301      	movs	r3, #1
 80008c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV4;
 80008cc:	2303      	movs	r3, #3
 80008ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008d0:	2301      	movs	r3, #1
 80008d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d4:	2302      	movs	r3, #2
 80008d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL5;
 80008de:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80008e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e4:	f107 0318 	add.w	r3, r7, #24
 80008e8:	4618      	mov	r0, r3
 80008ea:	f000 fdbf 	bl	800146c <HAL_RCC_OscConfig>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80008f4:	f000 f908 	bl	8000b08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f8:	230f      	movs	r3, #15
 80008fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008fc:	2302      	movs	r3, #2
 80008fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8000900:	2390      	movs	r3, #144	; 0x90
 8000902:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000904:	2300      	movs	r3, #0
 8000906:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000908:	2300      	movs	r3, #0
 800090a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	2100      	movs	r1, #0
 8000910:	4618      	mov	r0, r3
 8000912:	f001 fcb3 	bl	800227c <HAL_RCC_ClockConfig>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800091c:	f000 f8f4 	bl	8000b08 <Error_Handler>
  }
}
 8000920:	bf00      	nop
 8000922:	3740      	adds	r7, #64	; 0x40
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800092c:	4b1b      	ldr	r3, [pc, #108]	; (800099c <MX_SPI2_Init+0x74>)
 800092e:	4a1c      	ldr	r2, [pc, #112]	; (80009a0 <MX_SPI2_Init+0x78>)
 8000930:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000932:	4b1a      	ldr	r3, [pc, #104]	; (800099c <MX_SPI2_Init+0x74>)
 8000934:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000938:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800093a:	4b18      	ldr	r3, [pc, #96]	; (800099c <MX_SPI2_Init+0x74>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000940:	4b16      	ldr	r3, [pc, #88]	; (800099c <MX_SPI2_Init+0x74>)
 8000942:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000946:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000948:	4b14      	ldr	r3, [pc, #80]	; (800099c <MX_SPI2_Init+0x74>)
 800094a:	2200      	movs	r2, #0
 800094c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800094e:	4b13      	ldr	r3, [pc, #76]	; (800099c <MX_SPI2_Init+0x74>)
 8000950:	2200      	movs	r2, #0
 8000952:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000954:	4b11      	ldr	r3, [pc, #68]	; (800099c <MX_SPI2_Init+0x74>)
 8000956:	f44f 7200 	mov.w	r2, #512	; 0x200
 800095a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <MX_SPI2_Init+0x74>)
 800095e:	2200      	movs	r2, #0
 8000960:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <MX_SPI2_Init+0x74>)
 8000964:	2200      	movs	r2, #0
 8000966:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <MX_SPI2_Init+0x74>)
 800096a:	2200      	movs	r2, #0
 800096c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <MX_SPI2_Init+0x74>)
 8000970:	2200      	movs	r2, #0
 8000972:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000974:	4b09      	ldr	r3, [pc, #36]	; (800099c <MX_SPI2_Init+0x74>)
 8000976:	2207      	movs	r2, #7
 8000978:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800097a:	4b08      	ldr	r3, [pc, #32]	; (800099c <MX_SPI2_Init+0x74>)
 800097c:	2200      	movs	r2, #0
 800097e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <MX_SPI2_Init+0x74>)
 8000982:	2208      	movs	r2, #8
 8000984:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000986:	4805      	ldr	r0, [pc, #20]	; (800099c <MX_SPI2_Init+0x74>)
 8000988:	f001 feb0 	bl	80026ec <HAL_SPI_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000992:	f000 f8b9 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	200000a0 	.word	0x200000a0
 80009a0:	40003800 	.word	0x40003800

080009a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009a8:	4b16      	ldr	r3, [pc, #88]	; (8000a04 <MX_USART2_UART_Init+0x60>)
 80009aa:	4a17      	ldr	r2, [pc, #92]	; (8000a08 <MX_USART2_UART_Init+0x64>)
 80009ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80009ae:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <MX_USART2_UART_Init+0x60>)
 80009b0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009b6:	4b13      	ldr	r3, [pc, #76]	; (8000a04 <MX_USART2_UART_Init+0x60>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009bc:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <MX_USART2_UART_Init+0x60>)
 80009be:	2200      	movs	r2, #0
 80009c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009c2:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <MX_USART2_UART_Init+0x60>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009c8:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <MX_USART2_UART_Init+0x60>)
 80009ca:	220c      	movs	r2, #12
 80009cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ce:	4b0d      	ldr	r3, [pc, #52]	; (8000a04 <MX_USART2_UART_Init+0x60>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d4:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <MX_USART2_UART_Init+0x60>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009da:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <MX_USART2_UART_Init+0x60>)
 80009dc:	2200      	movs	r2, #0
 80009de:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80009e0:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <MX_USART2_UART_Init+0x60>)
 80009e2:	2208      	movs	r2, #8
 80009e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80009e6:	4b07      	ldr	r3, [pc, #28]	; (8000a04 <MX_USART2_UART_Init+0x60>)
 80009e8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80009ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ee:	4805      	ldr	r0, [pc, #20]	; (8000a04 <MX_USART2_UART_Init+0x60>)
 80009f0:	f002 fdb2 	bl	8003558 <HAL_UART_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 80009fa:	f000 f885 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000158 	.word	0x20000158
 8000a08:	40004400 	.word	0x40004400

08000a0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	; 0x28
 8000a10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a12:	f107 0314 	add.w	r3, r7, #20
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]
 8000a1c:	609a      	str	r2, [r3, #8]
 8000a1e:	60da      	str	r2, [r3, #12]
 8000a20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a22:	4b36      	ldr	r3, [pc, #216]	; (8000afc <MX_GPIO_Init+0xf0>)
 8000a24:	695b      	ldr	r3, [r3, #20]
 8000a26:	4a35      	ldr	r2, [pc, #212]	; (8000afc <MX_GPIO_Init+0xf0>)
 8000a28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a2c:	6153      	str	r3, [r2, #20]
 8000a2e:	4b33      	ldr	r3, [pc, #204]	; (8000afc <MX_GPIO_Init+0xf0>)
 8000a30:	695b      	ldr	r3, [r3, #20]
 8000a32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a3a:	4b30      	ldr	r3, [pc, #192]	; (8000afc <MX_GPIO_Init+0xf0>)
 8000a3c:	695b      	ldr	r3, [r3, #20]
 8000a3e:	4a2f      	ldr	r2, [pc, #188]	; (8000afc <MX_GPIO_Init+0xf0>)
 8000a40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a44:	6153      	str	r3, [r2, #20]
 8000a46:	4b2d      	ldr	r3, [pc, #180]	; (8000afc <MX_GPIO_Init+0xf0>)
 8000a48:	695b      	ldr	r3, [r3, #20]
 8000a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	4b2a      	ldr	r3, [pc, #168]	; (8000afc <MX_GPIO_Init+0xf0>)
 8000a54:	695b      	ldr	r3, [r3, #20]
 8000a56:	4a29      	ldr	r2, [pc, #164]	; (8000afc <MX_GPIO_Init+0xf0>)
 8000a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a5c:	6153      	str	r3, [r2, #20]
 8000a5e:	4b27      	ldr	r3, [pc, #156]	; (8000afc <MX_GPIO_Init+0xf0>)
 8000a60:	695b      	ldr	r3, [r3, #20]
 8000a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6a:	4b24      	ldr	r3, [pc, #144]	; (8000afc <MX_GPIO_Init+0xf0>)
 8000a6c:	695b      	ldr	r3, [r3, #20]
 8000a6e:	4a23      	ldr	r2, [pc, #140]	; (8000afc <MX_GPIO_Init+0xf0>)
 8000a70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a74:	6153      	str	r3, [r2, #20]
 8000a76:	4b21      	ldr	r3, [pc, #132]	; (8000afc <MX_GPIO_Init+0xf0>)
 8000a78:	695b      	ldr	r3, [r3, #20]
 8000a7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BUZZ_Pin|LEDA_Pin|LEDB_Pin|RF_CE_Pin, GPIO_PIN_RESET);
 8000a82:	2200      	movs	r2, #0
 8000a84:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8000a88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a8c:	f000 fcbc 	bl	8001408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a96:	481a      	ldr	r0, [pc, #104]	; (8000b00 <MX_GPIO_Init+0xf4>)
 8000a98:	f000 fcb6 	bl	8001408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BEL_Pin */
  GPIO_InitStruct.Pin = BEL_Pin;
 8000a9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BEL_GPIO_Port, &GPIO_InitStruct);
 8000aaa:	f107 0314 	add.w	r3, r7, #20
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4814      	ldr	r0, [pc, #80]	; (8000b04 <MX_GPIO_Init+0xf8>)
 8000ab2:	f000 fb37 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZ_Pin LEDA_Pin LEDB_Pin RF_CE_Pin */
  GPIO_InitStruct.Pin = BUZZ_Pin|LEDA_Pin|LEDB_Pin|RF_CE_Pin;
 8000ab6:	f44f 73b8 	mov.w	r3, #368	; 0x170
 8000aba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abc:	2301      	movs	r3, #1
 8000abe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	4619      	mov	r1, r3
 8000ace:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad2:	f000 fb27 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8000ad6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ada:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000adc:	2301      	movs	r3, #1
 8000ade:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	4619      	mov	r1, r3
 8000aee:	4804      	ldr	r0, [pc, #16]	; (8000b00 <MX_GPIO_Init+0xf4>)
 8000af0:	f000 fb18 	bl	8001124 <HAL_GPIO_Init>

}
 8000af4:	bf00      	nop
 8000af6:	3728      	adds	r7, #40	; 0x28
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40021000 	.word	0x40021000
 8000b00:	48000400 	.word	0x48000400
 8000b04:	48000800 	.word	0x48000800

08000b08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b0c:	b672      	cpsid	i
}
 8000b0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <Error_Handler+0x8>
	...

08000b14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1a:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <HAL_MspInit+0x44>)
 8000b1c:	699b      	ldr	r3, [r3, #24]
 8000b1e:	4a0e      	ldr	r2, [pc, #56]	; (8000b58 <HAL_MspInit+0x44>)
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	6193      	str	r3, [r2, #24]
 8000b26:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <HAL_MspInit+0x44>)
 8000b28:	699b      	ldr	r3, [r3, #24]
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b32:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <HAL_MspInit+0x44>)
 8000b34:	69db      	ldr	r3, [r3, #28]
 8000b36:	4a08      	ldr	r2, [pc, #32]	; (8000b58 <HAL_MspInit+0x44>)
 8000b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b3c:	61d3      	str	r3, [r2, #28]
 8000b3e:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <HAL_MspInit+0x44>)
 8000b40:	69db      	ldr	r3, [r3, #28]
 8000b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b46:	603b      	str	r3, [r7, #0]
 8000b48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	40021000 	.word	0x40021000

08000b5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	; 0x28
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a17      	ldr	r2, [pc, #92]	; (8000bd8 <HAL_SPI_MspInit+0x7c>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d128      	bne.n	8000bd0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b7e:	4b17      	ldr	r3, [pc, #92]	; (8000bdc <HAL_SPI_MspInit+0x80>)
 8000b80:	69db      	ldr	r3, [r3, #28]
 8000b82:	4a16      	ldr	r2, [pc, #88]	; (8000bdc <HAL_SPI_MspInit+0x80>)
 8000b84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b88:	61d3      	str	r3, [r2, #28]
 8000b8a:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <HAL_SPI_MspInit+0x80>)
 8000b8c:	69db      	ldr	r3, [r3, #28]
 8000b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b96:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <HAL_SPI_MspInit+0x80>)
 8000b98:	695b      	ldr	r3, [r3, #20]
 8000b9a:	4a10      	ldr	r2, [pc, #64]	; (8000bdc <HAL_SPI_MspInit+0x80>)
 8000b9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ba0:	6153      	str	r3, [r2, #20]
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <HAL_SPI_MspInit+0x80>)
 8000ba4:	695b      	ldr	r3, [r3, #20]
 8000ba6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000bae:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000bb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bc0:	2305      	movs	r3, #5
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4805      	ldr	r0, [pc, #20]	; (8000be0 <HAL_SPI_MspInit+0x84>)
 8000bcc:	f000 faaa 	bl	8001124 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000bd0:	bf00      	nop
 8000bd2:	3728      	adds	r7, #40	; 0x28
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40003800 	.word	0x40003800
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	48000400 	.word	0x48000400

08000be4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a17      	ldr	r2, [pc, #92]	; (8000c60 <HAL_UART_MspInit+0x7c>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d128      	bne.n	8000c58 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c06:	4b17      	ldr	r3, [pc, #92]	; (8000c64 <HAL_UART_MspInit+0x80>)
 8000c08:	69db      	ldr	r3, [r3, #28]
 8000c0a:	4a16      	ldr	r2, [pc, #88]	; (8000c64 <HAL_UART_MspInit+0x80>)
 8000c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c10:	61d3      	str	r3, [r2, #28]
 8000c12:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <HAL_UART_MspInit+0x80>)
 8000c14:	69db      	ldr	r3, [r3, #28]
 8000c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1e:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <HAL_UART_MspInit+0x80>)
 8000c20:	695b      	ldr	r3, [r3, #20]
 8000c22:	4a10      	ldr	r2, [pc, #64]	; (8000c64 <HAL_UART_MspInit+0x80>)
 8000c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c28:	6153      	str	r3, [r2, #20]
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <HAL_UART_MspInit+0x80>)
 8000c2c:	695b      	ldr	r3, [r3, #20]
 8000c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c36:	230c      	movs	r3, #12
 8000c38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c42:	2303      	movs	r3, #3
 8000c44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c46:	2307      	movs	r3, #7
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4a:	f107 0314 	add.w	r3, r7, #20
 8000c4e:	4619      	mov	r1, r3
 8000c50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c54:	f000 fa66 	bl	8001124 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c58:	bf00      	nop
 8000c5a:	3728      	adds	r7, #40	; 0x28
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40004400 	.word	0x40004400
 8000c64:	40021000 	.word	0x40021000

08000c68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <NMI_Handler+0x4>

08000c6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c72:	e7fe      	b.n	8000c72 <HardFault_Handler+0x4>

08000c74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <MemManage_Handler+0x4>

08000c7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c7e:	e7fe      	b.n	8000c7e <BusFault_Handler+0x4>

08000c80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <UsageFault_Handler+0x4>

08000c86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb4:	f000 f90c 	bl	8000ed0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]
 8000ccc:	e00a      	b.n	8000ce4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cce:	f3af 8000 	nop.w
 8000cd2:	4601      	mov	r1, r0
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	1c5a      	adds	r2, r3, #1
 8000cd8:	60ba      	str	r2, [r7, #8]
 8000cda:	b2ca      	uxtb	r2, r1
 8000cdc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	617b      	str	r3, [r7, #20]
 8000ce4:	697a      	ldr	r2, [r7, #20]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	dbf0      	blt.n	8000cce <_read+0x12>
	}

return len;
 8000cec:	687b      	ldr	r3, [r7, #4]
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3718      	adds	r7, #24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b083      	sub	sp, #12
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
	return -1;
 8000cfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	b083      	sub	sp, #12
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
 8000d16:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d1e:	605a      	str	r2, [r3, #4]
	return 0;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <_isatty>:

int _isatty(int file)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	b083      	sub	sp, #12
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
	return 1;
 8000d36:	2301      	movs	r3, #1
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
	return 0;
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3714      	adds	r7, #20
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
	...

08000d60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d68:	4a14      	ldr	r2, [pc, #80]	; (8000dbc <_sbrk+0x5c>)
 8000d6a:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <_sbrk+0x60>)
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d74:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <_sbrk+0x64>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d102      	bne.n	8000d82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d7c:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <_sbrk+0x64>)
 8000d7e:	4a12      	ldr	r2, [pc, #72]	; (8000dc8 <_sbrk+0x68>)
 8000d80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d82:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <_sbrk+0x64>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4413      	add	r3, r2
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d207      	bcs.n	8000da0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d90:	f003 f806 	bl	8003da0 <__errno>
 8000d94:	4603      	mov	r3, r0
 8000d96:	220c      	movs	r2, #12
 8000d98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d9e:	e009      	b.n	8000db4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000da0:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <_sbrk+0x64>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000da6:	4b07      	ldr	r3, [pc, #28]	; (8000dc4 <_sbrk+0x64>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4413      	add	r3, r2
 8000dae:	4a05      	ldr	r2, [pc, #20]	; (8000dc4 <_sbrk+0x64>)
 8000db0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000db2:	68fb      	ldr	r3, [r7, #12]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3718      	adds	r7, #24
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20004000 	.word	0x20004000
 8000dc0:	00000400 	.word	0x00000400
 8000dc4:	20000094 	.word	0x20000094
 8000dc8:	200001f8 	.word	0x200001f8

08000dcc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <SystemInit+0x20>)
 8000dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dd6:	4a05      	ldr	r2, [pc, #20]	; (8000dec <SystemInit+0x20>)
 8000dd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ddc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000df0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e28 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000df4:	f7ff ffea 	bl	8000dcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000df8:	480c      	ldr	r0, [pc, #48]	; (8000e2c <LoopForever+0x6>)
  ldr r1, =_edata
 8000dfa:	490d      	ldr	r1, [pc, #52]	; (8000e30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dfc:	4a0d      	ldr	r2, [pc, #52]	; (8000e34 <LoopForever+0xe>)
  movs r3, #0
 8000dfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e00:	e002      	b.n	8000e08 <LoopCopyDataInit>

08000e02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e06:	3304      	adds	r3, #4

08000e08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e0c:	d3f9      	bcc.n	8000e02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e0e:	4a0a      	ldr	r2, [pc, #40]	; (8000e38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e10:	4c0a      	ldr	r4, [pc, #40]	; (8000e3c <LoopForever+0x16>)
  movs r3, #0
 8000e12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e14:	e001      	b.n	8000e1a <LoopFillZerobss>

08000e16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e18:	3204      	adds	r2, #4

08000e1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e1c:	d3fb      	bcc.n	8000e16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e1e:	f002 ffc5 	bl	8003dac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e22:	f7ff fcff 	bl	8000824 <main>

08000e26 <LoopForever>:

LoopForever:
    b LoopForever
 8000e26:	e7fe      	b.n	8000e26 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e28:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000e2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e30:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000e34:	08004db8 	.word	0x08004db8
  ldr r2, =_sbss
 8000e38:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000e3c:	200001f4 	.word	0x200001f4

08000e40 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e40:	e7fe      	b.n	8000e40 <ADC1_IRQHandler>
	...

08000e44 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e48:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <HAL_Init+0x28>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a07      	ldr	r2, [pc, #28]	; (8000e6c <HAL_Init+0x28>)
 8000e4e:	f043 0310 	orr.w	r3, r3, #16
 8000e52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e54:	2003      	movs	r0, #3
 8000e56:	f000 f931 	bl	80010bc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e5a:	200f      	movs	r0, #15
 8000e5c:	f000 f808 	bl	8000e70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e60:	f7ff fe58 	bl	8000b14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40022000 	.word	0x40022000

08000e70 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e78:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <HAL_InitTick+0x54>)
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <HAL_InitTick+0x58>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	4619      	mov	r1, r3
 8000e82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f000 f93b 	bl	800110a <HAL_SYSTICK_Config>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e00e      	b.n	8000ebc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2b0f      	cmp	r3, #15
 8000ea2:	d80a      	bhi.n	8000eba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	6879      	ldr	r1, [r7, #4]
 8000ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eac:	f000 f911 	bl	80010d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb0:	4a06      	ldr	r2, [pc, #24]	; (8000ecc <HAL_InitTick+0x5c>)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	e000      	b.n	8000ebc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20000008 	.word	0x20000008
 8000ec8:	20000010 	.word	0x20000010
 8000ecc:	2000000c 	.word	0x2000000c

08000ed0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <HAL_IncTick+0x20>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <HAL_IncTick+0x24>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4413      	add	r3, r2
 8000ee0:	4a04      	ldr	r2, [pc, #16]	; (8000ef4 <HAL_IncTick+0x24>)
 8000ee2:	6013      	str	r3, [r2, #0]
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	20000010 	.word	0x20000010
 8000ef4:	200001e0 	.word	0x200001e0

08000ef8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return uwTick;  
 8000efc:	4b03      	ldr	r3, [pc, #12]	; (8000f0c <HAL_GetTick+0x14>)
 8000efe:	681b      	ldr	r3, [r3, #0]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	200001e0 	.word	0x200001e0

08000f10 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f18:	f7ff ffee 	bl	8000ef8 <HAL_GetTick>
 8000f1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f28:	d005      	beq.n	8000f36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <HAL_Delay+0x44>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	461a      	mov	r2, r3
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	4413      	add	r3, r2
 8000f34:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000f36:	bf00      	nop
 8000f38:	f7ff ffde 	bl	8000ef8 <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	68fa      	ldr	r2, [r7, #12]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d8f7      	bhi.n	8000f38 <HAL_Delay+0x28>
  {
  }
}
 8000f48:	bf00      	nop
 8000f4a:	bf00      	nop
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20000010 	.word	0x20000010

08000f58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f68:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <__NVIC_SetPriorityGrouping+0x44>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f6e:	68ba      	ldr	r2, [r7, #8]
 8000f70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f74:	4013      	ands	r3, r2
 8000f76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f8a:	4a04      	ldr	r2, [pc, #16]	; (8000f9c <__NVIC_SetPriorityGrouping+0x44>)
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	60d3      	str	r3, [r2, #12]
}
 8000f90:	bf00      	nop
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa4:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	0a1b      	lsrs	r3, r3, #8
 8000faa:	f003 0307 	and.w	r3, r3, #7
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	6039      	str	r1, [r7, #0]
 8000fc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	db0a      	blt.n	8000fe6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	490c      	ldr	r1, [pc, #48]	; (8001008 <__NVIC_SetPriority+0x4c>)
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	0112      	lsls	r2, r2, #4
 8000fdc:	b2d2      	uxtb	r2, r2
 8000fde:	440b      	add	r3, r1
 8000fe0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe4:	e00a      	b.n	8000ffc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	4908      	ldr	r1, [pc, #32]	; (800100c <__NVIC_SetPriority+0x50>)
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	f003 030f 	and.w	r3, r3, #15
 8000ff2:	3b04      	subs	r3, #4
 8000ff4:	0112      	lsls	r2, r2, #4
 8000ff6:	b2d2      	uxtb	r2, r2
 8000ff8:	440b      	add	r3, r1
 8000ffa:	761a      	strb	r2, [r3, #24]
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000e100 	.word	0xe000e100
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001010:	b480      	push	{r7}
 8001012:	b089      	sub	sp, #36	; 0x24
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f003 0307 	and.w	r3, r3, #7
 8001022:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	f1c3 0307 	rsb	r3, r3, #7
 800102a:	2b04      	cmp	r3, #4
 800102c:	bf28      	it	cs
 800102e:	2304      	movcs	r3, #4
 8001030:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	3304      	adds	r3, #4
 8001036:	2b06      	cmp	r3, #6
 8001038:	d902      	bls.n	8001040 <NVIC_EncodePriority+0x30>
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	3b03      	subs	r3, #3
 800103e:	e000      	b.n	8001042 <NVIC_EncodePriority+0x32>
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001044:	f04f 32ff 	mov.w	r2, #4294967295
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43da      	mvns	r2, r3
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	401a      	ands	r2, r3
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001058:	f04f 31ff 	mov.w	r1, #4294967295
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	fa01 f303 	lsl.w	r3, r1, r3
 8001062:	43d9      	mvns	r1, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001068:	4313      	orrs	r3, r2
         );
}
 800106a:	4618      	mov	r0, r3
 800106c:	3724      	adds	r7, #36	; 0x24
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
	...

08001078 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3b01      	subs	r3, #1
 8001084:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001088:	d301      	bcc.n	800108e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800108a:	2301      	movs	r3, #1
 800108c:	e00f      	b.n	80010ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800108e:	4a0a      	ldr	r2, [pc, #40]	; (80010b8 <SysTick_Config+0x40>)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3b01      	subs	r3, #1
 8001094:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001096:	210f      	movs	r1, #15
 8001098:	f04f 30ff 	mov.w	r0, #4294967295
 800109c:	f7ff ff8e 	bl	8000fbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a0:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <SysTick_Config+0x40>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010a6:	4b04      	ldr	r3, [pc, #16]	; (80010b8 <SysTick_Config+0x40>)
 80010a8:	2207      	movs	r2, #7
 80010aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	e000e010 	.word	0xe000e010

080010bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f7ff ff47 	bl	8000f58 <__NVIC_SetPriorityGrouping>
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b086      	sub	sp, #24
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	4603      	mov	r3, r0
 80010da:	60b9      	str	r1, [r7, #8]
 80010dc:	607a      	str	r2, [r7, #4]
 80010de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010e4:	f7ff ff5c 	bl	8000fa0 <__NVIC_GetPriorityGrouping>
 80010e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	68b9      	ldr	r1, [r7, #8]
 80010ee:	6978      	ldr	r0, [r7, #20]
 80010f0:	f7ff ff8e 	bl	8001010 <NVIC_EncodePriority>
 80010f4:	4602      	mov	r2, r0
 80010f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010fa:	4611      	mov	r1, r2
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff5d 	bl	8000fbc <__NVIC_SetPriority>
}
 8001102:	bf00      	nop
 8001104:	3718      	adds	r7, #24
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff ffb0 	bl	8001078 <SysTick_Config>
 8001118:	4603      	mov	r3, r0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001124:	b480      	push	{r7}
 8001126:	b087      	sub	sp, #28
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001132:	e14e      	b.n	80013d2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	2101      	movs	r1, #1
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	fa01 f303 	lsl.w	r3, r1, r3
 8001140:	4013      	ands	r3, r2
 8001142:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2b00      	cmp	r3, #0
 8001148:	f000 8140 	beq.w	80013cc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f003 0303 	and.w	r3, r3, #3
 8001154:	2b01      	cmp	r3, #1
 8001156:	d005      	beq.n	8001164 <HAL_GPIO_Init+0x40>
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 0303 	and.w	r3, r3, #3
 8001160:	2b02      	cmp	r3, #2
 8001162:	d130      	bne.n	80011c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	2203      	movs	r2, #3
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	43db      	mvns	r3, r3
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	4013      	ands	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	68da      	ldr	r2, [r3, #12]
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	4313      	orrs	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800119a:	2201      	movs	r2, #1
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43db      	mvns	r3, r3
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	4013      	ands	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	091b      	lsrs	r3, r3, #4
 80011b0:	f003 0201 	and.w	r2, r3, #1
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	4313      	orrs	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f003 0303 	and.w	r3, r3, #3
 80011ce:	2b03      	cmp	r3, #3
 80011d0:	d017      	beq.n	8001202 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	68db      	ldr	r3, [r3, #12]
 80011d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	2203      	movs	r2, #3
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43db      	mvns	r3, r3
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	4013      	ands	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	689a      	ldr	r2, [r3, #8]
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f003 0303 	and.w	r3, r3, #3
 800120a:	2b02      	cmp	r3, #2
 800120c:	d123      	bne.n	8001256 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	08da      	lsrs	r2, r3, #3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	3208      	adds	r2, #8
 8001216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800121a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	220f      	movs	r2, #15
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	43db      	mvns	r3, r3
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	4013      	ands	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	691a      	ldr	r2, [r3, #16]
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	f003 0307 	and.w	r3, r3, #7
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	4313      	orrs	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	08da      	lsrs	r2, r3, #3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3208      	adds	r2, #8
 8001250:	6939      	ldr	r1, [r7, #16]
 8001252:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	2203      	movs	r2, #3
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43db      	mvns	r3, r3
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	4013      	ands	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f003 0203 	and.w	r2, r3, #3
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	4313      	orrs	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001292:	2b00      	cmp	r3, #0
 8001294:	f000 809a 	beq.w	80013cc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001298:	4b55      	ldr	r3, [pc, #340]	; (80013f0 <HAL_GPIO_Init+0x2cc>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	4a54      	ldr	r2, [pc, #336]	; (80013f0 <HAL_GPIO_Init+0x2cc>)
 800129e:	f043 0301 	orr.w	r3, r3, #1
 80012a2:	6193      	str	r3, [r2, #24]
 80012a4:	4b52      	ldr	r3, [pc, #328]	; (80013f0 <HAL_GPIO_Init+0x2cc>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	f003 0301 	and.w	r3, r3, #1
 80012ac:	60bb      	str	r3, [r7, #8]
 80012ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012b0:	4a50      	ldr	r2, [pc, #320]	; (80013f4 <HAL_GPIO_Init+0x2d0>)
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	089b      	lsrs	r3, r3, #2
 80012b6:	3302      	adds	r3, #2
 80012b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	f003 0303 	and.w	r3, r3, #3
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	220f      	movs	r2, #15
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	4013      	ands	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012da:	d013      	beq.n	8001304 <HAL_GPIO_Init+0x1e0>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4a46      	ldr	r2, [pc, #280]	; (80013f8 <HAL_GPIO_Init+0x2d4>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d00d      	beq.n	8001300 <HAL_GPIO_Init+0x1dc>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4a45      	ldr	r2, [pc, #276]	; (80013fc <HAL_GPIO_Init+0x2d8>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d007      	beq.n	80012fc <HAL_GPIO_Init+0x1d8>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4a44      	ldr	r2, [pc, #272]	; (8001400 <HAL_GPIO_Init+0x2dc>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d101      	bne.n	80012f8 <HAL_GPIO_Init+0x1d4>
 80012f4:	2303      	movs	r3, #3
 80012f6:	e006      	b.n	8001306 <HAL_GPIO_Init+0x1e2>
 80012f8:	2305      	movs	r3, #5
 80012fa:	e004      	b.n	8001306 <HAL_GPIO_Init+0x1e2>
 80012fc:	2302      	movs	r3, #2
 80012fe:	e002      	b.n	8001306 <HAL_GPIO_Init+0x1e2>
 8001300:	2301      	movs	r3, #1
 8001302:	e000      	b.n	8001306 <HAL_GPIO_Init+0x1e2>
 8001304:	2300      	movs	r3, #0
 8001306:	697a      	ldr	r2, [r7, #20]
 8001308:	f002 0203 	and.w	r2, r2, #3
 800130c:	0092      	lsls	r2, r2, #2
 800130e:	4093      	lsls	r3, r2
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	4313      	orrs	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001316:	4937      	ldr	r1, [pc, #220]	; (80013f4 <HAL_GPIO_Init+0x2d0>)
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	089b      	lsrs	r3, r3, #2
 800131c:	3302      	adds	r3, #2
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001324:	4b37      	ldr	r3, [pc, #220]	; (8001404 <HAL_GPIO_Init+0x2e0>)
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	43db      	mvns	r3, r3
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4013      	ands	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d003      	beq.n	8001348 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	4313      	orrs	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001348:	4a2e      	ldr	r2, [pc, #184]	; (8001404 <HAL_GPIO_Init+0x2e0>)
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800134e:	4b2d      	ldr	r3, [pc, #180]	; (8001404 <HAL_GPIO_Init+0x2e0>)
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	43db      	mvns	r3, r3
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	4013      	ands	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4313      	orrs	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001372:	4a24      	ldr	r2, [pc, #144]	; (8001404 <HAL_GPIO_Init+0x2e0>)
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001378:	4b22      	ldr	r3, [pc, #136]	; (8001404 <HAL_GPIO_Init+0x2e0>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	43db      	mvns	r3, r3
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	4013      	ands	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d003      	beq.n	800139c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	4313      	orrs	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800139c:	4a19      	ldr	r2, [pc, #100]	; (8001404 <HAL_GPIO_Init+0x2e0>)
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013a2:	4b18      	ldr	r3, [pc, #96]	; (8001404 <HAL_GPIO_Init+0x2e0>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	43db      	mvns	r3, r3
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	4013      	ands	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d003      	beq.n	80013c6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013c6:	4a0f      	ldr	r2, [pc, #60]	; (8001404 <HAL_GPIO_Init+0x2e0>)
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	3301      	adds	r3, #1
 80013d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	fa22 f303 	lsr.w	r3, r2, r3
 80013dc:	2b00      	cmp	r3, #0
 80013de:	f47f aea9 	bne.w	8001134 <HAL_GPIO_Init+0x10>
  }
}
 80013e2:	bf00      	nop
 80013e4:	bf00      	nop
 80013e6:	371c      	adds	r7, #28
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	40021000 	.word	0x40021000
 80013f4:	40010000 	.word	0x40010000
 80013f8:	48000400 	.word	0x48000400
 80013fc:	48000800 	.word	0x48000800
 8001400:	48000c00 	.word	0x48000c00
 8001404:	40010400 	.word	0x40010400

08001408 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	460b      	mov	r3, r1
 8001412:	807b      	strh	r3, [r7, #2]
 8001414:	4613      	mov	r3, r2
 8001416:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001418:	787b      	ldrb	r3, [r7, #1]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d003      	beq.n	8001426 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800141e:	887a      	ldrh	r2, [r7, #2]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001424:	e002      	b.n	800142c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001426:	887a      	ldrh	r2, [r7, #2]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	460b      	mov	r3, r1
 8001442:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	695b      	ldr	r3, [r3, #20]
 8001448:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800144a:	887a      	ldrh	r2, [r7, #2]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	4013      	ands	r3, r2
 8001450:	041a      	lsls	r2, r3, #16
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	43d9      	mvns	r1, r3
 8001456:	887b      	ldrh	r3, [r7, #2]
 8001458:	400b      	ands	r3, r1
 800145a:	431a      	orrs	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	619a      	str	r2, [r3, #24]
}
 8001460:	bf00      	nop
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001472:	af00      	add	r7, sp, #0
 8001474:	1d3b      	adds	r3, r7, #4
 8001476:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001478:	1d3b      	adds	r3, r7, #4
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d102      	bne.n	8001486 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	f000 bef4 	b.w	800226e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001486:	1d3b      	adds	r3, r7, #4
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0301 	and.w	r3, r3, #1
 8001490:	2b00      	cmp	r3, #0
 8001492:	f000 816a 	beq.w	800176a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001496:	4bb3      	ldr	r3, [pc, #716]	; (8001764 <HAL_RCC_OscConfig+0x2f8>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f003 030c 	and.w	r3, r3, #12
 800149e:	2b04      	cmp	r3, #4
 80014a0:	d00c      	beq.n	80014bc <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014a2:	4bb0      	ldr	r3, [pc, #704]	; (8001764 <HAL_RCC_OscConfig+0x2f8>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f003 030c 	and.w	r3, r3, #12
 80014aa:	2b08      	cmp	r3, #8
 80014ac:	d159      	bne.n	8001562 <HAL_RCC_OscConfig+0xf6>
 80014ae:	4bad      	ldr	r3, [pc, #692]	; (8001764 <HAL_RCC_OscConfig+0x2f8>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014ba:	d152      	bne.n	8001562 <HAL_RCC_OscConfig+0xf6>
 80014bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014c0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80014c8:	fa93 f3a3 	rbit	r3, r3
 80014cc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80014d0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d4:	fab3 f383 	clz	r3, r3
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	095b      	lsrs	r3, r3, #5
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	f043 0301 	orr.w	r3, r3, #1
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d102      	bne.n	80014ee <HAL_RCC_OscConfig+0x82>
 80014e8:	4b9e      	ldr	r3, [pc, #632]	; (8001764 <HAL_RCC_OscConfig+0x2f8>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	e015      	b.n	800151a <HAL_RCC_OscConfig+0xae>
 80014ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014f2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80014fa:	fa93 f3a3 	rbit	r3, r3
 80014fe:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001502:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001506:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800150a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800150e:	fa93 f3a3 	rbit	r3, r3
 8001512:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001516:	4b93      	ldr	r3, [pc, #588]	; (8001764 <HAL_RCC_OscConfig+0x2f8>)
 8001518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800151e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001522:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001526:	fa92 f2a2 	rbit	r2, r2
 800152a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800152e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001532:	fab2 f282 	clz	r2, r2
 8001536:	b2d2      	uxtb	r2, r2
 8001538:	f042 0220 	orr.w	r2, r2, #32
 800153c:	b2d2      	uxtb	r2, r2
 800153e:	f002 021f 	and.w	r2, r2, #31
 8001542:	2101      	movs	r1, #1
 8001544:	fa01 f202 	lsl.w	r2, r1, r2
 8001548:	4013      	ands	r3, r2
 800154a:	2b00      	cmp	r3, #0
 800154c:	f000 810c 	beq.w	8001768 <HAL_RCC_OscConfig+0x2fc>
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	f040 8106 	bne.w	8001768 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	f000 be86 	b.w	800226e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001562:	1d3b      	adds	r3, r7, #4
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800156c:	d106      	bne.n	800157c <HAL_RCC_OscConfig+0x110>
 800156e:	4b7d      	ldr	r3, [pc, #500]	; (8001764 <HAL_RCC_OscConfig+0x2f8>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a7c      	ldr	r2, [pc, #496]	; (8001764 <HAL_RCC_OscConfig+0x2f8>)
 8001574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001578:	6013      	str	r3, [r2, #0]
 800157a:	e030      	b.n	80015de <HAL_RCC_OscConfig+0x172>
 800157c:	1d3b      	adds	r3, r7, #4
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d10c      	bne.n	80015a0 <HAL_RCC_OscConfig+0x134>
 8001586:	4b77      	ldr	r3, [pc, #476]	; (8001764 <HAL_RCC_OscConfig+0x2f8>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a76      	ldr	r2, [pc, #472]	; (8001764 <HAL_RCC_OscConfig+0x2f8>)
 800158c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001590:	6013      	str	r3, [r2, #0]
 8001592:	4b74      	ldr	r3, [pc, #464]	; (8001764 <HAL_RCC_OscConfig+0x2f8>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a73      	ldr	r2, [pc, #460]	; (8001764 <HAL_RCC_OscConfig+0x2f8>)
 8001598:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800159c:	6013      	str	r3, [r2, #0]
 800159e:	e01e      	b.n	80015de <HAL_RCC_OscConfig+0x172>
 80015a0:	1d3b      	adds	r3, r7, #4
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015aa:	d10c      	bne.n	80015c6 <HAL_RCC_OscConfig+0x15a>
 80015ac:	4b6d      	ldr	r3, [pc, #436]	; (8001764 <HAL_RCC_OscConfig+0x2f8>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a6c      	ldr	r2, [pc, #432]	; (8001764 <HAL_RCC_OscConfig+0x2f8>)
 80015b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015b6:	6013      	str	r3, [r2, #0]
 80015b8:	4b6a      	ldr	r3, [pc, #424]	; (8001764 <HAL_RCC_OscConfig+0x2f8>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a69      	ldr	r2, [pc, #420]	; (8001764 <HAL_RCC_OscConfig+0x2f8>)
 80015be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015c2:	6013      	str	r3, [r2, #0]
 80015c4:	e00b      	b.n	80015de <HAL_RCC_OscConfig+0x172>
 80015c6:	4b67      	ldr	r3, [pc, #412]	; (8001764 <HAL_RCC_OscConfig+0x2f8>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a66      	ldr	r2, [pc, #408]	; (8001764 <HAL_RCC_OscConfig+0x2f8>)
 80015cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015d0:	6013      	str	r3, [r2, #0]
 80015d2:	4b64      	ldr	r3, [pc, #400]	; (8001764 <HAL_RCC_OscConfig+0x2f8>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a63      	ldr	r2, [pc, #396]	; (8001764 <HAL_RCC_OscConfig+0x2f8>)
 80015d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015dc:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015de:	4b61      	ldr	r3, [pc, #388]	; (8001764 <HAL_RCC_OscConfig+0x2f8>)
 80015e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e2:	f023 020f 	bic.w	r2, r3, #15
 80015e6:	1d3b      	adds	r3, r7, #4
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	495d      	ldr	r1, [pc, #372]	; (8001764 <HAL_RCC_OscConfig+0x2f8>)
 80015ee:	4313      	orrs	r3, r2
 80015f0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015f2:	1d3b      	adds	r3, r7, #4
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d059      	beq.n	80016b0 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fc:	f7ff fc7c 	bl	8000ef8 <HAL_GetTick>
 8001600:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001604:	e00a      	b.n	800161c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001606:	f7ff fc77 	bl	8000ef8 <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b64      	cmp	r3, #100	; 0x64
 8001614:	d902      	bls.n	800161c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	f000 be29 	b.w	800226e <HAL_RCC_OscConfig+0xe02>
 800161c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001620:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001624:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001628:	fa93 f3a3 	rbit	r3, r3
 800162c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001630:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001634:	fab3 f383 	clz	r3, r3
 8001638:	b2db      	uxtb	r3, r3
 800163a:	095b      	lsrs	r3, r3, #5
 800163c:	b2db      	uxtb	r3, r3
 800163e:	f043 0301 	orr.w	r3, r3, #1
 8001642:	b2db      	uxtb	r3, r3
 8001644:	2b01      	cmp	r3, #1
 8001646:	d102      	bne.n	800164e <HAL_RCC_OscConfig+0x1e2>
 8001648:	4b46      	ldr	r3, [pc, #280]	; (8001764 <HAL_RCC_OscConfig+0x2f8>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	e015      	b.n	800167a <HAL_RCC_OscConfig+0x20e>
 800164e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001652:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001656:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800165a:	fa93 f3a3 	rbit	r3, r3
 800165e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001662:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001666:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800166a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800166e:	fa93 f3a3 	rbit	r3, r3
 8001672:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001676:	4b3b      	ldr	r3, [pc, #236]	; (8001764 <HAL_RCC_OscConfig+0x2f8>)
 8001678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800167e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001682:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001686:	fa92 f2a2 	rbit	r2, r2
 800168a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800168e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001692:	fab2 f282 	clz	r2, r2
 8001696:	b2d2      	uxtb	r2, r2
 8001698:	f042 0220 	orr.w	r2, r2, #32
 800169c:	b2d2      	uxtb	r2, r2
 800169e:	f002 021f 	and.w	r2, r2, #31
 80016a2:	2101      	movs	r1, #1
 80016a4:	fa01 f202 	lsl.w	r2, r1, r2
 80016a8:	4013      	ands	r3, r2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d0ab      	beq.n	8001606 <HAL_RCC_OscConfig+0x19a>
 80016ae:	e05c      	b.n	800176a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b0:	f7ff fc22 	bl	8000ef8 <HAL_GetTick>
 80016b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016b8:	e00a      	b.n	80016d0 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016ba:	f7ff fc1d 	bl	8000ef8 <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b64      	cmp	r3, #100	; 0x64
 80016c8:	d902      	bls.n	80016d0 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	f000 bdcf 	b.w	800226e <HAL_RCC_OscConfig+0xe02>
 80016d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016d4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80016dc:	fa93 f3a3 	rbit	r3, r3
 80016e0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80016e4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016e8:	fab3 f383 	clz	r3, r3
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	095b      	lsrs	r3, r3, #5
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d102      	bne.n	8001702 <HAL_RCC_OscConfig+0x296>
 80016fc:	4b19      	ldr	r3, [pc, #100]	; (8001764 <HAL_RCC_OscConfig+0x2f8>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	e015      	b.n	800172e <HAL_RCC_OscConfig+0x2c2>
 8001702:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001706:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800170e:	fa93 f3a3 	rbit	r3, r3
 8001712:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001716:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800171a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800171e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001722:	fa93 f3a3 	rbit	r3, r3
 8001726:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800172a:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <HAL_RCC_OscConfig+0x2f8>)
 800172c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001732:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001736:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800173a:	fa92 f2a2 	rbit	r2, r2
 800173e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001742:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001746:	fab2 f282 	clz	r2, r2
 800174a:	b2d2      	uxtb	r2, r2
 800174c:	f042 0220 	orr.w	r2, r2, #32
 8001750:	b2d2      	uxtb	r2, r2
 8001752:	f002 021f 	and.w	r2, r2, #31
 8001756:	2101      	movs	r1, #1
 8001758:	fa01 f202 	lsl.w	r2, r1, r2
 800175c:	4013      	ands	r3, r2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1ab      	bne.n	80016ba <HAL_RCC_OscConfig+0x24e>
 8001762:	e002      	b.n	800176a <HAL_RCC_OscConfig+0x2fe>
 8001764:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001768:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800176a:	1d3b      	adds	r3, r7, #4
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	f000 816f 	beq.w	8001a58 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800177a:	4bd0      	ldr	r3, [pc, #832]	; (8001abc <HAL_RCC_OscConfig+0x650>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f003 030c 	and.w	r3, r3, #12
 8001782:	2b00      	cmp	r3, #0
 8001784:	d00b      	beq.n	800179e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001786:	4bcd      	ldr	r3, [pc, #820]	; (8001abc <HAL_RCC_OscConfig+0x650>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f003 030c 	and.w	r3, r3, #12
 800178e:	2b08      	cmp	r3, #8
 8001790:	d16c      	bne.n	800186c <HAL_RCC_OscConfig+0x400>
 8001792:	4bca      	ldr	r3, [pc, #808]	; (8001abc <HAL_RCC_OscConfig+0x650>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d166      	bne.n	800186c <HAL_RCC_OscConfig+0x400>
 800179e:	2302      	movs	r3, #2
 80017a0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80017a8:	fa93 f3a3 	rbit	r3, r3
 80017ac:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80017b0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017b4:	fab3 f383 	clz	r3, r3
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	095b      	lsrs	r3, r3, #5
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	f043 0301 	orr.w	r3, r3, #1
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d102      	bne.n	80017ce <HAL_RCC_OscConfig+0x362>
 80017c8:	4bbc      	ldr	r3, [pc, #752]	; (8001abc <HAL_RCC_OscConfig+0x650>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	e013      	b.n	80017f6 <HAL_RCC_OscConfig+0x38a>
 80017ce:	2302      	movs	r3, #2
 80017d0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80017d8:	fa93 f3a3 	rbit	r3, r3
 80017dc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80017e0:	2302      	movs	r3, #2
 80017e2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80017e6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80017ea:	fa93 f3a3 	rbit	r3, r3
 80017ee:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80017f2:	4bb2      	ldr	r3, [pc, #712]	; (8001abc <HAL_RCC_OscConfig+0x650>)
 80017f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f6:	2202      	movs	r2, #2
 80017f8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80017fc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001800:	fa92 f2a2 	rbit	r2, r2
 8001804:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001808:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800180c:	fab2 f282 	clz	r2, r2
 8001810:	b2d2      	uxtb	r2, r2
 8001812:	f042 0220 	orr.w	r2, r2, #32
 8001816:	b2d2      	uxtb	r2, r2
 8001818:	f002 021f 	and.w	r2, r2, #31
 800181c:	2101      	movs	r1, #1
 800181e:	fa01 f202 	lsl.w	r2, r1, r2
 8001822:	4013      	ands	r3, r2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d007      	beq.n	8001838 <HAL_RCC_OscConfig+0x3cc>
 8001828:	1d3b      	adds	r3, r7, #4
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d002      	beq.n	8001838 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	f000 bd1b 	b.w	800226e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001838:	4ba0      	ldr	r3, [pc, #640]	; (8001abc <HAL_RCC_OscConfig+0x650>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001840:	1d3b      	adds	r3, r7, #4
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	695b      	ldr	r3, [r3, #20]
 8001846:	21f8      	movs	r1, #248	; 0xf8
 8001848:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001850:	fa91 f1a1 	rbit	r1, r1
 8001854:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001858:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800185c:	fab1 f181 	clz	r1, r1
 8001860:	b2c9      	uxtb	r1, r1
 8001862:	408b      	lsls	r3, r1
 8001864:	4995      	ldr	r1, [pc, #596]	; (8001abc <HAL_RCC_OscConfig+0x650>)
 8001866:	4313      	orrs	r3, r2
 8001868:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800186a:	e0f5      	b.n	8001a58 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800186c:	1d3b      	adds	r3, r7, #4
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	691b      	ldr	r3, [r3, #16]
 8001872:	2b00      	cmp	r3, #0
 8001874:	f000 8085 	beq.w	8001982 <HAL_RCC_OscConfig+0x516>
 8001878:	2301      	movs	r3, #1
 800187a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001882:	fa93 f3a3 	rbit	r3, r3
 8001886:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800188a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800188e:	fab3 f383 	clz	r3, r3
 8001892:	b2db      	uxtb	r3, r3
 8001894:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001898:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	461a      	mov	r2, r3
 80018a0:	2301      	movs	r3, #1
 80018a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a4:	f7ff fb28 	bl	8000ef8 <HAL_GetTick>
 80018a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ac:	e00a      	b.n	80018c4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018ae:	f7ff fb23 	bl	8000ef8 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d902      	bls.n	80018c4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	f000 bcd5 	b.w	800226e <HAL_RCC_OscConfig+0xe02>
 80018c4:	2302      	movs	r3, #2
 80018c6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ca:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80018ce:	fa93 f3a3 	rbit	r3, r3
 80018d2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80018d6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018da:	fab3 f383 	clz	r3, r3
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	095b      	lsrs	r3, r3, #5
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d102      	bne.n	80018f4 <HAL_RCC_OscConfig+0x488>
 80018ee:	4b73      	ldr	r3, [pc, #460]	; (8001abc <HAL_RCC_OscConfig+0x650>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	e013      	b.n	800191c <HAL_RCC_OscConfig+0x4b0>
 80018f4:	2302      	movs	r3, #2
 80018f6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fa:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80018fe:	fa93 f3a3 	rbit	r3, r3
 8001902:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001906:	2302      	movs	r3, #2
 8001908:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800190c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001910:	fa93 f3a3 	rbit	r3, r3
 8001914:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001918:	4b68      	ldr	r3, [pc, #416]	; (8001abc <HAL_RCC_OscConfig+0x650>)
 800191a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191c:	2202      	movs	r2, #2
 800191e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001922:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001926:	fa92 f2a2 	rbit	r2, r2
 800192a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800192e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001932:	fab2 f282 	clz	r2, r2
 8001936:	b2d2      	uxtb	r2, r2
 8001938:	f042 0220 	orr.w	r2, r2, #32
 800193c:	b2d2      	uxtb	r2, r2
 800193e:	f002 021f 	and.w	r2, r2, #31
 8001942:	2101      	movs	r1, #1
 8001944:	fa01 f202 	lsl.w	r2, r1, r2
 8001948:	4013      	ands	r3, r2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d0af      	beq.n	80018ae <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800194e:	4b5b      	ldr	r3, [pc, #364]	; (8001abc <HAL_RCC_OscConfig+0x650>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001956:	1d3b      	adds	r3, r7, #4
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	695b      	ldr	r3, [r3, #20]
 800195c:	21f8      	movs	r1, #248	; 0xf8
 800195e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001962:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001966:	fa91 f1a1 	rbit	r1, r1
 800196a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800196e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001972:	fab1 f181 	clz	r1, r1
 8001976:	b2c9      	uxtb	r1, r1
 8001978:	408b      	lsls	r3, r1
 800197a:	4950      	ldr	r1, [pc, #320]	; (8001abc <HAL_RCC_OscConfig+0x650>)
 800197c:	4313      	orrs	r3, r2
 800197e:	600b      	str	r3, [r1, #0]
 8001980:	e06a      	b.n	8001a58 <HAL_RCC_OscConfig+0x5ec>
 8001982:	2301      	movs	r3, #1
 8001984:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001988:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800198c:	fa93 f3a3 	rbit	r3, r3
 8001990:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001994:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001998:	fab3 f383 	clz	r3, r3
 800199c:	b2db      	uxtb	r3, r3
 800199e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019a2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	461a      	mov	r2, r3
 80019aa:	2300      	movs	r3, #0
 80019ac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ae:	f7ff faa3 	bl	8000ef8 <HAL_GetTick>
 80019b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019b6:	e00a      	b.n	80019ce <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019b8:	f7ff fa9e 	bl	8000ef8 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d902      	bls.n	80019ce <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	f000 bc50 	b.w	800226e <HAL_RCC_OscConfig+0xe02>
 80019ce:	2302      	movs	r3, #2
 80019d0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80019d8:	fa93 f3a3 	rbit	r3, r3
 80019dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80019e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019e4:	fab3 f383 	clz	r3, r3
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	095b      	lsrs	r3, r3, #5
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	f043 0301 	orr.w	r3, r3, #1
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d102      	bne.n	80019fe <HAL_RCC_OscConfig+0x592>
 80019f8:	4b30      	ldr	r3, [pc, #192]	; (8001abc <HAL_RCC_OscConfig+0x650>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	e013      	b.n	8001a26 <HAL_RCC_OscConfig+0x5ba>
 80019fe:	2302      	movs	r3, #2
 8001a00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a04:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001a08:	fa93 f3a3 	rbit	r3, r3
 8001a0c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001a10:	2302      	movs	r3, #2
 8001a12:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001a16:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001a1a:	fa93 f3a3 	rbit	r3, r3
 8001a1e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001a22:	4b26      	ldr	r3, [pc, #152]	; (8001abc <HAL_RCC_OscConfig+0x650>)
 8001a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a26:	2202      	movs	r2, #2
 8001a28:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001a2c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001a30:	fa92 f2a2 	rbit	r2, r2
 8001a34:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001a38:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001a3c:	fab2 f282 	clz	r2, r2
 8001a40:	b2d2      	uxtb	r2, r2
 8001a42:	f042 0220 	orr.w	r2, r2, #32
 8001a46:	b2d2      	uxtb	r2, r2
 8001a48:	f002 021f 	and.w	r2, r2, #31
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a52:	4013      	ands	r3, r2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d1af      	bne.n	80019b8 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a58:	1d3b      	adds	r3, r7, #4
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0308 	and.w	r3, r3, #8
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f000 80da 	beq.w	8001c1c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a68:	1d3b      	adds	r3, r7, #4
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d069      	beq.n	8001b46 <HAL_RCC_OscConfig+0x6da>
 8001a72:	2301      	movs	r3, #1
 8001a74:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a78:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001a7c:	fa93 f3a3 	rbit	r3, r3
 8001a80:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001a84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a88:	fab3 f383 	clz	r3, r3
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	461a      	mov	r2, r3
 8001a90:	4b0b      	ldr	r3, [pc, #44]	; (8001ac0 <HAL_RCC_OscConfig+0x654>)
 8001a92:	4413      	add	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	461a      	mov	r2, r3
 8001a98:	2301      	movs	r3, #1
 8001a9a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a9c:	f7ff fa2c 	bl	8000ef8 <HAL_GetTick>
 8001aa0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aa4:	e00e      	b.n	8001ac4 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aa6:	f7ff fa27 	bl	8000ef8 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d906      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e3d9      	b.n	800226e <HAL_RCC_OscConfig+0xe02>
 8001aba:	bf00      	nop
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	10908120 	.word	0x10908120
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001ace:	fa93 f3a3 	rbit	r3, r3
 8001ad2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001ad6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001ada:	2202      	movs	r2, #2
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	fa93 f2a3 	rbit	r2, r3
 8001ae8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001af2:	2202      	movs	r2, #2
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	fa93 f2a3 	rbit	r2, r3
 8001b00:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001b04:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b06:	4ba5      	ldr	r3, [pc, #660]	; (8001d9c <HAL_RCC_OscConfig+0x930>)
 8001b08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b0a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001b0e:	2102      	movs	r1, #2
 8001b10:	6019      	str	r1, [r3, #0]
 8001b12:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	fa93 f1a3 	rbit	r1, r3
 8001b1c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001b20:	6019      	str	r1, [r3, #0]
  return result;
 8001b22:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	fab3 f383 	clz	r3, r3
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	f003 031f 	and.w	r3, r3, #31
 8001b38:	2101      	movs	r1, #1
 8001b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3e:	4013      	ands	r3, r2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d0b0      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x63a>
 8001b44:	e06a      	b.n	8001c1c <HAL_RCC_OscConfig+0x7b0>
 8001b46:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	fa93 f2a3 	rbit	r2, r3
 8001b58:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001b5c:	601a      	str	r2, [r3, #0]
  return result;
 8001b5e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001b62:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b64:	fab3 f383 	clz	r3, r3
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	4b8c      	ldr	r3, [pc, #560]	; (8001da0 <HAL_RCC_OscConfig+0x934>)
 8001b6e:	4413      	add	r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	461a      	mov	r2, r3
 8001b74:	2300      	movs	r3, #0
 8001b76:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b78:	f7ff f9be 	bl	8000ef8 <HAL_GetTick>
 8001b7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b80:	e009      	b.n	8001b96 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b82:	f7ff f9b9 	bl	8000ef8 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e36b      	b.n	800226e <HAL_RCC_OscConfig+0xe02>
 8001b96:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001b9a:	2202      	movs	r2, #2
 8001b9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	fa93 f2a3 	rbit	r2, r3
 8001ba8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001bb2:	2202      	movs	r2, #2
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	fa93 f2a3 	rbit	r2, r3
 8001bc0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001bca:	2202      	movs	r2, #2
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	fa93 f2a3 	rbit	r2, r3
 8001bd8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001bdc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bde:	4b6f      	ldr	r3, [pc, #444]	; (8001d9c <HAL_RCC_OscConfig+0x930>)
 8001be0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001be2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001be6:	2102      	movs	r1, #2
 8001be8:	6019      	str	r1, [r3, #0]
 8001bea:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	fa93 f1a3 	rbit	r1, r3
 8001bf4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001bf8:	6019      	str	r1, [r3, #0]
  return result;
 8001bfa:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	fab3 f383 	clz	r3, r3
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	f003 031f 	and.w	r3, r3, #31
 8001c10:	2101      	movs	r1, #1
 8001c12:	fa01 f303 	lsl.w	r3, r1, r3
 8001c16:	4013      	ands	r3, r2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1b2      	bne.n	8001b82 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c1c:	1d3b      	adds	r3, r7, #4
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0304 	and.w	r3, r3, #4
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f000 8158 	beq.w	8001edc <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c32:	4b5a      	ldr	r3, [pc, #360]	; (8001d9c <HAL_RCC_OscConfig+0x930>)
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d112      	bne.n	8001c64 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c3e:	4b57      	ldr	r3, [pc, #348]	; (8001d9c <HAL_RCC_OscConfig+0x930>)
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	4a56      	ldr	r2, [pc, #344]	; (8001d9c <HAL_RCC_OscConfig+0x930>)
 8001c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c48:	61d3      	str	r3, [r2, #28]
 8001c4a:	4b54      	ldr	r3, [pc, #336]	; (8001d9c <HAL_RCC_OscConfig+0x930>)
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001c52:	f107 0308 	add.w	r3, r7, #8
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	f107 0308 	add.w	r3, r7, #8
 8001c5c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c64:	4b4f      	ldr	r3, [pc, #316]	; (8001da4 <HAL_RCC_OscConfig+0x938>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d11a      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c70:	4b4c      	ldr	r3, [pc, #304]	; (8001da4 <HAL_RCC_OscConfig+0x938>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a4b      	ldr	r2, [pc, #300]	; (8001da4 <HAL_RCC_OscConfig+0x938>)
 8001c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c7a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c7c:	f7ff f93c 	bl	8000ef8 <HAL_GetTick>
 8001c80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c84:	e009      	b.n	8001c9a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c86:	f7ff f937 	bl	8000ef8 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b64      	cmp	r3, #100	; 0x64
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e2e9      	b.n	800226e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c9a:	4b42      	ldr	r3, [pc, #264]	; (8001da4 <HAL_RCC_OscConfig+0x938>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d0ef      	beq.n	8001c86 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ca6:	1d3b      	adds	r3, r7, #4
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d106      	bne.n	8001cbe <HAL_RCC_OscConfig+0x852>
 8001cb0:	4b3a      	ldr	r3, [pc, #232]	; (8001d9c <HAL_RCC_OscConfig+0x930>)
 8001cb2:	6a1b      	ldr	r3, [r3, #32]
 8001cb4:	4a39      	ldr	r2, [pc, #228]	; (8001d9c <HAL_RCC_OscConfig+0x930>)
 8001cb6:	f043 0301 	orr.w	r3, r3, #1
 8001cba:	6213      	str	r3, [r2, #32]
 8001cbc:	e02f      	b.n	8001d1e <HAL_RCC_OscConfig+0x8b2>
 8001cbe:	1d3b      	adds	r3, r7, #4
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d10c      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x876>
 8001cc8:	4b34      	ldr	r3, [pc, #208]	; (8001d9c <HAL_RCC_OscConfig+0x930>)
 8001cca:	6a1b      	ldr	r3, [r3, #32]
 8001ccc:	4a33      	ldr	r2, [pc, #204]	; (8001d9c <HAL_RCC_OscConfig+0x930>)
 8001cce:	f023 0301 	bic.w	r3, r3, #1
 8001cd2:	6213      	str	r3, [r2, #32]
 8001cd4:	4b31      	ldr	r3, [pc, #196]	; (8001d9c <HAL_RCC_OscConfig+0x930>)
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	4a30      	ldr	r2, [pc, #192]	; (8001d9c <HAL_RCC_OscConfig+0x930>)
 8001cda:	f023 0304 	bic.w	r3, r3, #4
 8001cde:	6213      	str	r3, [r2, #32]
 8001ce0:	e01d      	b.n	8001d1e <HAL_RCC_OscConfig+0x8b2>
 8001ce2:	1d3b      	adds	r3, r7, #4
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	2b05      	cmp	r3, #5
 8001cea:	d10c      	bne.n	8001d06 <HAL_RCC_OscConfig+0x89a>
 8001cec:	4b2b      	ldr	r3, [pc, #172]	; (8001d9c <HAL_RCC_OscConfig+0x930>)
 8001cee:	6a1b      	ldr	r3, [r3, #32]
 8001cf0:	4a2a      	ldr	r2, [pc, #168]	; (8001d9c <HAL_RCC_OscConfig+0x930>)
 8001cf2:	f043 0304 	orr.w	r3, r3, #4
 8001cf6:	6213      	str	r3, [r2, #32]
 8001cf8:	4b28      	ldr	r3, [pc, #160]	; (8001d9c <HAL_RCC_OscConfig+0x930>)
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	4a27      	ldr	r2, [pc, #156]	; (8001d9c <HAL_RCC_OscConfig+0x930>)
 8001cfe:	f043 0301 	orr.w	r3, r3, #1
 8001d02:	6213      	str	r3, [r2, #32]
 8001d04:	e00b      	b.n	8001d1e <HAL_RCC_OscConfig+0x8b2>
 8001d06:	4b25      	ldr	r3, [pc, #148]	; (8001d9c <HAL_RCC_OscConfig+0x930>)
 8001d08:	6a1b      	ldr	r3, [r3, #32]
 8001d0a:	4a24      	ldr	r2, [pc, #144]	; (8001d9c <HAL_RCC_OscConfig+0x930>)
 8001d0c:	f023 0301 	bic.w	r3, r3, #1
 8001d10:	6213      	str	r3, [r2, #32]
 8001d12:	4b22      	ldr	r3, [pc, #136]	; (8001d9c <HAL_RCC_OscConfig+0x930>)
 8001d14:	6a1b      	ldr	r3, [r3, #32]
 8001d16:	4a21      	ldr	r2, [pc, #132]	; (8001d9c <HAL_RCC_OscConfig+0x930>)
 8001d18:	f023 0304 	bic.w	r3, r3, #4
 8001d1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d1e:	1d3b      	adds	r3, r7, #4
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d06b      	beq.n	8001e00 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d28:	f7ff f8e6 	bl	8000ef8 <HAL_GetTick>
 8001d2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d30:	e00b      	b.n	8001d4a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d32:	f7ff f8e1 	bl	8000ef8 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e291      	b.n	800226e <HAL_RCC_OscConfig+0xe02>
 8001d4a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001d4e:	2202      	movs	r2, #2
 8001d50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d52:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	fa93 f2a3 	rbit	r2, r3
 8001d5c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001d66:	2202      	movs	r2, #2
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	fa93 f2a3 	rbit	r2, r3
 8001d74:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001d78:	601a      	str	r2, [r3, #0]
  return result;
 8001d7a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001d7e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d80:	fab3 f383 	clz	r3, r3
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	095b      	lsrs	r3, r3, #5
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	f043 0302 	orr.w	r3, r3, #2
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d109      	bne.n	8001da8 <HAL_RCC_OscConfig+0x93c>
 8001d94:	4b01      	ldr	r3, [pc, #4]	; (8001d9c <HAL_RCC_OscConfig+0x930>)
 8001d96:	6a1b      	ldr	r3, [r3, #32]
 8001d98:	e014      	b.n	8001dc4 <HAL_RCC_OscConfig+0x958>
 8001d9a:	bf00      	nop
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	10908120 	.word	0x10908120
 8001da4:	40007000 	.word	0x40007000
 8001da8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001dac:	2202      	movs	r2, #2
 8001dae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	fa93 f2a3 	rbit	r2, r3
 8001dba:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	4bbb      	ldr	r3, [pc, #748]	; (80020b0 <HAL_RCC_OscConfig+0xc44>)
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001dc8:	2102      	movs	r1, #2
 8001dca:	6011      	str	r1, [r2, #0]
 8001dcc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001dd0:	6812      	ldr	r2, [r2, #0]
 8001dd2:	fa92 f1a2 	rbit	r1, r2
 8001dd6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001dda:	6011      	str	r1, [r2, #0]
  return result;
 8001ddc:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001de0:	6812      	ldr	r2, [r2, #0]
 8001de2:	fab2 f282 	clz	r2, r2
 8001de6:	b2d2      	uxtb	r2, r2
 8001de8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dec:	b2d2      	uxtb	r2, r2
 8001dee:	f002 021f 	and.w	r2, r2, #31
 8001df2:	2101      	movs	r1, #1
 8001df4:	fa01 f202 	lsl.w	r2, r1, r2
 8001df8:	4013      	ands	r3, r2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d099      	beq.n	8001d32 <HAL_RCC_OscConfig+0x8c6>
 8001dfe:	e063      	b.n	8001ec8 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e00:	f7ff f87a 	bl	8000ef8 <HAL_GetTick>
 8001e04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e08:	e00b      	b.n	8001e22 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e0a:	f7ff f875 	bl	8000ef8 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e225      	b.n	800226e <HAL_RCC_OscConfig+0xe02>
 8001e22:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001e26:	2202      	movs	r2, #2
 8001e28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	fa93 f2a3 	rbit	r2, r3
 8001e34:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001e3e:	2202      	movs	r2, #2
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	fa93 f2a3 	rbit	r2, r3
 8001e4c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001e50:	601a      	str	r2, [r3, #0]
  return result;
 8001e52:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001e56:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e58:	fab3 f383 	clz	r3, r3
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	095b      	lsrs	r3, r3, #5
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	f043 0302 	orr.w	r3, r3, #2
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d102      	bne.n	8001e72 <HAL_RCC_OscConfig+0xa06>
 8001e6c:	4b90      	ldr	r3, [pc, #576]	; (80020b0 <HAL_RCC_OscConfig+0xc44>)
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	e00d      	b.n	8001e8e <HAL_RCC_OscConfig+0xa22>
 8001e72:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001e76:	2202      	movs	r2, #2
 8001e78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	fa93 f2a3 	rbit	r2, r3
 8001e84:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	4b89      	ldr	r3, [pc, #548]	; (80020b0 <HAL_RCC_OscConfig+0xc44>)
 8001e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001e92:	2102      	movs	r1, #2
 8001e94:	6011      	str	r1, [r2, #0]
 8001e96:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001e9a:	6812      	ldr	r2, [r2, #0]
 8001e9c:	fa92 f1a2 	rbit	r1, r2
 8001ea0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001ea4:	6011      	str	r1, [r2, #0]
  return result;
 8001ea6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001eaa:	6812      	ldr	r2, [r2, #0]
 8001eac:	fab2 f282 	clz	r2, r2
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	f002 021f 	and.w	r2, r2, #31
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	fa01 f202 	lsl.w	r2, r1, r2
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d1a0      	bne.n	8001e0a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ec8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d105      	bne.n	8001edc <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ed0:	4b77      	ldr	r3, [pc, #476]	; (80020b0 <HAL_RCC_OscConfig+0xc44>)
 8001ed2:	69db      	ldr	r3, [r3, #28]
 8001ed4:	4a76      	ldr	r2, [pc, #472]	; (80020b0 <HAL_RCC_OscConfig+0xc44>)
 8001ed6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eda:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001edc:	1d3b      	adds	r3, r7, #4
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f000 81c2 	beq.w	800226c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ee8:	4b71      	ldr	r3, [pc, #452]	; (80020b0 <HAL_RCC_OscConfig+0xc44>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f003 030c 	and.w	r3, r3, #12
 8001ef0:	2b08      	cmp	r3, #8
 8001ef2:	f000 819c 	beq.w	800222e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ef6:	1d3b      	adds	r3, r7, #4
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	69db      	ldr	r3, [r3, #28]
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	f040 8114 	bne.w	800212a <HAL_RCC_OscConfig+0xcbe>
 8001f02:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001f06:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	fa93 f2a3 	rbit	r2, r3
 8001f16:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001f1a:	601a      	str	r2, [r3, #0]
  return result;
 8001f1c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001f20:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f22:	fab3 f383 	clz	r3, r3
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f2c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	461a      	mov	r2, r3
 8001f34:	2300      	movs	r3, #0
 8001f36:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f38:	f7fe ffde 	bl	8000ef8 <HAL_GetTick>
 8001f3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f40:	e009      	b.n	8001f56 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f42:	f7fe ffd9 	bl	8000ef8 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e18b      	b.n	800226e <HAL_RCC_OscConfig+0xe02>
 8001f56:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001f5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f60:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	fa93 f2a3 	rbit	r2, r3
 8001f6a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001f6e:	601a      	str	r2, [r3, #0]
  return result;
 8001f70:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001f74:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f76:	fab3 f383 	clz	r3, r3
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	095b      	lsrs	r3, r3, #5
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d102      	bne.n	8001f90 <HAL_RCC_OscConfig+0xb24>
 8001f8a:	4b49      	ldr	r3, [pc, #292]	; (80020b0 <HAL_RCC_OscConfig+0xc44>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	e01b      	b.n	8001fc8 <HAL_RCC_OscConfig+0xb5c>
 8001f90:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001f94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	fa93 f2a3 	rbit	r2, r3
 8001fa4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001fae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	fa93 f2a3 	rbit	r2, r3
 8001fbe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	4b3a      	ldr	r3, [pc, #232]	; (80020b0 <HAL_RCC_OscConfig+0xc44>)
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001fcc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001fd0:	6011      	str	r1, [r2, #0]
 8001fd2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001fd6:	6812      	ldr	r2, [r2, #0]
 8001fd8:	fa92 f1a2 	rbit	r1, r2
 8001fdc:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001fe0:	6011      	str	r1, [r2, #0]
  return result;
 8001fe2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001fe6:	6812      	ldr	r2, [r2, #0]
 8001fe8:	fab2 f282 	clz	r2, r2
 8001fec:	b2d2      	uxtb	r2, r2
 8001fee:	f042 0220 	orr.w	r2, r2, #32
 8001ff2:	b2d2      	uxtb	r2, r2
 8001ff4:	f002 021f 	and.w	r2, r2, #31
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	fa01 f202 	lsl.w	r2, r1, r2
 8001ffe:	4013      	ands	r3, r2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d19e      	bne.n	8001f42 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002004:	4b2a      	ldr	r3, [pc, #168]	; (80020b0 <HAL_RCC_OscConfig+0xc44>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800200c:	1d3b      	adds	r3, r7, #4
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002012:	1d3b      	adds	r3, r7, #4
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	430b      	orrs	r3, r1
 800201a:	4925      	ldr	r1, [pc, #148]	; (80020b0 <HAL_RCC_OscConfig+0xc44>)
 800201c:	4313      	orrs	r3, r2
 800201e:	604b      	str	r3, [r1, #4]
 8002020:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002024:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002028:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	fa93 f2a3 	rbit	r2, r3
 8002034:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002038:	601a      	str	r2, [r3, #0]
  return result;
 800203a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800203e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002040:	fab3 f383 	clz	r3, r3
 8002044:	b2db      	uxtb	r3, r3
 8002046:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800204a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	461a      	mov	r2, r3
 8002052:	2301      	movs	r3, #1
 8002054:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002056:	f7fe ff4f 	bl	8000ef8 <HAL_GetTick>
 800205a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800205e:	e009      	b.n	8002074 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002060:	f7fe ff4a 	bl	8000ef8 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e0fc      	b.n	800226e <HAL_RCC_OscConfig+0xe02>
 8002074:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002078:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800207c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	fa93 f2a3 	rbit	r2, r3
 8002088:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800208c:	601a      	str	r2, [r3, #0]
  return result;
 800208e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002092:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002094:	fab3 f383 	clz	r3, r3
 8002098:	b2db      	uxtb	r3, r3
 800209a:	095b      	lsrs	r3, r3, #5
 800209c:	b2db      	uxtb	r3, r3
 800209e:	f043 0301 	orr.w	r3, r3, #1
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d105      	bne.n	80020b4 <HAL_RCC_OscConfig+0xc48>
 80020a8:	4b01      	ldr	r3, [pc, #4]	; (80020b0 <HAL_RCC_OscConfig+0xc44>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	e01e      	b.n	80020ec <HAL_RCC_OscConfig+0xc80>
 80020ae:	bf00      	nop
 80020b0:	40021000 	.word	0x40021000
 80020b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80020b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	fa93 f2a3 	rbit	r2, r3
 80020c8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	fa93 f2a3 	rbit	r2, r3
 80020e2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	4b63      	ldr	r3, [pc, #396]	; (8002278 <HAL_RCC_OscConfig+0xe0c>)
 80020ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ec:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80020f0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80020f4:	6011      	str	r1, [r2, #0]
 80020f6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80020fa:	6812      	ldr	r2, [r2, #0]
 80020fc:	fa92 f1a2 	rbit	r1, r2
 8002100:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002104:	6011      	str	r1, [r2, #0]
  return result;
 8002106:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800210a:	6812      	ldr	r2, [r2, #0]
 800210c:	fab2 f282 	clz	r2, r2
 8002110:	b2d2      	uxtb	r2, r2
 8002112:	f042 0220 	orr.w	r2, r2, #32
 8002116:	b2d2      	uxtb	r2, r2
 8002118:	f002 021f 	and.w	r2, r2, #31
 800211c:	2101      	movs	r1, #1
 800211e:	fa01 f202 	lsl.w	r2, r1, r2
 8002122:	4013      	ands	r3, r2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d09b      	beq.n	8002060 <HAL_RCC_OscConfig+0xbf4>
 8002128:	e0a0      	b.n	800226c <HAL_RCC_OscConfig+0xe00>
 800212a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800212e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002132:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002134:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	fa93 f2a3 	rbit	r2, r3
 800213e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002142:	601a      	str	r2, [r3, #0]
  return result;
 8002144:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002148:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800214a:	fab3 f383 	clz	r3, r3
 800214e:	b2db      	uxtb	r3, r3
 8002150:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002154:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	461a      	mov	r2, r3
 800215c:	2300      	movs	r3, #0
 800215e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002160:	f7fe feca 	bl	8000ef8 <HAL_GetTick>
 8002164:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002168:	e009      	b.n	800217e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800216a:	f7fe fec5 	bl	8000ef8 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e077      	b.n	800226e <HAL_RCC_OscConfig+0xe02>
 800217e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002182:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002186:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002188:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	fa93 f2a3 	rbit	r2, r3
 8002192:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002196:	601a      	str	r2, [r3, #0]
  return result;
 8002198:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800219c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800219e:	fab3 f383 	clz	r3, r3
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	095b      	lsrs	r3, r3, #5
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	f043 0301 	orr.w	r3, r3, #1
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d102      	bne.n	80021b8 <HAL_RCC_OscConfig+0xd4c>
 80021b2:	4b31      	ldr	r3, [pc, #196]	; (8002278 <HAL_RCC_OscConfig+0xe0c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	e01b      	b.n	80021f0 <HAL_RCC_OscConfig+0xd84>
 80021b8:	f107 0320 	add.w	r3, r7, #32
 80021bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c2:	f107 0320 	add.w	r3, r7, #32
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	fa93 f2a3 	rbit	r2, r3
 80021cc:	f107 031c 	add.w	r3, r7, #28
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	f107 0318 	add.w	r3, r7, #24
 80021d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	f107 0318 	add.w	r3, r7, #24
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	fa93 f2a3 	rbit	r2, r3
 80021e6:	f107 0314 	add.w	r3, r7, #20
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	4b22      	ldr	r3, [pc, #136]	; (8002278 <HAL_RCC_OscConfig+0xe0c>)
 80021ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f0:	f107 0210 	add.w	r2, r7, #16
 80021f4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80021f8:	6011      	str	r1, [r2, #0]
 80021fa:	f107 0210 	add.w	r2, r7, #16
 80021fe:	6812      	ldr	r2, [r2, #0]
 8002200:	fa92 f1a2 	rbit	r1, r2
 8002204:	f107 020c 	add.w	r2, r7, #12
 8002208:	6011      	str	r1, [r2, #0]
  return result;
 800220a:	f107 020c 	add.w	r2, r7, #12
 800220e:	6812      	ldr	r2, [r2, #0]
 8002210:	fab2 f282 	clz	r2, r2
 8002214:	b2d2      	uxtb	r2, r2
 8002216:	f042 0220 	orr.w	r2, r2, #32
 800221a:	b2d2      	uxtb	r2, r2
 800221c:	f002 021f 	and.w	r2, r2, #31
 8002220:	2101      	movs	r1, #1
 8002222:	fa01 f202 	lsl.w	r2, r1, r2
 8002226:	4013      	ands	r3, r2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d19e      	bne.n	800216a <HAL_RCC_OscConfig+0xcfe>
 800222c:	e01e      	b.n	800226c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800222e:	1d3b      	adds	r3, r7, #4
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	69db      	ldr	r3, [r3, #28]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d101      	bne.n	800223c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e018      	b.n	800226e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800223c:	4b0e      	ldr	r3, [pc, #56]	; (8002278 <HAL_RCC_OscConfig+0xe0c>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002244:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002248:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800224c:	1d3b      	adds	r3, r7, #4
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	429a      	cmp	r2, r3
 8002254:	d108      	bne.n	8002268 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002256:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800225a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800225e:	1d3b      	adds	r3, r7, #4
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002264:	429a      	cmp	r2, r3
 8002266:	d001      	beq.n	800226c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e000      	b.n	800226e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40021000 	.word	0x40021000

0800227c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b09e      	sub	sp, #120	; 0x78
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002286:	2300      	movs	r3, #0
 8002288:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d101      	bne.n	8002294 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e162      	b.n	800255a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002294:	4b90      	ldr	r3, [pc, #576]	; (80024d8 <HAL_RCC_ClockConfig+0x25c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d910      	bls.n	80022c4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a2:	4b8d      	ldr	r3, [pc, #564]	; (80024d8 <HAL_RCC_ClockConfig+0x25c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f023 0207 	bic.w	r2, r3, #7
 80022aa:	498b      	ldr	r1, [pc, #556]	; (80024d8 <HAL_RCC_ClockConfig+0x25c>)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022b2:	4b89      	ldr	r3, [pc, #548]	; (80024d8 <HAL_RCC_ClockConfig+0x25c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d001      	beq.n	80022c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e14a      	b.n	800255a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d008      	beq.n	80022e2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022d0:	4b82      	ldr	r3, [pc, #520]	; (80024dc <HAL_RCC_ClockConfig+0x260>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	497f      	ldr	r1, [pc, #508]	; (80024dc <HAL_RCC_ClockConfig+0x260>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f000 80dc 	beq.w	80024a8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d13c      	bne.n	8002372 <HAL_RCC_ClockConfig+0xf6>
 80022f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022fc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002300:	fa93 f3a3 	rbit	r3, r3
 8002304:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002308:	fab3 f383 	clz	r3, r3
 800230c:	b2db      	uxtb	r3, r3
 800230e:	095b      	lsrs	r3, r3, #5
 8002310:	b2db      	uxtb	r3, r3
 8002312:	f043 0301 	orr.w	r3, r3, #1
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b01      	cmp	r3, #1
 800231a:	d102      	bne.n	8002322 <HAL_RCC_ClockConfig+0xa6>
 800231c:	4b6f      	ldr	r3, [pc, #444]	; (80024dc <HAL_RCC_ClockConfig+0x260>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	e00f      	b.n	8002342 <HAL_RCC_ClockConfig+0xc6>
 8002322:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002326:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002328:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800232a:	fa93 f3a3 	rbit	r3, r3
 800232e:	667b      	str	r3, [r7, #100]	; 0x64
 8002330:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002334:	663b      	str	r3, [r7, #96]	; 0x60
 8002336:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002338:	fa93 f3a3 	rbit	r3, r3
 800233c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800233e:	4b67      	ldr	r3, [pc, #412]	; (80024dc <HAL_RCC_ClockConfig+0x260>)
 8002340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002342:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002346:	65ba      	str	r2, [r7, #88]	; 0x58
 8002348:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800234a:	fa92 f2a2 	rbit	r2, r2
 800234e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002350:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002352:	fab2 f282 	clz	r2, r2
 8002356:	b2d2      	uxtb	r2, r2
 8002358:	f042 0220 	orr.w	r2, r2, #32
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	f002 021f 	and.w	r2, r2, #31
 8002362:	2101      	movs	r1, #1
 8002364:	fa01 f202 	lsl.w	r2, r1, r2
 8002368:	4013      	ands	r3, r2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d17b      	bne.n	8002466 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e0f3      	b.n	800255a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b02      	cmp	r3, #2
 8002378:	d13c      	bne.n	80023f4 <HAL_RCC_ClockConfig+0x178>
 800237a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800237e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002380:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002382:	fa93 f3a3 	rbit	r3, r3
 8002386:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800238a:	fab3 f383 	clz	r3, r3
 800238e:	b2db      	uxtb	r3, r3
 8002390:	095b      	lsrs	r3, r3, #5
 8002392:	b2db      	uxtb	r3, r3
 8002394:	f043 0301 	orr.w	r3, r3, #1
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b01      	cmp	r3, #1
 800239c:	d102      	bne.n	80023a4 <HAL_RCC_ClockConfig+0x128>
 800239e:	4b4f      	ldr	r3, [pc, #316]	; (80024dc <HAL_RCC_ClockConfig+0x260>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	e00f      	b.n	80023c4 <HAL_RCC_ClockConfig+0x148>
 80023a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023a8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023ac:	fa93 f3a3 	rbit	r3, r3
 80023b0:	647b      	str	r3, [r7, #68]	; 0x44
 80023b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023b6:	643b      	str	r3, [r7, #64]	; 0x40
 80023b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023ba:	fa93 f3a3 	rbit	r3, r3
 80023be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023c0:	4b46      	ldr	r3, [pc, #280]	; (80024dc <HAL_RCC_ClockConfig+0x260>)
 80023c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023c8:	63ba      	str	r2, [r7, #56]	; 0x38
 80023ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023cc:	fa92 f2a2 	rbit	r2, r2
 80023d0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80023d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023d4:	fab2 f282 	clz	r2, r2
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	f042 0220 	orr.w	r2, r2, #32
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	f002 021f 	and.w	r2, r2, #31
 80023e4:	2101      	movs	r1, #1
 80023e6:	fa01 f202 	lsl.w	r2, r1, r2
 80023ea:	4013      	ands	r3, r2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d13a      	bne.n	8002466 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e0b2      	b.n	800255a <HAL_RCC_ClockConfig+0x2de>
 80023f4:	2302      	movs	r3, #2
 80023f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023fa:	fa93 f3a3 	rbit	r3, r3
 80023fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002402:	fab3 f383 	clz	r3, r3
 8002406:	b2db      	uxtb	r3, r3
 8002408:	095b      	lsrs	r3, r3, #5
 800240a:	b2db      	uxtb	r3, r3
 800240c:	f043 0301 	orr.w	r3, r3, #1
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b01      	cmp	r3, #1
 8002414:	d102      	bne.n	800241c <HAL_RCC_ClockConfig+0x1a0>
 8002416:	4b31      	ldr	r3, [pc, #196]	; (80024dc <HAL_RCC_ClockConfig+0x260>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	e00d      	b.n	8002438 <HAL_RCC_ClockConfig+0x1bc>
 800241c:	2302      	movs	r3, #2
 800241e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002422:	fa93 f3a3 	rbit	r3, r3
 8002426:	627b      	str	r3, [r7, #36]	; 0x24
 8002428:	2302      	movs	r3, #2
 800242a:	623b      	str	r3, [r7, #32]
 800242c:	6a3b      	ldr	r3, [r7, #32]
 800242e:	fa93 f3a3 	rbit	r3, r3
 8002432:	61fb      	str	r3, [r7, #28]
 8002434:	4b29      	ldr	r3, [pc, #164]	; (80024dc <HAL_RCC_ClockConfig+0x260>)
 8002436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002438:	2202      	movs	r2, #2
 800243a:	61ba      	str	r2, [r7, #24]
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	fa92 f2a2 	rbit	r2, r2
 8002442:	617a      	str	r2, [r7, #20]
  return result;
 8002444:	697a      	ldr	r2, [r7, #20]
 8002446:	fab2 f282 	clz	r2, r2
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	f042 0220 	orr.w	r2, r2, #32
 8002450:	b2d2      	uxtb	r2, r2
 8002452:	f002 021f 	and.w	r2, r2, #31
 8002456:	2101      	movs	r1, #1
 8002458:	fa01 f202 	lsl.w	r2, r1, r2
 800245c:	4013      	ands	r3, r2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e079      	b.n	800255a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002466:	4b1d      	ldr	r3, [pc, #116]	; (80024dc <HAL_RCC_ClockConfig+0x260>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f023 0203 	bic.w	r2, r3, #3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	491a      	ldr	r1, [pc, #104]	; (80024dc <HAL_RCC_ClockConfig+0x260>)
 8002474:	4313      	orrs	r3, r2
 8002476:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002478:	f7fe fd3e 	bl	8000ef8 <HAL_GetTick>
 800247c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800247e:	e00a      	b.n	8002496 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002480:	f7fe fd3a 	bl	8000ef8 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	f241 3288 	movw	r2, #5000	; 0x1388
 800248e:	4293      	cmp	r3, r2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e061      	b.n	800255a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002496:	4b11      	ldr	r3, [pc, #68]	; (80024dc <HAL_RCC_ClockConfig+0x260>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f003 020c 	and.w	r2, r3, #12
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d1eb      	bne.n	8002480 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024a8:	4b0b      	ldr	r3, [pc, #44]	; (80024d8 <HAL_RCC_ClockConfig+0x25c>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0307 	and.w	r3, r3, #7
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d214      	bcs.n	80024e0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b6:	4b08      	ldr	r3, [pc, #32]	; (80024d8 <HAL_RCC_ClockConfig+0x25c>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f023 0207 	bic.w	r2, r3, #7
 80024be:	4906      	ldr	r1, [pc, #24]	; (80024d8 <HAL_RCC_ClockConfig+0x25c>)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c6:	4b04      	ldr	r3, [pc, #16]	; (80024d8 <HAL_RCC_ClockConfig+0x25c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d005      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e040      	b.n	800255a <HAL_RCC_ClockConfig+0x2de>
 80024d8:	40022000 	.word	0x40022000
 80024dc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0304 	and.w	r3, r3, #4
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d008      	beq.n	80024fe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024ec:	4b1d      	ldr	r3, [pc, #116]	; (8002564 <HAL_RCC_ClockConfig+0x2e8>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	491a      	ldr	r1, [pc, #104]	; (8002564 <HAL_RCC_ClockConfig+0x2e8>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0308 	and.w	r3, r3, #8
 8002506:	2b00      	cmp	r3, #0
 8002508:	d009      	beq.n	800251e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800250a:	4b16      	ldr	r3, [pc, #88]	; (8002564 <HAL_RCC_ClockConfig+0x2e8>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	4912      	ldr	r1, [pc, #72]	; (8002564 <HAL_RCC_ClockConfig+0x2e8>)
 800251a:	4313      	orrs	r3, r2
 800251c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800251e:	f000 f829 	bl	8002574 <HAL_RCC_GetSysClockFreq>
 8002522:	4601      	mov	r1, r0
 8002524:	4b0f      	ldr	r3, [pc, #60]	; (8002564 <HAL_RCC_ClockConfig+0x2e8>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800252c:	22f0      	movs	r2, #240	; 0xf0
 800252e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	fa92 f2a2 	rbit	r2, r2
 8002536:	60fa      	str	r2, [r7, #12]
  return result;
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	fab2 f282 	clz	r2, r2
 800253e:	b2d2      	uxtb	r2, r2
 8002540:	40d3      	lsrs	r3, r2
 8002542:	4a09      	ldr	r2, [pc, #36]	; (8002568 <HAL_RCC_ClockConfig+0x2ec>)
 8002544:	5cd3      	ldrb	r3, [r2, r3]
 8002546:	fa21 f303 	lsr.w	r3, r1, r3
 800254a:	4a08      	ldr	r2, [pc, #32]	; (800256c <HAL_RCC_ClockConfig+0x2f0>)
 800254c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800254e:	4b08      	ldr	r3, [pc, #32]	; (8002570 <HAL_RCC_ClockConfig+0x2f4>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f7fe fc8c 	bl	8000e70 <HAL_InitTick>
  
  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3778      	adds	r7, #120	; 0x78
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40021000 	.word	0x40021000
 8002568:	08004ce0 	.word	0x08004ce0
 800256c:	20000008 	.word	0x20000008
 8002570:	2000000c 	.word	0x2000000c

08002574 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002574:	b480      	push	{r7}
 8002576:	b08b      	sub	sp, #44	; 0x2c
 8002578:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800257a:	2300      	movs	r3, #0
 800257c:	61fb      	str	r3, [r7, #28]
 800257e:	2300      	movs	r3, #0
 8002580:	61bb      	str	r3, [r7, #24]
 8002582:	2300      	movs	r3, #0
 8002584:	627b      	str	r3, [r7, #36]	; 0x24
 8002586:	2300      	movs	r3, #0
 8002588:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800258a:	2300      	movs	r3, #0
 800258c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800258e:	4b29      	ldr	r3, [pc, #164]	; (8002634 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	f003 030c 	and.w	r3, r3, #12
 800259a:	2b04      	cmp	r3, #4
 800259c:	d002      	beq.n	80025a4 <HAL_RCC_GetSysClockFreq+0x30>
 800259e:	2b08      	cmp	r3, #8
 80025a0:	d003      	beq.n	80025aa <HAL_RCC_GetSysClockFreq+0x36>
 80025a2:	e03c      	b.n	800261e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025a4:	4b24      	ldr	r3, [pc, #144]	; (8002638 <HAL_RCC_GetSysClockFreq+0xc4>)
 80025a6:	623b      	str	r3, [r7, #32]
      break;
 80025a8:	e03c      	b.n	8002624 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80025b0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80025b4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b6:	68ba      	ldr	r2, [r7, #8]
 80025b8:	fa92 f2a2 	rbit	r2, r2
 80025bc:	607a      	str	r2, [r7, #4]
  return result;
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	fab2 f282 	clz	r2, r2
 80025c4:	b2d2      	uxtb	r2, r2
 80025c6:	40d3      	lsrs	r3, r2
 80025c8:	4a1c      	ldr	r2, [pc, #112]	; (800263c <HAL_RCC_GetSysClockFreq+0xc8>)
 80025ca:	5cd3      	ldrb	r3, [r2, r3]
 80025cc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80025ce:	4b19      	ldr	r3, [pc, #100]	; (8002634 <HAL_RCC_GetSysClockFreq+0xc0>)
 80025d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d2:	f003 030f 	and.w	r3, r3, #15
 80025d6:	220f      	movs	r2, #15
 80025d8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	fa92 f2a2 	rbit	r2, r2
 80025e0:	60fa      	str	r2, [r7, #12]
  return result;
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	fab2 f282 	clz	r2, r2
 80025e8:	b2d2      	uxtb	r2, r2
 80025ea:	40d3      	lsrs	r3, r2
 80025ec:	4a14      	ldr	r2, [pc, #80]	; (8002640 <HAL_RCC_GetSysClockFreq+0xcc>)
 80025ee:	5cd3      	ldrb	r3, [r2, r3]
 80025f0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d008      	beq.n	800260e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025fc:	4a0e      	ldr	r2, [pc, #56]	; (8002638 <HAL_RCC_GetSysClockFreq+0xc4>)
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	fbb2 f2f3 	udiv	r2, r2, r3
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	fb02 f303 	mul.w	r3, r2, r3
 800260a:	627b      	str	r3, [r7, #36]	; 0x24
 800260c:	e004      	b.n	8002618 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	4a0c      	ldr	r2, [pc, #48]	; (8002644 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002612:	fb02 f303 	mul.w	r3, r2, r3
 8002616:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261a:	623b      	str	r3, [r7, #32]
      break;
 800261c:	e002      	b.n	8002624 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800261e:	4b0a      	ldr	r3, [pc, #40]	; (8002648 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002620:	623b      	str	r3, [r7, #32]
      break;
 8002622:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002624:	6a3b      	ldr	r3, [r7, #32]
}
 8002626:	4618      	mov	r0, r3
 8002628:	372c      	adds	r7, #44	; 0x2c
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	40021000 	.word	0x40021000
 8002638:	01e84800 	.word	0x01e84800
 800263c:	08004cf8 	.word	0x08004cf8
 8002640:	08004d08 	.word	0x08004d08
 8002644:	003d0900 	.word	0x003d0900
 8002648:	007a1200 	.word	0x007a1200

0800264c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002650:	4b03      	ldr	r3, [pc, #12]	; (8002660 <HAL_RCC_GetHCLKFreq+0x14>)
 8002652:	681b      	ldr	r3, [r3, #0]
}
 8002654:	4618      	mov	r0, r3
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	20000008 	.word	0x20000008

08002664 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800266a:	f7ff ffef 	bl	800264c <HAL_RCC_GetHCLKFreq>
 800266e:	4601      	mov	r1, r0
 8002670:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002678:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800267c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	fa92 f2a2 	rbit	r2, r2
 8002684:	603a      	str	r2, [r7, #0]
  return result;
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	fab2 f282 	clz	r2, r2
 800268c:	b2d2      	uxtb	r2, r2
 800268e:	40d3      	lsrs	r3, r2
 8002690:	4a04      	ldr	r2, [pc, #16]	; (80026a4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002692:	5cd3      	ldrb	r3, [r2, r3]
 8002694:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002698:	4618      	mov	r0, r3
 800269a:	3708      	adds	r7, #8
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40021000 	.word	0x40021000
 80026a4:	08004cf0 	.word	0x08004cf0

080026a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80026ae:	f7ff ffcd 	bl	800264c <HAL_RCC_GetHCLKFreq>
 80026b2:	4601      	mov	r1, r0
 80026b4:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80026bc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80026c0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	fa92 f2a2 	rbit	r2, r2
 80026c8:	603a      	str	r2, [r7, #0]
  return result;
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	fab2 f282 	clz	r2, r2
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	40d3      	lsrs	r3, r2
 80026d4:	4a04      	ldr	r2, [pc, #16]	; (80026e8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80026d6:	5cd3      	ldrb	r3, [r2, r3]
 80026d8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80026dc:	4618      	mov	r0, r3
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	40021000 	.word	0x40021000
 80026e8:	08004cf0 	.word	0x08004cf0

080026ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e09d      	b.n	800283a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002702:	2b00      	cmp	r3, #0
 8002704:	d108      	bne.n	8002718 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800270e:	d009      	beq.n	8002724 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	61da      	str	r2, [r3, #28]
 8002716:	e005      	b.n	8002724 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d106      	bne.n	8002744 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f7fe fa0c 	bl	8000b5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2202      	movs	r2, #2
 8002748:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800275a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002764:	d902      	bls.n	800276c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002766:	2300      	movs	r3, #0
 8002768:	60fb      	str	r3, [r7, #12]
 800276a:	e002      	b.n	8002772 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800276c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002770:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800277a:	d007      	beq.n	800278c <HAL_SPI_Init+0xa0>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002784:	d002      	beq.n	800278c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800279c:	431a      	orrs	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	431a      	orrs	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	f003 0301 	and.w	r3, r3, #1
 80027b0:	431a      	orrs	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027ba:	431a      	orrs	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	69db      	ldr	r3, [r3, #28]
 80027c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027c4:	431a      	orrs	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ce:	ea42 0103 	orr.w	r1, r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	430a      	orrs	r2, r1
 80027e0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	0c1b      	lsrs	r3, r3, #16
 80027e8:	f003 0204 	and.w	r2, r3, #4
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f0:	f003 0310 	and.w	r3, r3, #16
 80027f4:	431a      	orrs	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	431a      	orrs	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002808:	ea42 0103 	orr.w	r1, r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	69da      	ldr	r2, [r3, #28]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002828:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b088      	sub	sp, #32
 8002846:	af00      	add	r7, sp, #0
 8002848:	60f8      	str	r0, [r7, #12]
 800284a:	60b9      	str	r1, [r7, #8]
 800284c:	603b      	str	r3, [r7, #0]
 800284e:	4613      	mov	r3, r2
 8002850:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002852:	2300      	movs	r3, #0
 8002854:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800285c:	2b01      	cmp	r3, #1
 800285e:	d101      	bne.n	8002864 <HAL_SPI_Transmit+0x22>
 8002860:	2302      	movs	r3, #2
 8002862:	e15f      	b.n	8002b24 <HAL_SPI_Transmit+0x2e2>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800286c:	f7fe fb44 	bl	8000ef8 <HAL_GetTick>
 8002870:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002872:	88fb      	ldrh	r3, [r7, #6]
 8002874:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b01      	cmp	r3, #1
 8002880:	d002      	beq.n	8002888 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002882:	2302      	movs	r3, #2
 8002884:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002886:	e148      	b.n	8002b1a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d002      	beq.n	8002894 <HAL_SPI_Transmit+0x52>
 800288e:	88fb      	ldrh	r3, [r7, #6]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d102      	bne.n	800289a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002898:	e13f      	b.n	8002b1a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2203      	movs	r2, #3
 800289e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2200      	movs	r2, #0
 80028a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	68ba      	ldr	r2, [r7, #8]
 80028ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	88fa      	ldrh	r2, [r7, #6]
 80028b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	88fa      	ldrh	r2, [r7, #6]
 80028b8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028e4:	d10f      	bne.n	8002906 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002904:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002910:	2b40      	cmp	r3, #64	; 0x40
 8002912:	d007      	beq.n	8002924 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002922:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800292c:	d94f      	bls.n	80029ce <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d002      	beq.n	800293c <HAL_SPI_Transmit+0xfa>
 8002936:	8afb      	ldrh	r3, [r7, #22]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d142      	bne.n	80029c2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002940:	881a      	ldrh	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800294c:	1c9a      	adds	r2, r3, #2
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002956:	b29b      	uxth	r3, r3
 8002958:	3b01      	subs	r3, #1
 800295a:	b29a      	uxth	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002960:	e02f      	b.n	80029c2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b02      	cmp	r3, #2
 800296e:	d112      	bne.n	8002996 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002974:	881a      	ldrh	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002980:	1c9a      	adds	r2, r3, #2
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800298a:	b29b      	uxth	r3, r3
 800298c:	3b01      	subs	r3, #1
 800298e:	b29a      	uxth	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002994:	e015      	b.n	80029c2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002996:	f7fe faaf 	bl	8000ef8 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d803      	bhi.n	80029ae <HAL_SPI_Transmit+0x16c>
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ac:	d102      	bne.n	80029b4 <HAL_SPI_Transmit+0x172>
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d106      	bne.n	80029c2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80029c0:	e0ab      	b.n	8002b1a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1ca      	bne.n	8002962 <HAL_SPI_Transmit+0x120>
 80029cc:	e080      	b.n	8002ad0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d002      	beq.n	80029dc <HAL_SPI_Transmit+0x19a>
 80029d6:	8afb      	ldrh	r3, [r7, #22]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d174      	bne.n	8002ac6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d912      	bls.n	8002a0c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ea:	881a      	ldrh	r2, [r3, #0]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f6:	1c9a      	adds	r2, r3, #2
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	3b02      	subs	r3, #2
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a0a:	e05c      	b.n	8002ac6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	330c      	adds	r3, #12
 8002a16:	7812      	ldrb	r2, [r2, #0]
 8002a18:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a1e:	1c5a      	adds	r2, r3, #1
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002a32:	e048      	b.n	8002ac6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d12b      	bne.n	8002a9a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d912      	bls.n	8002a72 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a50:	881a      	ldrh	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a5c:	1c9a      	adds	r2, r3, #2
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	3b02      	subs	r3, #2
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a70:	e029      	b.n	8002ac6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	330c      	adds	r3, #12
 8002a7c:	7812      	ldrb	r2, [r2, #0]
 8002a7e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a84:	1c5a      	adds	r2, r3, #1
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	3b01      	subs	r3, #1
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a98:	e015      	b.n	8002ac6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a9a:	f7fe fa2d 	bl	8000ef8 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d803      	bhi.n	8002ab2 <HAL_SPI_Transmit+0x270>
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab0:	d102      	bne.n	8002ab8 <HAL_SPI_Transmit+0x276>
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d106      	bne.n	8002ac6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002ac4:	e029      	b.n	8002b1a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1b1      	bne.n	8002a34 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	6839      	ldr	r1, [r7, #0]
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f000 fcf9 	bl	80034cc <SPI_EndRxTxTransaction>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d002      	beq.n	8002ae6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10a      	bne.n	8002b04 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002aee:	2300      	movs	r3, #0
 8002af0:	613b      	str	r3, [r7, #16]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	613b      	str	r3, [r7, #16]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	613b      	str	r3, [r7, #16]
 8002b02:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d002      	beq.n	8002b12 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	77fb      	strb	r3, [r7, #31]
 8002b10:	e003      	b.n	8002b1a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2201      	movs	r2, #1
 8002b16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002b22:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3720      	adds	r7, #32
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b088      	sub	sp, #32
 8002b30:	af02      	add	r7, sp, #8
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	603b      	str	r3, [r7, #0]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d002      	beq.n	8002b52 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b50:	e11a      	b.n	8002d88 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b5a:	d112      	bne.n	8002b82 <HAL_SPI_Receive+0x56>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d10e      	bne.n	8002b82 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2204      	movs	r2, #4
 8002b68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002b6c:	88fa      	ldrh	r2, [r7, #6]
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	9300      	str	r3, [sp, #0]
 8002b72:	4613      	mov	r3, r2
 8002b74:	68ba      	ldr	r2, [r7, #8]
 8002b76:	68b9      	ldr	r1, [r7, #8]
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f000 f90e 	bl	8002d9a <HAL_SPI_TransmitReceive>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	e107      	b.n	8002d92 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d101      	bne.n	8002b90 <HAL_SPI_Receive+0x64>
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	e100      	b.n	8002d92 <HAL_SPI_Receive+0x266>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b98:	f7fe f9ae 	bl	8000ef8 <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d002      	beq.n	8002baa <HAL_SPI_Receive+0x7e>
 8002ba4:	88fb      	ldrh	r3, [r7, #6]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d102      	bne.n	8002bb0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002bae:	e0eb      	b.n	8002d88 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2204      	movs	r2, #4
 8002bb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	68ba      	ldr	r2, [r7, #8]
 8002bc2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	88fa      	ldrh	r2, [r7, #6]
 8002bc8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	88fa      	ldrh	r2, [r7, #6]
 8002bd0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002bfa:	d908      	bls.n	8002c0e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	685a      	ldr	r2, [r3, #4]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c0a:	605a      	str	r2, [r3, #4]
 8002c0c:	e007      	b.n	8002c1e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c1c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c26:	d10f      	bne.n	8002c48 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c36:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c46:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c52:	2b40      	cmp	r3, #64	; 0x40
 8002c54:	d007      	beq.n	8002c66 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c64:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c6e:	d86f      	bhi.n	8002d50 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002c70:	e034      	b.n	8002cdc <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d117      	bne.n	8002cb0 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f103 020c 	add.w	r2, r3, #12
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8c:	7812      	ldrb	r2, [r2, #0]
 8002c8e:	b2d2      	uxtb	r2, r2
 8002c90:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	1c5a      	adds	r2, r3, #1
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002cae:	e015      	b.n	8002cdc <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cb0:	f7fe f922 	bl	8000ef8 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d803      	bhi.n	8002cc8 <HAL_SPI_Receive+0x19c>
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc6:	d102      	bne.n	8002cce <HAL_SPI_Receive+0x1a2>
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d106      	bne.n	8002cdc <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002cda:	e055      	b.n	8002d88 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1c4      	bne.n	8002c72 <HAL_SPI_Receive+0x146>
 8002ce8:	e038      	b.n	8002d5c <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d115      	bne.n	8002d24 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68da      	ldr	r2, [r3, #12]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	b292      	uxth	r2, r2
 8002d04:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	1c9a      	adds	r2, r3, #2
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002d22:	e015      	b.n	8002d50 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d24:	f7fe f8e8 	bl	8000ef8 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d803      	bhi.n	8002d3c <HAL_SPI_Receive+0x210>
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d3a:	d102      	bne.n	8002d42 <HAL_SPI_Receive+0x216>
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d106      	bne.n	8002d50 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002d4e:	e01b      	b.n	8002d88 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1c6      	bne.n	8002cea <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	6839      	ldr	r1, [r7, #0]
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f000 fb5b 	bl	800341c <SPI_EndRxTransaction>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d002      	beq.n	8002d72 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2220      	movs	r2, #32
 8002d70:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d002      	beq.n	8002d80 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	75fb      	strb	r3, [r7, #23]
 8002d7e:	e003      	b.n	8002d88 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002d90:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3718      	adds	r7, #24
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b08a      	sub	sp, #40	; 0x28
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	60f8      	str	r0, [r7, #12]
 8002da2:	60b9      	str	r1, [r7, #8]
 8002da4:	607a      	str	r2, [r7, #4]
 8002da6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002da8:	2301      	movs	r3, #1
 8002daa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002dac:	2300      	movs	r3, #0
 8002dae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d101      	bne.n	8002dc0 <HAL_SPI_TransmitReceive+0x26>
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	e20a      	b.n	80031d6 <HAL_SPI_TransmitReceive+0x43c>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002dc8:	f7fe f896 	bl	8000ef8 <HAL_GetTick>
 8002dcc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002dd4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002ddc:	887b      	ldrh	r3, [r7, #2]
 8002dde:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002de0:	887b      	ldrh	r3, [r7, #2]
 8002de2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002de4:	7efb      	ldrb	r3, [r7, #27]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d00e      	beq.n	8002e08 <HAL_SPI_TransmitReceive+0x6e>
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002df0:	d106      	bne.n	8002e00 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d102      	bne.n	8002e00 <HAL_SPI_TransmitReceive+0x66>
 8002dfa:	7efb      	ldrb	r3, [r7, #27]
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	d003      	beq.n	8002e08 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002e00:	2302      	movs	r3, #2
 8002e02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002e06:	e1e0      	b.n	80031ca <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d005      	beq.n	8002e1a <HAL_SPI_TransmitReceive+0x80>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d002      	beq.n	8002e1a <HAL_SPI_TransmitReceive+0x80>
 8002e14:	887b      	ldrh	r3, [r7, #2]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d103      	bne.n	8002e22 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002e20:	e1d3      	b.n	80031ca <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b04      	cmp	r3, #4
 8002e2c:	d003      	beq.n	8002e36 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2205      	movs	r2, #5
 8002e32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	887a      	ldrh	r2, [r7, #2]
 8002e46:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	887a      	ldrh	r2, [r7, #2]
 8002e4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	68ba      	ldr	r2, [r7, #8]
 8002e56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	887a      	ldrh	r2, [r7, #2]
 8002e5c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	887a      	ldrh	r2, [r7, #2]
 8002e62:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e78:	d802      	bhi.n	8002e80 <HAL_SPI_TransmitReceive+0xe6>
 8002e7a:	8a3b      	ldrh	r3, [r7, #16]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d908      	bls.n	8002e92 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e8e:	605a      	str	r2, [r3, #4]
 8002e90:	e007      	b.n	8002ea2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	685a      	ldr	r2, [r3, #4]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ea0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eac:	2b40      	cmp	r3, #64	; 0x40
 8002eae:	d007      	beq.n	8002ec0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ebe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ec8:	f240 8081 	bls.w	8002fce <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d002      	beq.n	8002eda <HAL_SPI_TransmitReceive+0x140>
 8002ed4:	8a7b      	ldrh	r3, [r7, #18]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d16d      	bne.n	8002fb6 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ede:	881a      	ldrh	r2, [r3, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eea:	1c9a      	adds	r2, r3, #2
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002efe:	e05a      	b.n	8002fb6 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d11b      	bne.n	8002f46 <HAL_SPI_TransmitReceive+0x1ac>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d016      	beq.n	8002f46 <HAL_SPI_TransmitReceive+0x1ac>
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d113      	bne.n	8002f46 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f22:	881a      	ldrh	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2e:	1c9a      	adds	r2, r3, #2
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f42:	2300      	movs	r3, #0
 8002f44:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d11c      	bne.n	8002f8e <HAL_SPI_TransmitReceive+0x1f4>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d016      	beq.n	8002f8e <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68da      	ldr	r2, [r3, #12]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	b292      	uxth	r2, r2
 8002f6c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	1c9a      	adds	r2, r3, #2
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	3b01      	subs	r3, #1
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f8e:	f7fd ffb3 	bl	8000ef8 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d80b      	bhi.n	8002fb6 <HAL_SPI_TransmitReceive+0x21c>
 8002f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa4:	d007      	beq.n	8002fb6 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8002fb4:	e109      	b.n	80031ca <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d19f      	bne.n	8002f00 <HAL_SPI_TransmitReceive+0x166>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d199      	bne.n	8002f00 <HAL_SPI_TransmitReceive+0x166>
 8002fcc:	e0e3      	b.n	8003196 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_SPI_TransmitReceive+0x244>
 8002fd6:	8a7b      	ldrh	r3, [r7, #18]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	f040 80cf 	bne.w	800317c <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d912      	bls.n	800300e <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fec:	881a      	ldrh	r2, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff8:	1c9a      	adds	r2, r3, #2
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003002:	b29b      	uxth	r3, r3
 8003004:	3b02      	subs	r3, #2
 8003006:	b29a      	uxth	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800300c:	e0b6      	b.n	800317c <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	330c      	adds	r3, #12
 8003018:	7812      	ldrb	r2, [r2, #0]
 800301a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003020:	1c5a      	adds	r2, r3, #1
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800302a:	b29b      	uxth	r3, r3
 800302c:	3b01      	subs	r3, #1
 800302e:	b29a      	uxth	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003034:	e0a2      	b.n	800317c <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b02      	cmp	r3, #2
 8003042:	d134      	bne.n	80030ae <HAL_SPI_TransmitReceive+0x314>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003048:	b29b      	uxth	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d02f      	beq.n	80030ae <HAL_SPI_TransmitReceive+0x314>
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	2b01      	cmp	r3, #1
 8003052:	d12c      	bne.n	80030ae <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003058:	b29b      	uxth	r3, r3
 800305a:	2b01      	cmp	r3, #1
 800305c:	d912      	bls.n	8003084 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003062:	881a      	ldrh	r2, [r3, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306e:	1c9a      	adds	r2, r3, #2
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003078:	b29b      	uxth	r3, r3
 800307a:	3b02      	subs	r3, #2
 800307c:	b29a      	uxth	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003082:	e012      	b.n	80030aa <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	330c      	adds	r3, #12
 800308e:	7812      	ldrb	r2, [r2, #0]
 8003090:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003096:	1c5a      	adds	r2, r3, #1
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	3b01      	subs	r3, #1
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80030aa:	2300      	movs	r3, #0
 80030ac:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f003 0301 	and.w	r3, r3, #1
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d148      	bne.n	800314e <HAL_SPI_TransmitReceive+0x3b4>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d042      	beq.n	800314e <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d923      	bls.n	800311c <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68da      	ldr	r2, [r3, #12]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030de:	b292      	uxth	r2, r2
 80030e0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	1c9a      	adds	r2, r3, #2
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	3b02      	subs	r3, #2
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003104:	b29b      	uxth	r3, r3
 8003106:	2b01      	cmp	r3, #1
 8003108:	d81f      	bhi.n	800314a <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003118:	605a      	str	r2, [r3, #4]
 800311a:	e016      	b.n	800314a <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f103 020c 	add.w	r2, r3, #12
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003128:	7812      	ldrb	r2, [r2, #0]
 800312a:	b2d2      	uxtb	r2, r2
 800312c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	1c5a      	adds	r2, r3, #1
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800313e:	b29b      	uxth	r3, r3
 8003140:	3b01      	subs	r3, #1
 8003142:	b29a      	uxth	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800314a:	2301      	movs	r3, #1
 800314c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800314e:	f7fd fed3 	bl	8000ef8 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800315a:	429a      	cmp	r2, r3
 800315c:	d803      	bhi.n	8003166 <HAL_SPI_TransmitReceive+0x3cc>
 800315e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003164:	d102      	bne.n	800316c <HAL_SPI_TransmitReceive+0x3d2>
 8003166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003168:	2b00      	cmp	r3, #0
 800316a:	d107      	bne.n	800317c <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800317a:	e026      	b.n	80031ca <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003180:	b29b      	uxth	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	f47f af57 	bne.w	8003036 <HAL_SPI_TransmitReceive+0x29c>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800318e:	b29b      	uxth	r3, r3
 8003190:	2b00      	cmp	r3, #0
 8003192:	f47f af50 	bne.w	8003036 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003196:	69fa      	ldr	r2, [r7, #28]
 8003198:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f000 f996 	bl	80034cc <SPI_EndRxTxTransaction>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d005      	beq.n	80031b2 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2220      	movs	r2, #32
 80031b0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d003      	beq.n	80031c2 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031c0:	e003      	b.n	80031ca <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80031d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3728      	adds	r7, #40	; 0x28
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
	...

080031e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b088      	sub	sp, #32
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	603b      	str	r3, [r7, #0]
 80031ec:	4613      	mov	r3, r2
 80031ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80031f0:	f7fd fe82 	bl	8000ef8 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f8:	1a9b      	subs	r3, r3, r2
 80031fa:	683a      	ldr	r2, [r7, #0]
 80031fc:	4413      	add	r3, r2
 80031fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003200:	f7fd fe7a 	bl	8000ef8 <HAL_GetTick>
 8003204:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003206:	4b39      	ldr	r3, [pc, #228]	; (80032ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	015b      	lsls	r3, r3, #5
 800320c:	0d1b      	lsrs	r3, r3, #20
 800320e:	69fa      	ldr	r2, [r7, #28]
 8003210:	fb02 f303 	mul.w	r3, r2, r3
 8003214:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003216:	e054      	b.n	80032c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800321e:	d050      	beq.n	80032c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003220:	f7fd fe6a 	bl	8000ef8 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	69fa      	ldr	r2, [r7, #28]
 800322c:	429a      	cmp	r2, r3
 800322e:	d902      	bls.n	8003236 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d13d      	bne.n	80032b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	685a      	ldr	r2, [r3, #4]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003244:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800324e:	d111      	bne.n	8003274 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003258:	d004      	beq.n	8003264 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003262:	d107      	bne.n	8003274 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003272:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003278:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800327c:	d10f      	bne.n	800329e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800328c:	601a      	str	r2, [r3, #0]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800329c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e017      	b.n	80032e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d101      	bne.n	80032bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80032b8:	2300      	movs	r3, #0
 80032ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	3b01      	subs	r3, #1
 80032c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	4013      	ands	r3, r2
 80032cc:	68ba      	ldr	r2, [r7, #8]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	bf0c      	ite	eq
 80032d2:	2301      	moveq	r3, #1
 80032d4:	2300      	movne	r3, #0
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	461a      	mov	r2, r3
 80032da:	79fb      	ldrb	r3, [r7, #7]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d19b      	bne.n	8003218 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3720      	adds	r7, #32
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	20000008 	.word	0x20000008

080032f0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b08a      	sub	sp, #40	; 0x28
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
 80032fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80032fe:	2300      	movs	r3, #0
 8003300:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003302:	f7fd fdf9 	bl	8000ef8 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800330a:	1a9b      	subs	r3, r3, r2
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	4413      	add	r3, r2
 8003310:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003312:	f7fd fdf1 	bl	8000ef8 <HAL_GetTick>
 8003316:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	330c      	adds	r3, #12
 800331e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003320:	4b3d      	ldr	r3, [pc, #244]	; (8003418 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	4613      	mov	r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	4413      	add	r3, r2
 800332a:	00da      	lsls	r2, r3, #3
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	0d1b      	lsrs	r3, r3, #20
 8003330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003332:	fb02 f303 	mul.w	r3, r2, r3
 8003336:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003338:	e060      	b.n	80033fc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003340:	d107      	bne.n	8003352 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d104      	bne.n	8003352 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	b2db      	uxtb	r3, r3
 800334e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003350:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003358:	d050      	beq.n	80033fc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800335a:	f7fd fdcd 	bl	8000ef8 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	6a3b      	ldr	r3, [r7, #32]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003366:	429a      	cmp	r2, r3
 8003368:	d902      	bls.n	8003370 <SPI_WaitFifoStateUntilTimeout+0x80>
 800336a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336c:	2b00      	cmp	r3, #0
 800336e:	d13d      	bne.n	80033ec <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	685a      	ldr	r2, [r3, #4]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800337e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003388:	d111      	bne.n	80033ae <SPI_WaitFifoStateUntilTimeout+0xbe>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003392:	d004      	beq.n	800339e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800339c:	d107      	bne.n	80033ae <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033ac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033b6:	d10f      	bne.n	80033d8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033d6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e010      	b.n	800340e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80033f2:	2300      	movs	r3, #0
 80033f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	3b01      	subs	r3, #1
 80033fa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689a      	ldr	r2, [r3, #8]
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	4013      	ands	r3, r2
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	429a      	cmp	r2, r3
 800340a:	d196      	bne.n	800333a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3728      	adds	r7, #40	; 0x28
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	20000008 	.word	0x20000008

0800341c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af02      	add	r7, sp, #8
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003430:	d111      	bne.n	8003456 <SPI_EndRxTransaction+0x3a>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800343a:	d004      	beq.n	8003446 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003444:	d107      	bne.n	8003456 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003454:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	2200      	movs	r2, #0
 800345e:	2180      	movs	r1, #128	; 0x80
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f7ff febd 	bl	80031e0 <SPI_WaitFlagStateUntilTimeout>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d007      	beq.n	800347c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003470:	f043 0220 	orr.w	r2, r3, #32
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e023      	b.n	80034c4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003484:	d11d      	bne.n	80034c2 <SPI_EndRxTransaction+0xa6>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800348e:	d004      	beq.n	800349a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003498:	d113      	bne.n	80034c2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	9300      	str	r3, [sp, #0]
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f7ff ff22 	bl	80032f0 <SPI_WaitFifoStateUntilTimeout>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d007      	beq.n	80034c2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034b6:	f043 0220 	orr.w	r2, r3, #32
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e000      	b.n	80034c4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3710      	adds	r7, #16
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af02      	add	r7, sp, #8
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	9300      	str	r3, [sp, #0]
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	2200      	movs	r2, #0
 80034e0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	f7ff ff03 	bl	80032f0 <SPI_WaitFifoStateUntilTimeout>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d007      	beq.n	8003500 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034f4:	f043 0220 	orr.w	r2, r3, #32
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e027      	b.n	8003550 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	9300      	str	r3, [sp, #0]
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	2200      	movs	r2, #0
 8003508:	2180      	movs	r1, #128	; 0x80
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	f7ff fe68 	bl	80031e0 <SPI_WaitFlagStateUntilTimeout>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d007      	beq.n	8003526 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800351a:	f043 0220 	orr.w	r2, r3, #32
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e014      	b.n	8003550 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	9300      	str	r3, [sp, #0]
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	2200      	movs	r2, #0
 800352e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f7ff fedc 	bl	80032f0 <SPI_WaitFifoStateUntilTimeout>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d007      	beq.n	800354e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003542:	f043 0220 	orr.w	r2, r3, #32
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e000      	b.n	8003550 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e040      	b.n	80035ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800356e:	2b00      	cmp	r3, #0
 8003570:	d106      	bne.n	8003580 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f7fd fb32 	bl	8000be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2224      	movs	r2, #36	; 0x24
 8003584:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f022 0201 	bic.w	r2, r2, #1
 8003594:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f8b6 	bl	8003708 <UART_SetConfig>
 800359c:	4603      	mov	r3, r0
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d101      	bne.n	80035a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e022      	b.n	80035ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d002      	beq.n	80035b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f9e0 	bl	8003974 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	685a      	ldr	r2, [r3, #4]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	689a      	ldr	r2, [r3, #8]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f042 0201 	orr.w	r2, r2, #1
 80035e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 fa67 	bl	8003ab8 <UART_CheckIdleState>
 80035ea:	4603      	mov	r3, r0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3708      	adds	r7, #8
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b08a      	sub	sp, #40	; 0x28
 80035f8:	af02      	add	r7, sp, #8
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	603b      	str	r3, [r7, #0]
 8003600:	4613      	mov	r3, r2
 8003602:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003608:	2b20      	cmp	r3, #32
 800360a:	d178      	bne.n	80036fe <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d002      	beq.n	8003618 <HAL_UART_Transmit+0x24>
 8003612:	88fb      	ldrh	r3, [r7, #6]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d101      	bne.n	800361c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e071      	b.n	8003700 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2221      	movs	r2, #33	; 0x21
 8003628:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800362a:	f7fd fc65 	bl	8000ef8 <HAL_GetTick>
 800362e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	88fa      	ldrh	r2, [r7, #6]
 8003634:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	88fa      	ldrh	r2, [r7, #6]
 800363c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003648:	d108      	bne.n	800365c <HAL_UART_Transmit+0x68>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d104      	bne.n	800365c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003652:	2300      	movs	r3, #0
 8003654:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	61bb      	str	r3, [r7, #24]
 800365a:	e003      	b.n	8003664 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003660:	2300      	movs	r3, #0
 8003662:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003664:	e030      	b.n	80036c8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	2200      	movs	r2, #0
 800366e:	2180      	movs	r1, #128	; 0x80
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f000 fac9 	bl	8003c08 <UART_WaitOnFlagUntilTimeout>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d004      	beq.n	8003686 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2220      	movs	r2, #32
 8003680:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e03c      	b.n	8003700 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d10b      	bne.n	80036a4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	881a      	ldrh	r2, [r3, #0]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003698:	b292      	uxth	r2, r2
 800369a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	3302      	adds	r3, #2
 80036a0:	61bb      	str	r3, [r7, #24]
 80036a2:	e008      	b.n	80036b6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	781a      	ldrb	r2, [r3, #0]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	b292      	uxth	r2, r2
 80036ae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	3301      	adds	r3, #1
 80036b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80036bc:	b29b      	uxth	r3, r3
 80036be:	3b01      	subs	r3, #1
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1c8      	bne.n	8003666 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	9300      	str	r3, [sp, #0]
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	2200      	movs	r2, #0
 80036dc:	2140      	movs	r1, #64	; 0x40
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f000 fa92 	bl	8003c08 <UART_WaitOnFlagUntilTimeout>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d004      	beq.n	80036f4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2220      	movs	r2, #32
 80036ee:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e005      	b.n	8003700 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2220      	movs	r2, #32
 80036f8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80036fa:	2300      	movs	r3, #0
 80036fc:	e000      	b.n	8003700 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80036fe:	2302      	movs	r3, #2
  }
}
 8003700:	4618      	mov	r0, r3
 8003702:	3720      	adds	r7, #32
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b088      	sub	sp, #32
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003710:	2300      	movs	r3, #0
 8003712:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689a      	ldr	r2, [r3, #8]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	431a      	orrs	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	431a      	orrs	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	69db      	ldr	r3, [r3, #28]
 8003728:	4313      	orrs	r3, r2
 800372a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	4b8a      	ldr	r3, [pc, #552]	; (800395c <UART_SetConfig+0x254>)
 8003734:	4013      	ands	r3, r2
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	6812      	ldr	r2, [r2, #0]
 800373a:	6979      	ldr	r1, [r7, #20]
 800373c:	430b      	orrs	r3, r1
 800373e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68da      	ldr	r2, [r3, #12]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	430a      	orrs	r2, r1
 8003754:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	697a      	ldr	r2, [r7, #20]
 8003762:	4313      	orrs	r3, r2
 8003764:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	430a      	orrs	r2, r1
 8003778:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a78      	ldr	r2, [pc, #480]	; (8003960 <UART_SetConfig+0x258>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d120      	bne.n	80037c6 <UART_SetConfig+0xbe>
 8003784:	4b77      	ldr	r3, [pc, #476]	; (8003964 <UART_SetConfig+0x25c>)
 8003786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003788:	f003 0303 	and.w	r3, r3, #3
 800378c:	2b03      	cmp	r3, #3
 800378e:	d817      	bhi.n	80037c0 <UART_SetConfig+0xb8>
 8003790:	a201      	add	r2, pc, #4	; (adr r2, 8003798 <UART_SetConfig+0x90>)
 8003792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003796:	bf00      	nop
 8003798:	080037a9 	.word	0x080037a9
 800379c:	080037b5 	.word	0x080037b5
 80037a0:	080037bb 	.word	0x080037bb
 80037a4:	080037af 	.word	0x080037af
 80037a8:	2300      	movs	r3, #0
 80037aa:	77fb      	strb	r3, [r7, #31]
 80037ac:	e01d      	b.n	80037ea <UART_SetConfig+0xe2>
 80037ae:	2302      	movs	r3, #2
 80037b0:	77fb      	strb	r3, [r7, #31]
 80037b2:	e01a      	b.n	80037ea <UART_SetConfig+0xe2>
 80037b4:	2304      	movs	r3, #4
 80037b6:	77fb      	strb	r3, [r7, #31]
 80037b8:	e017      	b.n	80037ea <UART_SetConfig+0xe2>
 80037ba:	2308      	movs	r3, #8
 80037bc:	77fb      	strb	r3, [r7, #31]
 80037be:	e014      	b.n	80037ea <UART_SetConfig+0xe2>
 80037c0:	2310      	movs	r3, #16
 80037c2:	77fb      	strb	r3, [r7, #31]
 80037c4:	e011      	b.n	80037ea <UART_SetConfig+0xe2>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a67      	ldr	r2, [pc, #412]	; (8003968 <UART_SetConfig+0x260>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d102      	bne.n	80037d6 <UART_SetConfig+0xce>
 80037d0:	2300      	movs	r3, #0
 80037d2:	77fb      	strb	r3, [r7, #31]
 80037d4:	e009      	b.n	80037ea <UART_SetConfig+0xe2>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a64      	ldr	r2, [pc, #400]	; (800396c <UART_SetConfig+0x264>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d102      	bne.n	80037e6 <UART_SetConfig+0xde>
 80037e0:	2300      	movs	r3, #0
 80037e2:	77fb      	strb	r3, [r7, #31]
 80037e4:	e001      	b.n	80037ea <UART_SetConfig+0xe2>
 80037e6:	2310      	movs	r3, #16
 80037e8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037f2:	d15a      	bne.n	80038aa <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80037f4:	7ffb      	ldrb	r3, [r7, #31]
 80037f6:	2b08      	cmp	r3, #8
 80037f8:	d827      	bhi.n	800384a <UART_SetConfig+0x142>
 80037fa:	a201      	add	r2, pc, #4	; (adr r2, 8003800 <UART_SetConfig+0xf8>)
 80037fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003800:	08003825 	.word	0x08003825
 8003804:	0800382d 	.word	0x0800382d
 8003808:	08003835 	.word	0x08003835
 800380c:	0800384b 	.word	0x0800384b
 8003810:	0800383b 	.word	0x0800383b
 8003814:	0800384b 	.word	0x0800384b
 8003818:	0800384b 	.word	0x0800384b
 800381c:	0800384b 	.word	0x0800384b
 8003820:	08003843 	.word	0x08003843
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003824:	f7fe ff1e 	bl	8002664 <HAL_RCC_GetPCLK1Freq>
 8003828:	61b8      	str	r0, [r7, #24]
        break;
 800382a:	e013      	b.n	8003854 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800382c:	f7fe ff3c 	bl	80026a8 <HAL_RCC_GetPCLK2Freq>
 8003830:	61b8      	str	r0, [r7, #24]
        break;
 8003832:	e00f      	b.n	8003854 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003834:	4b4e      	ldr	r3, [pc, #312]	; (8003970 <UART_SetConfig+0x268>)
 8003836:	61bb      	str	r3, [r7, #24]
        break;
 8003838:	e00c      	b.n	8003854 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800383a:	f7fe fe9b 	bl	8002574 <HAL_RCC_GetSysClockFreq>
 800383e:	61b8      	str	r0, [r7, #24]
        break;
 8003840:	e008      	b.n	8003854 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003842:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003846:	61bb      	str	r3, [r7, #24]
        break;
 8003848:	e004      	b.n	8003854 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800384a:	2300      	movs	r3, #0
 800384c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	77bb      	strb	r3, [r7, #30]
        break;
 8003852:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d074      	beq.n	8003944 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	005a      	lsls	r2, r3, #1
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	085b      	lsrs	r3, r3, #1
 8003864:	441a      	add	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	fbb2 f3f3 	udiv	r3, r2, r3
 800386e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	2b0f      	cmp	r3, #15
 8003874:	d916      	bls.n	80038a4 <UART_SetConfig+0x19c>
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800387c:	d212      	bcs.n	80038a4 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	b29b      	uxth	r3, r3
 8003882:	f023 030f 	bic.w	r3, r3, #15
 8003886:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	085b      	lsrs	r3, r3, #1
 800388c:	b29b      	uxth	r3, r3
 800388e:	f003 0307 	and.w	r3, r3, #7
 8003892:	b29a      	uxth	r2, r3
 8003894:	89fb      	ldrh	r3, [r7, #14]
 8003896:	4313      	orrs	r3, r2
 8003898:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	89fa      	ldrh	r2, [r7, #14]
 80038a0:	60da      	str	r2, [r3, #12]
 80038a2:	e04f      	b.n	8003944 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	77bb      	strb	r3, [r7, #30]
 80038a8:	e04c      	b.n	8003944 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80038aa:	7ffb      	ldrb	r3, [r7, #31]
 80038ac:	2b08      	cmp	r3, #8
 80038ae:	d828      	bhi.n	8003902 <UART_SetConfig+0x1fa>
 80038b0:	a201      	add	r2, pc, #4	; (adr r2, 80038b8 <UART_SetConfig+0x1b0>)
 80038b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b6:	bf00      	nop
 80038b8:	080038dd 	.word	0x080038dd
 80038bc:	080038e5 	.word	0x080038e5
 80038c0:	080038ed 	.word	0x080038ed
 80038c4:	08003903 	.word	0x08003903
 80038c8:	080038f3 	.word	0x080038f3
 80038cc:	08003903 	.word	0x08003903
 80038d0:	08003903 	.word	0x08003903
 80038d4:	08003903 	.word	0x08003903
 80038d8:	080038fb 	.word	0x080038fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038dc:	f7fe fec2 	bl	8002664 <HAL_RCC_GetPCLK1Freq>
 80038e0:	61b8      	str	r0, [r7, #24]
        break;
 80038e2:	e013      	b.n	800390c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038e4:	f7fe fee0 	bl	80026a8 <HAL_RCC_GetPCLK2Freq>
 80038e8:	61b8      	str	r0, [r7, #24]
        break;
 80038ea:	e00f      	b.n	800390c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038ec:	4b20      	ldr	r3, [pc, #128]	; (8003970 <UART_SetConfig+0x268>)
 80038ee:	61bb      	str	r3, [r7, #24]
        break;
 80038f0:	e00c      	b.n	800390c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038f2:	f7fe fe3f 	bl	8002574 <HAL_RCC_GetSysClockFreq>
 80038f6:	61b8      	str	r0, [r7, #24]
        break;
 80038f8:	e008      	b.n	800390c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038fe:	61bb      	str	r3, [r7, #24]
        break;
 8003900:	e004      	b.n	800390c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003902:	2300      	movs	r3, #0
 8003904:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	77bb      	strb	r3, [r7, #30]
        break;
 800390a:	bf00      	nop
    }

    if (pclk != 0U)
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d018      	beq.n	8003944 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	085a      	lsrs	r2, r3, #1
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	441a      	add	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	fbb2 f3f3 	udiv	r3, r2, r3
 8003924:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	2b0f      	cmp	r3, #15
 800392a:	d909      	bls.n	8003940 <UART_SetConfig+0x238>
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003932:	d205      	bcs.n	8003940 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	b29a      	uxth	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	60da      	str	r2, [r3, #12]
 800393e:	e001      	b.n	8003944 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003950:	7fbb      	ldrb	r3, [r7, #30]
}
 8003952:	4618      	mov	r0, r3
 8003954:	3720      	adds	r7, #32
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	efff69f3 	.word	0xefff69f3
 8003960:	40013800 	.word	0x40013800
 8003964:	40021000 	.word	0x40021000
 8003968:	40004400 	.word	0x40004400
 800396c:	40004800 	.word	0x40004800
 8003970:	007a1200 	.word	0x007a1200

08003974 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00a      	beq.n	800399e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00a      	beq.n	80039c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	430a      	orrs	r2, r1
 80039be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00a      	beq.n	80039e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	430a      	orrs	r2, r1
 80039e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e6:	f003 0308 	and.w	r3, r3, #8
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00a      	beq.n	8003a04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	430a      	orrs	r2, r1
 8003a02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a08:	f003 0310 	and.w	r3, r3, #16
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00a      	beq.n	8003a26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	430a      	orrs	r2, r1
 8003a24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2a:	f003 0320 	and.w	r3, r3, #32
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00a      	beq.n	8003a48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	430a      	orrs	r2, r1
 8003a46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d01a      	beq.n	8003a8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	430a      	orrs	r2, r1
 8003a68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a72:	d10a      	bne.n	8003a8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00a      	beq.n	8003aac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	605a      	str	r2, [r3, #4]
  }
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b098      	sub	sp, #96	; 0x60
 8003abc:	af02      	add	r7, sp, #8
 8003abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ac8:	f7fd fa16 	bl	8000ef8 <HAL_GetTick>
 8003acc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0308 	and.w	r3, r3, #8
 8003ad8:	2b08      	cmp	r3, #8
 8003ada:	d12e      	bne.n	8003b3a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003adc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ae0:	9300      	str	r3, [sp, #0]
 8003ae2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 f88c 	bl	8003c08 <UART_WaitOnFlagUntilTimeout>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d021      	beq.n	8003b3a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003afe:	e853 3f00 	ldrex	r3, [r3]
 8003b02:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b0a:	653b      	str	r3, [r7, #80]	; 0x50
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	461a      	mov	r2, r3
 8003b12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b14:	647b      	str	r3, [r7, #68]	; 0x44
 8003b16:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b18:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b1c:	e841 2300 	strex	r3, r2, [r1]
 8003b20:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1e6      	bne.n	8003af6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e062      	b.n	8003c00 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0304 	and.w	r3, r3, #4
 8003b44:	2b04      	cmp	r3, #4
 8003b46:	d149      	bne.n	8003bdc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b4c:	9300      	str	r3, [sp, #0]
 8003b4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b50:	2200      	movs	r2, #0
 8003b52:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f856 	bl	8003c08 <UART_WaitOnFlagUntilTimeout>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d03c      	beq.n	8003bdc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6a:	e853 3f00 	ldrex	r3, [r3]
 8003b6e:	623b      	str	r3, [r7, #32]
   return(result);
 8003b70:	6a3b      	ldr	r3, [r7, #32]
 8003b72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b80:	633b      	str	r3, [r7, #48]	; 0x30
 8003b82:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b88:	e841 2300 	strex	r3, r2, [r1]
 8003b8c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1e6      	bne.n	8003b62 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	3308      	adds	r3, #8
 8003b9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	e853 3f00 	ldrex	r3, [r3]
 8003ba2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f023 0301 	bic.w	r3, r3, #1
 8003baa:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	3308      	adds	r3, #8
 8003bb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bb4:	61fa      	str	r2, [r7, #28]
 8003bb6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb8:	69b9      	ldr	r1, [r7, #24]
 8003bba:	69fa      	ldr	r2, [r7, #28]
 8003bbc:	e841 2300 	strex	r3, r2, [r1]
 8003bc0:	617b      	str	r3, [r7, #20]
   return(result);
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1e5      	bne.n	8003b94 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2220      	movs	r2, #32
 8003bcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e011      	b.n	8003c00 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2220      	movs	r2, #32
 8003be0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2220      	movs	r2, #32
 8003be6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3758      	adds	r7, #88	; 0x58
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	603b      	str	r3, [r7, #0]
 8003c14:	4613      	mov	r3, r2
 8003c16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c18:	e049      	b.n	8003cae <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c20:	d045      	beq.n	8003cae <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c22:	f7fd f969 	bl	8000ef8 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d302      	bcc.n	8003c38 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d101      	bne.n	8003c3c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e048      	b.n	8003cce <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0304 	and.w	r3, r3, #4
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d031      	beq.n	8003cae <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	69db      	ldr	r3, [r3, #28]
 8003c50:	f003 0308 	and.w	r3, r3, #8
 8003c54:	2b08      	cmp	r3, #8
 8003c56:	d110      	bne.n	8003c7a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2208      	movs	r2, #8
 8003c5e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	f000 f838 	bl	8003cd6 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2208      	movs	r2, #8
 8003c6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e029      	b.n	8003cce <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	69db      	ldr	r3, [r3, #28]
 8003c80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c88:	d111      	bne.n	8003cae <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f000 f81e 	bl	8003cd6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2220      	movs	r2, #32
 8003c9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e00f      	b.n	8003cce <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	69da      	ldr	r2, [r3, #28]
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	68ba      	ldr	r2, [r7, #8]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	bf0c      	ite	eq
 8003cbe:	2301      	moveq	r3, #1
 8003cc0:	2300      	movne	r3, #0
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	79fb      	ldrb	r3, [r7, #7]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d0a6      	beq.n	8003c1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b095      	sub	sp, #84	; 0x54
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ce6:	e853 3f00 	ldrex	r3, [r3]
 8003cea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cfc:	643b      	str	r3, [r7, #64]	; 0x40
 8003cfe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d04:	e841 2300 	strex	r3, r2, [r1]
 8003d08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1e6      	bne.n	8003cde <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	3308      	adds	r3, #8
 8003d16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d18:	6a3b      	ldr	r3, [r7, #32]
 8003d1a:	e853 3f00 	ldrex	r3, [r3]
 8003d1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	f023 0301 	bic.w	r3, r3, #1
 8003d26:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	3308      	adds	r3, #8
 8003d2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d30:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d38:	e841 2300 	strex	r3, r2, [r1]
 8003d3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1e5      	bne.n	8003d10 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d118      	bne.n	8003d7e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	e853 3f00 	ldrex	r3, [r3]
 8003d58:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	f023 0310 	bic.w	r3, r3, #16
 8003d60:	647b      	str	r3, [r7, #68]	; 0x44
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	461a      	mov	r2, r3
 8003d68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d6a:	61bb      	str	r3, [r7, #24]
 8003d6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6e:	6979      	ldr	r1, [r7, #20]
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	e841 2300 	strex	r3, r2, [r1]
 8003d76:	613b      	str	r3, [r7, #16]
   return(result);
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1e6      	bne.n	8003d4c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2220      	movs	r2, #32
 8003d82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003d92:	bf00      	nop
 8003d94:	3754      	adds	r7, #84	; 0x54
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
	...

08003da0 <__errno>:
 8003da0:	4b01      	ldr	r3, [pc, #4]	; (8003da8 <__errno+0x8>)
 8003da2:	6818      	ldr	r0, [r3, #0]
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	20000014 	.word	0x20000014

08003dac <__libc_init_array>:
 8003dac:	b570      	push	{r4, r5, r6, lr}
 8003dae:	4d0d      	ldr	r5, [pc, #52]	; (8003de4 <__libc_init_array+0x38>)
 8003db0:	4c0d      	ldr	r4, [pc, #52]	; (8003de8 <__libc_init_array+0x3c>)
 8003db2:	1b64      	subs	r4, r4, r5
 8003db4:	10a4      	asrs	r4, r4, #2
 8003db6:	2600      	movs	r6, #0
 8003db8:	42a6      	cmp	r6, r4
 8003dba:	d109      	bne.n	8003dd0 <__libc_init_array+0x24>
 8003dbc:	4d0b      	ldr	r5, [pc, #44]	; (8003dec <__libc_init_array+0x40>)
 8003dbe:	4c0c      	ldr	r4, [pc, #48]	; (8003df0 <__libc_init_array+0x44>)
 8003dc0:	f000 ff76 	bl	8004cb0 <_init>
 8003dc4:	1b64      	subs	r4, r4, r5
 8003dc6:	10a4      	asrs	r4, r4, #2
 8003dc8:	2600      	movs	r6, #0
 8003dca:	42a6      	cmp	r6, r4
 8003dcc:	d105      	bne.n	8003dda <__libc_init_array+0x2e>
 8003dce:	bd70      	pop	{r4, r5, r6, pc}
 8003dd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dd4:	4798      	blx	r3
 8003dd6:	3601      	adds	r6, #1
 8003dd8:	e7ee      	b.n	8003db8 <__libc_init_array+0xc>
 8003dda:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dde:	4798      	blx	r3
 8003de0:	3601      	adds	r6, #1
 8003de2:	e7f2      	b.n	8003dca <__libc_init_array+0x1e>
 8003de4:	08004db0 	.word	0x08004db0
 8003de8:	08004db0 	.word	0x08004db0
 8003dec:	08004db0 	.word	0x08004db0
 8003df0:	08004db4 	.word	0x08004db4

08003df4 <memset>:
 8003df4:	4402      	add	r2, r0
 8003df6:	4603      	mov	r3, r0
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d100      	bne.n	8003dfe <memset+0xa>
 8003dfc:	4770      	bx	lr
 8003dfe:	f803 1b01 	strb.w	r1, [r3], #1
 8003e02:	e7f9      	b.n	8003df8 <memset+0x4>

08003e04 <iprintf>:
 8003e04:	b40f      	push	{r0, r1, r2, r3}
 8003e06:	4b0a      	ldr	r3, [pc, #40]	; (8003e30 <iprintf+0x2c>)
 8003e08:	b513      	push	{r0, r1, r4, lr}
 8003e0a:	681c      	ldr	r4, [r3, #0]
 8003e0c:	b124      	cbz	r4, 8003e18 <iprintf+0x14>
 8003e0e:	69a3      	ldr	r3, [r4, #24]
 8003e10:	b913      	cbnz	r3, 8003e18 <iprintf+0x14>
 8003e12:	4620      	mov	r0, r4
 8003e14:	f000 f866 	bl	8003ee4 <__sinit>
 8003e18:	ab05      	add	r3, sp, #20
 8003e1a:	9a04      	ldr	r2, [sp, #16]
 8003e1c:	68a1      	ldr	r1, [r4, #8]
 8003e1e:	9301      	str	r3, [sp, #4]
 8003e20:	4620      	mov	r0, r4
 8003e22:	f000 f983 	bl	800412c <_vfiprintf_r>
 8003e26:	b002      	add	sp, #8
 8003e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e2c:	b004      	add	sp, #16
 8003e2e:	4770      	bx	lr
 8003e30:	20000014 	.word	0x20000014

08003e34 <std>:
 8003e34:	2300      	movs	r3, #0
 8003e36:	b510      	push	{r4, lr}
 8003e38:	4604      	mov	r4, r0
 8003e3a:	e9c0 3300 	strd	r3, r3, [r0]
 8003e3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003e42:	6083      	str	r3, [r0, #8]
 8003e44:	8181      	strh	r1, [r0, #12]
 8003e46:	6643      	str	r3, [r0, #100]	; 0x64
 8003e48:	81c2      	strh	r2, [r0, #14]
 8003e4a:	6183      	str	r3, [r0, #24]
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	2208      	movs	r2, #8
 8003e50:	305c      	adds	r0, #92	; 0x5c
 8003e52:	f7ff ffcf 	bl	8003df4 <memset>
 8003e56:	4b05      	ldr	r3, [pc, #20]	; (8003e6c <std+0x38>)
 8003e58:	6263      	str	r3, [r4, #36]	; 0x24
 8003e5a:	4b05      	ldr	r3, [pc, #20]	; (8003e70 <std+0x3c>)
 8003e5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8003e5e:	4b05      	ldr	r3, [pc, #20]	; (8003e74 <std+0x40>)
 8003e60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003e62:	4b05      	ldr	r3, [pc, #20]	; (8003e78 <std+0x44>)
 8003e64:	6224      	str	r4, [r4, #32]
 8003e66:	6323      	str	r3, [r4, #48]	; 0x30
 8003e68:	bd10      	pop	{r4, pc}
 8003e6a:	bf00      	nop
 8003e6c:	080046d5 	.word	0x080046d5
 8003e70:	080046f7 	.word	0x080046f7
 8003e74:	0800472f 	.word	0x0800472f
 8003e78:	08004753 	.word	0x08004753

08003e7c <_cleanup_r>:
 8003e7c:	4901      	ldr	r1, [pc, #4]	; (8003e84 <_cleanup_r+0x8>)
 8003e7e:	f000 b8af 	b.w	8003fe0 <_fwalk_reent>
 8003e82:	bf00      	nop
 8003e84:	08004a2d 	.word	0x08004a2d

08003e88 <__sfmoreglue>:
 8003e88:	b570      	push	{r4, r5, r6, lr}
 8003e8a:	1e4a      	subs	r2, r1, #1
 8003e8c:	2568      	movs	r5, #104	; 0x68
 8003e8e:	4355      	muls	r5, r2
 8003e90:	460e      	mov	r6, r1
 8003e92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003e96:	f000 f8c5 	bl	8004024 <_malloc_r>
 8003e9a:	4604      	mov	r4, r0
 8003e9c:	b140      	cbz	r0, 8003eb0 <__sfmoreglue+0x28>
 8003e9e:	2100      	movs	r1, #0
 8003ea0:	e9c0 1600 	strd	r1, r6, [r0]
 8003ea4:	300c      	adds	r0, #12
 8003ea6:	60a0      	str	r0, [r4, #8]
 8003ea8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003eac:	f7ff ffa2 	bl	8003df4 <memset>
 8003eb0:	4620      	mov	r0, r4
 8003eb2:	bd70      	pop	{r4, r5, r6, pc}

08003eb4 <__sfp_lock_acquire>:
 8003eb4:	4801      	ldr	r0, [pc, #4]	; (8003ebc <__sfp_lock_acquire+0x8>)
 8003eb6:	f000 b8b3 	b.w	8004020 <__retarget_lock_acquire_recursive>
 8003eba:	bf00      	nop
 8003ebc:	200001ec 	.word	0x200001ec

08003ec0 <__sfp_lock_release>:
 8003ec0:	4801      	ldr	r0, [pc, #4]	; (8003ec8 <__sfp_lock_release+0x8>)
 8003ec2:	f000 b8ae 	b.w	8004022 <__retarget_lock_release_recursive>
 8003ec6:	bf00      	nop
 8003ec8:	200001ec 	.word	0x200001ec

08003ecc <__sinit_lock_acquire>:
 8003ecc:	4801      	ldr	r0, [pc, #4]	; (8003ed4 <__sinit_lock_acquire+0x8>)
 8003ece:	f000 b8a7 	b.w	8004020 <__retarget_lock_acquire_recursive>
 8003ed2:	bf00      	nop
 8003ed4:	200001e7 	.word	0x200001e7

08003ed8 <__sinit_lock_release>:
 8003ed8:	4801      	ldr	r0, [pc, #4]	; (8003ee0 <__sinit_lock_release+0x8>)
 8003eda:	f000 b8a2 	b.w	8004022 <__retarget_lock_release_recursive>
 8003ede:	bf00      	nop
 8003ee0:	200001e7 	.word	0x200001e7

08003ee4 <__sinit>:
 8003ee4:	b510      	push	{r4, lr}
 8003ee6:	4604      	mov	r4, r0
 8003ee8:	f7ff fff0 	bl	8003ecc <__sinit_lock_acquire>
 8003eec:	69a3      	ldr	r3, [r4, #24]
 8003eee:	b11b      	cbz	r3, 8003ef8 <__sinit+0x14>
 8003ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ef4:	f7ff bff0 	b.w	8003ed8 <__sinit_lock_release>
 8003ef8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003efc:	6523      	str	r3, [r4, #80]	; 0x50
 8003efe:	4b13      	ldr	r3, [pc, #76]	; (8003f4c <__sinit+0x68>)
 8003f00:	4a13      	ldr	r2, [pc, #76]	; (8003f50 <__sinit+0x6c>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	62a2      	str	r2, [r4, #40]	; 0x28
 8003f06:	42a3      	cmp	r3, r4
 8003f08:	bf04      	itt	eq
 8003f0a:	2301      	moveq	r3, #1
 8003f0c:	61a3      	streq	r3, [r4, #24]
 8003f0e:	4620      	mov	r0, r4
 8003f10:	f000 f820 	bl	8003f54 <__sfp>
 8003f14:	6060      	str	r0, [r4, #4]
 8003f16:	4620      	mov	r0, r4
 8003f18:	f000 f81c 	bl	8003f54 <__sfp>
 8003f1c:	60a0      	str	r0, [r4, #8]
 8003f1e:	4620      	mov	r0, r4
 8003f20:	f000 f818 	bl	8003f54 <__sfp>
 8003f24:	2200      	movs	r2, #0
 8003f26:	60e0      	str	r0, [r4, #12]
 8003f28:	2104      	movs	r1, #4
 8003f2a:	6860      	ldr	r0, [r4, #4]
 8003f2c:	f7ff ff82 	bl	8003e34 <std>
 8003f30:	68a0      	ldr	r0, [r4, #8]
 8003f32:	2201      	movs	r2, #1
 8003f34:	2109      	movs	r1, #9
 8003f36:	f7ff ff7d 	bl	8003e34 <std>
 8003f3a:	68e0      	ldr	r0, [r4, #12]
 8003f3c:	2202      	movs	r2, #2
 8003f3e:	2112      	movs	r1, #18
 8003f40:	f7ff ff78 	bl	8003e34 <std>
 8003f44:	2301      	movs	r3, #1
 8003f46:	61a3      	str	r3, [r4, #24]
 8003f48:	e7d2      	b.n	8003ef0 <__sinit+0xc>
 8003f4a:	bf00      	nop
 8003f4c:	08004d18 	.word	0x08004d18
 8003f50:	08003e7d 	.word	0x08003e7d

08003f54 <__sfp>:
 8003f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f56:	4607      	mov	r7, r0
 8003f58:	f7ff ffac 	bl	8003eb4 <__sfp_lock_acquire>
 8003f5c:	4b1e      	ldr	r3, [pc, #120]	; (8003fd8 <__sfp+0x84>)
 8003f5e:	681e      	ldr	r6, [r3, #0]
 8003f60:	69b3      	ldr	r3, [r6, #24]
 8003f62:	b913      	cbnz	r3, 8003f6a <__sfp+0x16>
 8003f64:	4630      	mov	r0, r6
 8003f66:	f7ff ffbd 	bl	8003ee4 <__sinit>
 8003f6a:	3648      	adds	r6, #72	; 0x48
 8003f6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003f70:	3b01      	subs	r3, #1
 8003f72:	d503      	bpl.n	8003f7c <__sfp+0x28>
 8003f74:	6833      	ldr	r3, [r6, #0]
 8003f76:	b30b      	cbz	r3, 8003fbc <__sfp+0x68>
 8003f78:	6836      	ldr	r6, [r6, #0]
 8003f7a:	e7f7      	b.n	8003f6c <__sfp+0x18>
 8003f7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003f80:	b9d5      	cbnz	r5, 8003fb8 <__sfp+0x64>
 8003f82:	4b16      	ldr	r3, [pc, #88]	; (8003fdc <__sfp+0x88>)
 8003f84:	60e3      	str	r3, [r4, #12]
 8003f86:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003f8a:	6665      	str	r5, [r4, #100]	; 0x64
 8003f8c:	f000 f847 	bl	800401e <__retarget_lock_init_recursive>
 8003f90:	f7ff ff96 	bl	8003ec0 <__sfp_lock_release>
 8003f94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003f98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003f9c:	6025      	str	r5, [r4, #0]
 8003f9e:	61a5      	str	r5, [r4, #24]
 8003fa0:	2208      	movs	r2, #8
 8003fa2:	4629      	mov	r1, r5
 8003fa4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003fa8:	f7ff ff24 	bl	8003df4 <memset>
 8003fac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003fb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003fb4:	4620      	mov	r0, r4
 8003fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fb8:	3468      	adds	r4, #104	; 0x68
 8003fba:	e7d9      	b.n	8003f70 <__sfp+0x1c>
 8003fbc:	2104      	movs	r1, #4
 8003fbe:	4638      	mov	r0, r7
 8003fc0:	f7ff ff62 	bl	8003e88 <__sfmoreglue>
 8003fc4:	4604      	mov	r4, r0
 8003fc6:	6030      	str	r0, [r6, #0]
 8003fc8:	2800      	cmp	r0, #0
 8003fca:	d1d5      	bne.n	8003f78 <__sfp+0x24>
 8003fcc:	f7ff ff78 	bl	8003ec0 <__sfp_lock_release>
 8003fd0:	230c      	movs	r3, #12
 8003fd2:	603b      	str	r3, [r7, #0]
 8003fd4:	e7ee      	b.n	8003fb4 <__sfp+0x60>
 8003fd6:	bf00      	nop
 8003fd8:	08004d18 	.word	0x08004d18
 8003fdc:	ffff0001 	.word	0xffff0001

08003fe0 <_fwalk_reent>:
 8003fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fe4:	4606      	mov	r6, r0
 8003fe6:	4688      	mov	r8, r1
 8003fe8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003fec:	2700      	movs	r7, #0
 8003fee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ff2:	f1b9 0901 	subs.w	r9, r9, #1
 8003ff6:	d505      	bpl.n	8004004 <_fwalk_reent+0x24>
 8003ff8:	6824      	ldr	r4, [r4, #0]
 8003ffa:	2c00      	cmp	r4, #0
 8003ffc:	d1f7      	bne.n	8003fee <_fwalk_reent+0xe>
 8003ffe:	4638      	mov	r0, r7
 8004000:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004004:	89ab      	ldrh	r3, [r5, #12]
 8004006:	2b01      	cmp	r3, #1
 8004008:	d907      	bls.n	800401a <_fwalk_reent+0x3a>
 800400a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800400e:	3301      	adds	r3, #1
 8004010:	d003      	beq.n	800401a <_fwalk_reent+0x3a>
 8004012:	4629      	mov	r1, r5
 8004014:	4630      	mov	r0, r6
 8004016:	47c0      	blx	r8
 8004018:	4307      	orrs	r7, r0
 800401a:	3568      	adds	r5, #104	; 0x68
 800401c:	e7e9      	b.n	8003ff2 <_fwalk_reent+0x12>

0800401e <__retarget_lock_init_recursive>:
 800401e:	4770      	bx	lr

08004020 <__retarget_lock_acquire_recursive>:
 8004020:	4770      	bx	lr

08004022 <__retarget_lock_release_recursive>:
 8004022:	4770      	bx	lr

08004024 <_malloc_r>:
 8004024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004026:	1ccd      	adds	r5, r1, #3
 8004028:	f025 0503 	bic.w	r5, r5, #3
 800402c:	3508      	adds	r5, #8
 800402e:	2d0c      	cmp	r5, #12
 8004030:	bf38      	it	cc
 8004032:	250c      	movcc	r5, #12
 8004034:	2d00      	cmp	r5, #0
 8004036:	4606      	mov	r6, r0
 8004038:	db01      	blt.n	800403e <_malloc_r+0x1a>
 800403a:	42a9      	cmp	r1, r5
 800403c:	d903      	bls.n	8004046 <_malloc_r+0x22>
 800403e:	230c      	movs	r3, #12
 8004040:	6033      	str	r3, [r6, #0]
 8004042:	2000      	movs	r0, #0
 8004044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004046:	f000 fda3 	bl	8004b90 <__malloc_lock>
 800404a:	4921      	ldr	r1, [pc, #132]	; (80040d0 <_malloc_r+0xac>)
 800404c:	680a      	ldr	r2, [r1, #0]
 800404e:	4614      	mov	r4, r2
 8004050:	b99c      	cbnz	r4, 800407a <_malloc_r+0x56>
 8004052:	4f20      	ldr	r7, [pc, #128]	; (80040d4 <_malloc_r+0xb0>)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	b923      	cbnz	r3, 8004062 <_malloc_r+0x3e>
 8004058:	4621      	mov	r1, r4
 800405a:	4630      	mov	r0, r6
 800405c:	f000 fb2a 	bl	80046b4 <_sbrk_r>
 8004060:	6038      	str	r0, [r7, #0]
 8004062:	4629      	mov	r1, r5
 8004064:	4630      	mov	r0, r6
 8004066:	f000 fb25 	bl	80046b4 <_sbrk_r>
 800406a:	1c43      	adds	r3, r0, #1
 800406c:	d123      	bne.n	80040b6 <_malloc_r+0x92>
 800406e:	230c      	movs	r3, #12
 8004070:	6033      	str	r3, [r6, #0]
 8004072:	4630      	mov	r0, r6
 8004074:	f000 fd92 	bl	8004b9c <__malloc_unlock>
 8004078:	e7e3      	b.n	8004042 <_malloc_r+0x1e>
 800407a:	6823      	ldr	r3, [r4, #0]
 800407c:	1b5b      	subs	r3, r3, r5
 800407e:	d417      	bmi.n	80040b0 <_malloc_r+0x8c>
 8004080:	2b0b      	cmp	r3, #11
 8004082:	d903      	bls.n	800408c <_malloc_r+0x68>
 8004084:	6023      	str	r3, [r4, #0]
 8004086:	441c      	add	r4, r3
 8004088:	6025      	str	r5, [r4, #0]
 800408a:	e004      	b.n	8004096 <_malloc_r+0x72>
 800408c:	6863      	ldr	r3, [r4, #4]
 800408e:	42a2      	cmp	r2, r4
 8004090:	bf0c      	ite	eq
 8004092:	600b      	streq	r3, [r1, #0]
 8004094:	6053      	strne	r3, [r2, #4]
 8004096:	4630      	mov	r0, r6
 8004098:	f000 fd80 	bl	8004b9c <__malloc_unlock>
 800409c:	f104 000b 	add.w	r0, r4, #11
 80040a0:	1d23      	adds	r3, r4, #4
 80040a2:	f020 0007 	bic.w	r0, r0, #7
 80040a6:	1ac2      	subs	r2, r0, r3
 80040a8:	d0cc      	beq.n	8004044 <_malloc_r+0x20>
 80040aa:	1a1b      	subs	r3, r3, r0
 80040ac:	50a3      	str	r3, [r4, r2]
 80040ae:	e7c9      	b.n	8004044 <_malloc_r+0x20>
 80040b0:	4622      	mov	r2, r4
 80040b2:	6864      	ldr	r4, [r4, #4]
 80040b4:	e7cc      	b.n	8004050 <_malloc_r+0x2c>
 80040b6:	1cc4      	adds	r4, r0, #3
 80040b8:	f024 0403 	bic.w	r4, r4, #3
 80040bc:	42a0      	cmp	r0, r4
 80040be:	d0e3      	beq.n	8004088 <_malloc_r+0x64>
 80040c0:	1a21      	subs	r1, r4, r0
 80040c2:	4630      	mov	r0, r6
 80040c4:	f000 faf6 	bl	80046b4 <_sbrk_r>
 80040c8:	3001      	adds	r0, #1
 80040ca:	d1dd      	bne.n	8004088 <_malloc_r+0x64>
 80040cc:	e7cf      	b.n	800406e <_malloc_r+0x4a>
 80040ce:	bf00      	nop
 80040d0:	20000098 	.word	0x20000098
 80040d4:	2000009c 	.word	0x2000009c

080040d8 <__sfputc_r>:
 80040d8:	6893      	ldr	r3, [r2, #8]
 80040da:	3b01      	subs	r3, #1
 80040dc:	2b00      	cmp	r3, #0
 80040de:	b410      	push	{r4}
 80040e0:	6093      	str	r3, [r2, #8]
 80040e2:	da08      	bge.n	80040f6 <__sfputc_r+0x1e>
 80040e4:	6994      	ldr	r4, [r2, #24]
 80040e6:	42a3      	cmp	r3, r4
 80040e8:	db01      	blt.n	80040ee <__sfputc_r+0x16>
 80040ea:	290a      	cmp	r1, #10
 80040ec:	d103      	bne.n	80040f6 <__sfputc_r+0x1e>
 80040ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80040f2:	f000 bb33 	b.w	800475c <__swbuf_r>
 80040f6:	6813      	ldr	r3, [r2, #0]
 80040f8:	1c58      	adds	r0, r3, #1
 80040fa:	6010      	str	r0, [r2, #0]
 80040fc:	7019      	strb	r1, [r3, #0]
 80040fe:	4608      	mov	r0, r1
 8004100:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004104:	4770      	bx	lr

08004106 <__sfputs_r>:
 8004106:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004108:	4606      	mov	r6, r0
 800410a:	460f      	mov	r7, r1
 800410c:	4614      	mov	r4, r2
 800410e:	18d5      	adds	r5, r2, r3
 8004110:	42ac      	cmp	r4, r5
 8004112:	d101      	bne.n	8004118 <__sfputs_r+0x12>
 8004114:	2000      	movs	r0, #0
 8004116:	e007      	b.n	8004128 <__sfputs_r+0x22>
 8004118:	f814 1b01 	ldrb.w	r1, [r4], #1
 800411c:	463a      	mov	r2, r7
 800411e:	4630      	mov	r0, r6
 8004120:	f7ff ffda 	bl	80040d8 <__sfputc_r>
 8004124:	1c43      	adds	r3, r0, #1
 8004126:	d1f3      	bne.n	8004110 <__sfputs_r+0xa>
 8004128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800412c <_vfiprintf_r>:
 800412c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004130:	460d      	mov	r5, r1
 8004132:	b09d      	sub	sp, #116	; 0x74
 8004134:	4614      	mov	r4, r2
 8004136:	4698      	mov	r8, r3
 8004138:	4606      	mov	r6, r0
 800413a:	b118      	cbz	r0, 8004144 <_vfiprintf_r+0x18>
 800413c:	6983      	ldr	r3, [r0, #24]
 800413e:	b90b      	cbnz	r3, 8004144 <_vfiprintf_r+0x18>
 8004140:	f7ff fed0 	bl	8003ee4 <__sinit>
 8004144:	4b89      	ldr	r3, [pc, #548]	; (800436c <_vfiprintf_r+0x240>)
 8004146:	429d      	cmp	r5, r3
 8004148:	d11b      	bne.n	8004182 <_vfiprintf_r+0x56>
 800414a:	6875      	ldr	r5, [r6, #4]
 800414c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800414e:	07d9      	lsls	r1, r3, #31
 8004150:	d405      	bmi.n	800415e <_vfiprintf_r+0x32>
 8004152:	89ab      	ldrh	r3, [r5, #12]
 8004154:	059a      	lsls	r2, r3, #22
 8004156:	d402      	bmi.n	800415e <_vfiprintf_r+0x32>
 8004158:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800415a:	f7ff ff61 	bl	8004020 <__retarget_lock_acquire_recursive>
 800415e:	89ab      	ldrh	r3, [r5, #12]
 8004160:	071b      	lsls	r3, r3, #28
 8004162:	d501      	bpl.n	8004168 <_vfiprintf_r+0x3c>
 8004164:	692b      	ldr	r3, [r5, #16]
 8004166:	b9eb      	cbnz	r3, 80041a4 <_vfiprintf_r+0x78>
 8004168:	4629      	mov	r1, r5
 800416a:	4630      	mov	r0, r6
 800416c:	f000 fb5a 	bl	8004824 <__swsetup_r>
 8004170:	b1c0      	cbz	r0, 80041a4 <_vfiprintf_r+0x78>
 8004172:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004174:	07dc      	lsls	r4, r3, #31
 8004176:	d50e      	bpl.n	8004196 <_vfiprintf_r+0x6a>
 8004178:	f04f 30ff 	mov.w	r0, #4294967295
 800417c:	b01d      	add	sp, #116	; 0x74
 800417e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004182:	4b7b      	ldr	r3, [pc, #492]	; (8004370 <_vfiprintf_r+0x244>)
 8004184:	429d      	cmp	r5, r3
 8004186:	d101      	bne.n	800418c <_vfiprintf_r+0x60>
 8004188:	68b5      	ldr	r5, [r6, #8]
 800418a:	e7df      	b.n	800414c <_vfiprintf_r+0x20>
 800418c:	4b79      	ldr	r3, [pc, #484]	; (8004374 <_vfiprintf_r+0x248>)
 800418e:	429d      	cmp	r5, r3
 8004190:	bf08      	it	eq
 8004192:	68f5      	ldreq	r5, [r6, #12]
 8004194:	e7da      	b.n	800414c <_vfiprintf_r+0x20>
 8004196:	89ab      	ldrh	r3, [r5, #12]
 8004198:	0598      	lsls	r0, r3, #22
 800419a:	d4ed      	bmi.n	8004178 <_vfiprintf_r+0x4c>
 800419c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800419e:	f7ff ff40 	bl	8004022 <__retarget_lock_release_recursive>
 80041a2:	e7e9      	b.n	8004178 <_vfiprintf_r+0x4c>
 80041a4:	2300      	movs	r3, #0
 80041a6:	9309      	str	r3, [sp, #36]	; 0x24
 80041a8:	2320      	movs	r3, #32
 80041aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80041ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80041b2:	2330      	movs	r3, #48	; 0x30
 80041b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004378 <_vfiprintf_r+0x24c>
 80041b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80041bc:	f04f 0901 	mov.w	r9, #1
 80041c0:	4623      	mov	r3, r4
 80041c2:	469a      	mov	sl, r3
 80041c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041c8:	b10a      	cbz	r2, 80041ce <_vfiprintf_r+0xa2>
 80041ca:	2a25      	cmp	r2, #37	; 0x25
 80041cc:	d1f9      	bne.n	80041c2 <_vfiprintf_r+0x96>
 80041ce:	ebba 0b04 	subs.w	fp, sl, r4
 80041d2:	d00b      	beq.n	80041ec <_vfiprintf_r+0xc0>
 80041d4:	465b      	mov	r3, fp
 80041d6:	4622      	mov	r2, r4
 80041d8:	4629      	mov	r1, r5
 80041da:	4630      	mov	r0, r6
 80041dc:	f7ff ff93 	bl	8004106 <__sfputs_r>
 80041e0:	3001      	adds	r0, #1
 80041e2:	f000 80aa 	beq.w	800433a <_vfiprintf_r+0x20e>
 80041e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041e8:	445a      	add	r2, fp
 80041ea:	9209      	str	r2, [sp, #36]	; 0x24
 80041ec:	f89a 3000 	ldrb.w	r3, [sl]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	f000 80a2 	beq.w	800433a <_vfiprintf_r+0x20e>
 80041f6:	2300      	movs	r3, #0
 80041f8:	f04f 32ff 	mov.w	r2, #4294967295
 80041fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004200:	f10a 0a01 	add.w	sl, sl, #1
 8004204:	9304      	str	r3, [sp, #16]
 8004206:	9307      	str	r3, [sp, #28]
 8004208:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800420c:	931a      	str	r3, [sp, #104]	; 0x68
 800420e:	4654      	mov	r4, sl
 8004210:	2205      	movs	r2, #5
 8004212:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004216:	4858      	ldr	r0, [pc, #352]	; (8004378 <_vfiprintf_r+0x24c>)
 8004218:	f7fb ffe2 	bl	80001e0 <memchr>
 800421c:	9a04      	ldr	r2, [sp, #16]
 800421e:	b9d8      	cbnz	r0, 8004258 <_vfiprintf_r+0x12c>
 8004220:	06d1      	lsls	r1, r2, #27
 8004222:	bf44      	itt	mi
 8004224:	2320      	movmi	r3, #32
 8004226:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800422a:	0713      	lsls	r3, r2, #28
 800422c:	bf44      	itt	mi
 800422e:	232b      	movmi	r3, #43	; 0x2b
 8004230:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004234:	f89a 3000 	ldrb.w	r3, [sl]
 8004238:	2b2a      	cmp	r3, #42	; 0x2a
 800423a:	d015      	beq.n	8004268 <_vfiprintf_r+0x13c>
 800423c:	9a07      	ldr	r2, [sp, #28]
 800423e:	4654      	mov	r4, sl
 8004240:	2000      	movs	r0, #0
 8004242:	f04f 0c0a 	mov.w	ip, #10
 8004246:	4621      	mov	r1, r4
 8004248:	f811 3b01 	ldrb.w	r3, [r1], #1
 800424c:	3b30      	subs	r3, #48	; 0x30
 800424e:	2b09      	cmp	r3, #9
 8004250:	d94e      	bls.n	80042f0 <_vfiprintf_r+0x1c4>
 8004252:	b1b0      	cbz	r0, 8004282 <_vfiprintf_r+0x156>
 8004254:	9207      	str	r2, [sp, #28]
 8004256:	e014      	b.n	8004282 <_vfiprintf_r+0x156>
 8004258:	eba0 0308 	sub.w	r3, r0, r8
 800425c:	fa09 f303 	lsl.w	r3, r9, r3
 8004260:	4313      	orrs	r3, r2
 8004262:	9304      	str	r3, [sp, #16]
 8004264:	46a2      	mov	sl, r4
 8004266:	e7d2      	b.n	800420e <_vfiprintf_r+0xe2>
 8004268:	9b03      	ldr	r3, [sp, #12]
 800426a:	1d19      	adds	r1, r3, #4
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	9103      	str	r1, [sp, #12]
 8004270:	2b00      	cmp	r3, #0
 8004272:	bfbb      	ittet	lt
 8004274:	425b      	neglt	r3, r3
 8004276:	f042 0202 	orrlt.w	r2, r2, #2
 800427a:	9307      	strge	r3, [sp, #28]
 800427c:	9307      	strlt	r3, [sp, #28]
 800427e:	bfb8      	it	lt
 8004280:	9204      	strlt	r2, [sp, #16]
 8004282:	7823      	ldrb	r3, [r4, #0]
 8004284:	2b2e      	cmp	r3, #46	; 0x2e
 8004286:	d10c      	bne.n	80042a2 <_vfiprintf_r+0x176>
 8004288:	7863      	ldrb	r3, [r4, #1]
 800428a:	2b2a      	cmp	r3, #42	; 0x2a
 800428c:	d135      	bne.n	80042fa <_vfiprintf_r+0x1ce>
 800428e:	9b03      	ldr	r3, [sp, #12]
 8004290:	1d1a      	adds	r2, r3, #4
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	9203      	str	r2, [sp, #12]
 8004296:	2b00      	cmp	r3, #0
 8004298:	bfb8      	it	lt
 800429a:	f04f 33ff 	movlt.w	r3, #4294967295
 800429e:	3402      	adds	r4, #2
 80042a0:	9305      	str	r3, [sp, #20]
 80042a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004388 <_vfiprintf_r+0x25c>
 80042a6:	7821      	ldrb	r1, [r4, #0]
 80042a8:	2203      	movs	r2, #3
 80042aa:	4650      	mov	r0, sl
 80042ac:	f7fb ff98 	bl	80001e0 <memchr>
 80042b0:	b140      	cbz	r0, 80042c4 <_vfiprintf_r+0x198>
 80042b2:	2340      	movs	r3, #64	; 0x40
 80042b4:	eba0 000a 	sub.w	r0, r0, sl
 80042b8:	fa03 f000 	lsl.w	r0, r3, r0
 80042bc:	9b04      	ldr	r3, [sp, #16]
 80042be:	4303      	orrs	r3, r0
 80042c0:	3401      	adds	r4, #1
 80042c2:	9304      	str	r3, [sp, #16]
 80042c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042c8:	482c      	ldr	r0, [pc, #176]	; (800437c <_vfiprintf_r+0x250>)
 80042ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80042ce:	2206      	movs	r2, #6
 80042d0:	f7fb ff86 	bl	80001e0 <memchr>
 80042d4:	2800      	cmp	r0, #0
 80042d6:	d03f      	beq.n	8004358 <_vfiprintf_r+0x22c>
 80042d8:	4b29      	ldr	r3, [pc, #164]	; (8004380 <_vfiprintf_r+0x254>)
 80042da:	bb1b      	cbnz	r3, 8004324 <_vfiprintf_r+0x1f8>
 80042dc:	9b03      	ldr	r3, [sp, #12]
 80042de:	3307      	adds	r3, #7
 80042e0:	f023 0307 	bic.w	r3, r3, #7
 80042e4:	3308      	adds	r3, #8
 80042e6:	9303      	str	r3, [sp, #12]
 80042e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042ea:	443b      	add	r3, r7
 80042ec:	9309      	str	r3, [sp, #36]	; 0x24
 80042ee:	e767      	b.n	80041c0 <_vfiprintf_r+0x94>
 80042f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80042f4:	460c      	mov	r4, r1
 80042f6:	2001      	movs	r0, #1
 80042f8:	e7a5      	b.n	8004246 <_vfiprintf_r+0x11a>
 80042fa:	2300      	movs	r3, #0
 80042fc:	3401      	adds	r4, #1
 80042fe:	9305      	str	r3, [sp, #20]
 8004300:	4619      	mov	r1, r3
 8004302:	f04f 0c0a 	mov.w	ip, #10
 8004306:	4620      	mov	r0, r4
 8004308:	f810 2b01 	ldrb.w	r2, [r0], #1
 800430c:	3a30      	subs	r2, #48	; 0x30
 800430e:	2a09      	cmp	r2, #9
 8004310:	d903      	bls.n	800431a <_vfiprintf_r+0x1ee>
 8004312:	2b00      	cmp	r3, #0
 8004314:	d0c5      	beq.n	80042a2 <_vfiprintf_r+0x176>
 8004316:	9105      	str	r1, [sp, #20]
 8004318:	e7c3      	b.n	80042a2 <_vfiprintf_r+0x176>
 800431a:	fb0c 2101 	mla	r1, ip, r1, r2
 800431e:	4604      	mov	r4, r0
 8004320:	2301      	movs	r3, #1
 8004322:	e7f0      	b.n	8004306 <_vfiprintf_r+0x1da>
 8004324:	ab03      	add	r3, sp, #12
 8004326:	9300      	str	r3, [sp, #0]
 8004328:	462a      	mov	r2, r5
 800432a:	4b16      	ldr	r3, [pc, #88]	; (8004384 <_vfiprintf_r+0x258>)
 800432c:	a904      	add	r1, sp, #16
 800432e:	4630      	mov	r0, r6
 8004330:	f3af 8000 	nop.w
 8004334:	4607      	mov	r7, r0
 8004336:	1c78      	adds	r0, r7, #1
 8004338:	d1d6      	bne.n	80042e8 <_vfiprintf_r+0x1bc>
 800433a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800433c:	07d9      	lsls	r1, r3, #31
 800433e:	d405      	bmi.n	800434c <_vfiprintf_r+0x220>
 8004340:	89ab      	ldrh	r3, [r5, #12]
 8004342:	059a      	lsls	r2, r3, #22
 8004344:	d402      	bmi.n	800434c <_vfiprintf_r+0x220>
 8004346:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004348:	f7ff fe6b 	bl	8004022 <__retarget_lock_release_recursive>
 800434c:	89ab      	ldrh	r3, [r5, #12]
 800434e:	065b      	lsls	r3, r3, #25
 8004350:	f53f af12 	bmi.w	8004178 <_vfiprintf_r+0x4c>
 8004354:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004356:	e711      	b.n	800417c <_vfiprintf_r+0x50>
 8004358:	ab03      	add	r3, sp, #12
 800435a:	9300      	str	r3, [sp, #0]
 800435c:	462a      	mov	r2, r5
 800435e:	4b09      	ldr	r3, [pc, #36]	; (8004384 <_vfiprintf_r+0x258>)
 8004360:	a904      	add	r1, sp, #16
 8004362:	4630      	mov	r0, r6
 8004364:	f000 f880 	bl	8004468 <_printf_i>
 8004368:	e7e4      	b.n	8004334 <_vfiprintf_r+0x208>
 800436a:	bf00      	nop
 800436c:	08004d3c 	.word	0x08004d3c
 8004370:	08004d5c 	.word	0x08004d5c
 8004374:	08004d1c 	.word	0x08004d1c
 8004378:	08004d7c 	.word	0x08004d7c
 800437c:	08004d86 	.word	0x08004d86
 8004380:	00000000 	.word	0x00000000
 8004384:	08004107 	.word	0x08004107
 8004388:	08004d82 	.word	0x08004d82

0800438c <_printf_common>:
 800438c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004390:	4616      	mov	r6, r2
 8004392:	4699      	mov	r9, r3
 8004394:	688a      	ldr	r2, [r1, #8]
 8004396:	690b      	ldr	r3, [r1, #16]
 8004398:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800439c:	4293      	cmp	r3, r2
 800439e:	bfb8      	it	lt
 80043a0:	4613      	movlt	r3, r2
 80043a2:	6033      	str	r3, [r6, #0]
 80043a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80043a8:	4607      	mov	r7, r0
 80043aa:	460c      	mov	r4, r1
 80043ac:	b10a      	cbz	r2, 80043b2 <_printf_common+0x26>
 80043ae:	3301      	adds	r3, #1
 80043b0:	6033      	str	r3, [r6, #0]
 80043b2:	6823      	ldr	r3, [r4, #0]
 80043b4:	0699      	lsls	r1, r3, #26
 80043b6:	bf42      	ittt	mi
 80043b8:	6833      	ldrmi	r3, [r6, #0]
 80043ba:	3302      	addmi	r3, #2
 80043bc:	6033      	strmi	r3, [r6, #0]
 80043be:	6825      	ldr	r5, [r4, #0]
 80043c0:	f015 0506 	ands.w	r5, r5, #6
 80043c4:	d106      	bne.n	80043d4 <_printf_common+0x48>
 80043c6:	f104 0a19 	add.w	sl, r4, #25
 80043ca:	68e3      	ldr	r3, [r4, #12]
 80043cc:	6832      	ldr	r2, [r6, #0]
 80043ce:	1a9b      	subs	r3, r3, r2
 80043d0:	42ab      	cmp	r3, r5
 80043d2:	dc26      	bgt.n	8004422 <_printf_common+0x96>
 80043d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80043d8:	1e13      	subs	r3, r2, #0
 80043da:	6822      	ldr	r2, [r4, #0]
 80043dc:	bf18      	it	ne
 80043de:	2301      	movne	r3, #1
 80043e0:	0692      	lsls	r2, r2, #26
 80043e2:	d42b      	bmi.n	800443c <_printf_common+0xb0>
 80043e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043e8:	4649      	mov	r1, r9
 80043ea:	4638      	mov	r0, r7
 80043ec:	47c0      	blx	r8
 80043ee:	3001      	adds	r0, #1
 80043f0:	d01e      	beq.n	8004430 <_printf_common+0xa4>
 80043f2:	6823      	ldr	r3, [r4, #0]
 80043f4:	68e5      	ldr	r5, [r4, #12]
 80043f6:	6832      	ldr	r2, [r6, #0]
 80043f8:	f003 0306 	and.w	r3, r3, #6
 80043fc:	2b04      	cmp	r3, #4
 80043fe:	bf08      	it	eq
 8004400:	1aad      	subeq	r5, r5, r2
 8004402:	68a3      	ldr	r3, [r4, #8]
 8004404:	6922      	ldr	r2, [r4, #16]
 8004406:	bf0c      	ite	eq
 8004408:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800440c:	2500      	movne	r5, #0
 800440e:	4293      	cmp	r3, r2
 8004410:	bfc4      	itt	gt
 8004412:	1a9b      	subgt	r3, r3, r2
 8004414:	18ed      	addgt	r5, r5, r3
 8004416:	2600      	movs	r6, #0
 8004418:	341a      	adds	r4, #26
 800441a:	42b5      	cmp	r5, r6
 800441c:	d11a      	bne.n	8004454 <_printf_common+0xc8>
 800441e:	2000      	movs	r0, #0
 8004420:	e008      	b.n	8004434 <_printf_common+0xa8>
 8004422:	2301      	movs	r3, #1
 8004424:	4652      	mov	r2, sl
 8004426:	4649      	mov	r1, r9
 8004428:	4638      	mov	r0, r7
 800442a:	47c0      	blx	r8
 800442c:	3001      	adds	r0, #1
 800442e:	d103      	bne.n	8004438 <_printf_common+0xac>
 8004430:	f04f 30ff 	mov.w	r0, #4294967295
 8004434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004438:	3501      	adds	r5, #1
 800443a:	e7c6      	b.n	80043ca <_printf_common+0x3e>
 800443c:	18e1      	adds	r1, r4, r3
 800443e:	1c5a      	adds	r2, r3, #1
 8004440:	2030      	movs	r0, #48	; 0x30
 8004442:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004446:	4422      	add	r2, r4
 8004448:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800444c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004450:	3302      	adds	r3, #2
 8004452:	e7c7      	b.n	80043e4 <_printf_common+0x58>
 8004454:	2301      	movs	r3, #1
 8004456:	4622      	mov	r2, r4
 8004458:	4649      	mov	r1, r9
 800445a:	4638      	mov	r0, r7
 800445c:	47c0      	blx	r8
 800445e:	3001      	adds	r0, #1
 8004460:	d0e6      	beq.n	8004430 <_printf_common+0xa4>
 8004462:	3601      	adds	r6, #1
 8004464:	e7d9      	b.n	800441a <_printf_common+0x8e>
	...

08004468 <_printf_i>:
 8004468:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800446c:	460c      	mov	r4, r1
 800446e:	4691      	mov	r9, r2
 8004470:	7e27      	ldrb	r7, [r4, #24]
 8004472:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004474:	2f78      	cmp	r7, #120	; 0x78
 8004476:	4680      	mov	r8, r0
 8004478:	469a      	mov	sl, r3
 800447a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800447e:	d807      	bhi.n	8004490 <_printf_i+0x28>
 8004480:	2f62      	cmp	r7, #98	; 0x62
 8004482:	d80a      	bhi.n	800449a <_printf_i+0x32>
 8004484:	2f00      	cmp	r7, #0
 8004486:	f000 80d8 	beq.w	800463a <_printf_i+0x1d2>
 800448a:	2f58      	cmp	r7, #88	; 0x58
 800448c:	f000 80a3 	beq.w	80045d6 <_printf_i+0x16e>
 8004490:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004494:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004498:	e03a      	b.n	8004510 <_printf_i+0xa8>
 800449a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800449e:	2b15      	cmp	r3, #21
 80044a0:	d8f6      	bhi.n	8004490 <_printf_i+0x28>
 80044a2:	a001      	add	r0, pc, #4	; (adr r0, 80044a8 <_printf_i+0x40>)
 80044a4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80044a8:	08004501 	.word	0x08004501
 80044ac:	08004515 	.word	0x08004515
 80044b0:	08004491 	.word	0x08004491
 80044b4:	08004491 	.word	0x08004491
 80044b8:	08004491 	.word	0x08004491
 80044bc:	08004491 	.word	0x08004491
 80044c0:	08004515 	.word	0x08004515
 80044c4:	08004491 	.word	0x08004491
 80044c8:	08004491 	.word	0x08004491
 80044cc:	08004491 	.word	0x08004491
 80044d0:	08004491 	.word	0x08004491
 80044d4:	08004621 	.word	0x08004621
 80044d8:	08004545 	.word	0x08004545
 80044dc:	08004603 	.word	0x08004603
 80044e0:	08004491 	.word	0x08004491
 80044e4:	08004491 	.word	0x08004491
 80044e8:	08004643 	.word	0x08004643
 80044ec:	08004491 	.word	0x08004491
 80044f0:	08004545 	.word	0x08004545
 80044f4:	08004491 	.word	0x08004491
 80044f8:	08004491 	.word	0x08004491
 80044fc:	0800460b 	.word	0x0800460b
 8004500:	680b      	ldr	r3, [r1, #0]
 8004502:	1d1a      	adds	r2, r3, #4
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	600a      	str	r2, [r1, #0]
 8004508:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800450c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004510:	2301      	movs	r3, #1
 8004512:	e0a3      	b.n	800465c <_printf_i+0x1f4>
 8004514:	6825      	ldr	r5, [r4, #0]
 8004516:	6808      	ldr	r0, [r1, #0]
 8004518:	062e      	lsls	r6, r5, #24
 800451a:	f100 0304 	add.w	r3, r0, #4
 800451e:	d50a      	bpl.n	8004536 <_printf_i+0xce>
 8004520:	6805      	ldr	r5, [r0, #0]
 8004522:	600b      	str	r3, [r1, #0]
 8004524:	2d00      	cmp	r5, #0
 8004526:	da03      	bge.n	8004530 <_printf_i+0xc8>
 8004528:	232d      	movs	r3, #45	; 0x2d
 800452a:	426d      	negs	r5, r5
 800452c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004530:	485e      	ldr	r0, [pc, #376]	; (80046ac <_printf_i+0x244>)
 8004532:	230a      	movs	r3, #10
 8004534:	e019      	b.n	800456a <_printf_i+0x102>
 8004536:	f015 0f40 	tst.w	r5, #64	; 0x40
 800453a:	6805      	ldr	r5, [r0, #0]
 800453c:	600b      	str	r3, [r1, #0]
 800453e:	bf18      	it	ne
 8004540:	b22d      	sxthne	r5, r5
 8004542:	e7ef      	b.n	8004524 <_printf_i+0xbc>
 8004544:	680b      	ldr	r3, [r1, #0]
 8004546:	6825      	ldr	r5, [r4, #0]
 8004548:	1d18      	adds	r0, r3, #4
 800454a:	6008      	str	r0, [r1, #0]
 800454c:	0628      	lsls	r0, r5, #24
 800454e:	d501      	bpl.n	8004554 <_printf_i+0xec>
 8004550:	681d      	ldr	r5, [r3, #0]
 8004552:	e002      	b.n	800455a <_printf_i+0xf2>
 8004554:	0669      	lsls	r1, r5, #25
 8004556:	d5fb      	bpl.n	8004550 <_printf_i+0xe8>
 8004558:	881d      	ldrh	r5, [r3, #0]
 800455a:	4854      	ldr	r0, [pc, #336]	; (80046ac <_printf_i+0x244>)
 800455c:	2f6f      	cmp	r7, #111	; 0x6f
 800455e:	bf0c      	ite	eq
 8004560:	2308      	moveq	r3, #8
 8004562:	230a      	movne	r3, #10
 8004564:	2100      	movs	r1, #0
 8004566:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800456a:	6866      	ldr	r6, [r4, #4]
 800456c:	60a6      	str	r6, [r4, #8]
 800456e:	2e00      	cmp	r6, #0
 8004570:	bfa2      	ittt	ge
 8004572:	6821      	ldrge	r1, [r4, #0]
 8004574:	f021 0104 	bicge.w	r1, r1, #4
 8004578:	6021      	strge	r1, [r4, #0]
 800457a:	b90d      	cbnz	r5, 8004580 <_printf_i+0x118>
 800457c:	2e00      	cmp	r6, #0
 800457e:	d04d      	beq.n	800461c <_printf_i+0x1b4>
 8004580:	4616      	mov	r6, r2
 8004582:	fbb5 f1f3 	udiv	r1, r5, r3
 8004586:	fb03 5711 	mls	r7, r3, r1, r5
 800458a:	5dc7      	ldrb	r7, [r0, r7]
 800458c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004590:	462f      	mov	r7, r5
 8004592:	42bb      	cmp	r3, r7
 8004594:	460d      	mov	r5, r1
 8004596:	d9f4      	bls.n	8004582 <_printf_i+0x11a>
 8004598:	2b08      	cmp	r3, #8
 800459a:	d10b      	bne.n	80045b4 <_printf_i+0x14c>
 800459c:	6823      	ldr	r3, [r4, #0]
 800459e:	07df      	lsls	r7, r3, #31
 80045a0:	d508      	bpl.n	80045b4 <_printf_i+0x14c>
 80045a2:	6923      	ldr	r3, [r4, #16]
 80045a4:	6861      	ldr	r1, [r4, #4]
 80045a6:	4299      	cmp	r1, r3
 80045a8:	bfde      	ittt	le
 80045aa:	2330      	movle	r3, #48	; 0x30
 80045ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80045b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80045b4:	1b92      	subs	r2, r2, r6
 80045b6:	6122      	str	r2, [r4, #16]
 80045b8:	f8cd a000 	str.w	sl, [sp]
 80045bc:	464b      	mov	r3, r9
 80045be:	aa03      	add	r2, sp, #12
 80045c0:	4621      	mov	r1, r4
 80045c2:	4640      	mov	r0, r8
 80045c4:	f7ff fee2 	bl	800438c <_printf_common>
 80045c8:	3001      	adds	r0, #1
 80045ca:	d14c      	bne.n	8004666 <_printf_i+0x1fe>
 80045cc:	f04f 30ff 	mov.w	r0, #4294967295
 80045d0:	b004      	add	sp, #16
 80045d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045d6:	4835      	ldr	r0, [pc, #212]	; (80046ac <_printf_i+0x244>)
 80045d8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80045dc:	6823      	ldr	r3, [r4, #0]
 80045de:	680e      	ldr	r6, [r1, #0]
 80045e0:	061f      	lsls	r7, r3, #24
 80045e2:	f856 5b04 	ldr.w	r5, [r6], #4
 80045e6:	600e      	str	r6, [r1, #0]
 80045e8:	d514      	bpl.n	8004614 <_printf_i+0x1ac>
 80045ea:	07d9      	lsls	r1, r3, #31
 80045ec:	bf44      	itt	mi
 80045ee:	f043 0320 	orrmi.w	r3, r3, #32
 80045f2:	6023      	strmi	r3, [r4, #0]
 80045f4:	b91d      	cbnz	r5, 80045fe <_printf_i+0x196>
 80045f6:	6823      	ldr	r3, [r4, #0]
 80045f8:	f023 0320 	bic.w	r3, r3, #32
 80045fc:	6023      	str	r3, [r4, #0]
 80045fe:	2310      	movs	r3, #16
 8004600:	e7b0      	b.n	8004564 <_printf_i+0xfc>
 8004602:	6823      	ldr	r3, [r4, #0]
 8004604:	f043 0320 	orr.w	r3, r3, #32
 8004608:	6023      	str	r3, [r4, #0]
 800460a:	2378      	movs	r3, #120	; 0x78
 800460c:	4828      	ldr	r0, [pc, #160]	; (80046b0 <_printf_i+0x248>)
 800460e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004612:	e7e3      	b.n	80045dc <_printf_i+0x174>
 8004614:	065e      	lsls	r6, r3, #25
 8004616:	bf48      	it	mi
 8004618:	b2ad      	uxthmi	r5, r5
 800461a:	e7e6      	b.n	80045ea <_printf_i+0x182>
 800461c:	4616      	mov	r6, r2
 800461e:	e7bb      	b.n	8004598 <_printf_i+0x130>
 8004620:	680b      	ldr	r3, [r1, #0]
 8004622:	6826      	ldr	r6, [r4, #0]
 8004624:	6960      	ldr	r0, [r4, #20]
 8004626:	1d1d      	adds	r5, r3, #4
 8004628:	600d      	str	r5, [r1, #0]
 800462a:	0635      	lsls	r5, r6, #24
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	d501      	bpl.n	8004634 <_printf_i+0x1cc>
 8004630:	6018      	str	r0, [r3, #0]
 8004632:	e002      	b.n	800463a <_printf_i+0x1d2>
 8004634:	0671      	lsls	r1, r6, #25
 8004636:	d5fb      	bpl.n	8004630 <_printf_i+0x1c8>
 8004638:	8018      	strh	r0, [r3, #0]
 800463a:	2300      	movs	r3, #0
 800463c:	6123      	str	r3, [r4, #16]
 800463e:	4616      	mov	r6, r2
 8004640:	e7ba      	b.n	80045b8 <_printf_i+0x150>
 8004642:	680b      	ldr	r3, [r1, #0]
 8004644:	1d1a      	adds	r2, r3, #4
 8004646:	600a      	str	r2, [r1, #0]
 8004648:	681e      	ldr	r6, [r3, #0]
 800464a:	6862      	ldr	r2, [r4, #4]
 800464c:	2100      	movs	r1, #0
 800464e:	4630      	mov	r0, r6
 8004650:	f7fb fdc6 	bl	80001e0 <memchr>
 8004654:	b108      	cbz	r0, 800465a <_printf_i+0x1f2>
 8004656:	1b80      	subs	r0, r0, r6
 8004658:	6060      	str	r0, [r4, #4]
 800465a:	6863      	ldr	r3, [r4, #4]
 800465c:	6123      	str	r3, [r4, #16]
 800465e:	2300      	movs	r3, #0
 8004660:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004664:	e7a8      	b.n	80045b8 <_printf_i+0x150>
 8004666:	6923      	ldr	r3, [r4, #16]
 8004668:	4632      	mov	r2, r6
 800466a:	4649      	mov	r1, r9
 800466c:	4640      	mov	r0, r8
 800466e:	47d0      	blx	sl
 8004670:	3001      	adds	r0, #1
 8004672:	d0ab      	beq.n	80045cc <_printf_i+0x164>
 8004674:	6823      	ldr	r3, [r4, #0]
 8004676:	079b      	lsls	r3, r3, #30
 8004678:	d413      	bmi.n	80046a2 <_printf_i+0x23a>
 800467a:	68e0      	ldr	r0, [r4, #12]
 800467c:	9b03      	ldr	r3, [sp, #12]
 800467e:	4298      	cmp	r0, r3
 8004680:	bfb8      	it	lt
 8004682:	4618      	movlt	r0, r3
 8004684:	e7a4      	b.n	80045d0 <_printf_i+0x168>
 8004686:	2301      	movs	r3, #1
 8004688:	4632      	mov	r2, r6
 800468a:	4649      	mov	r1, r9
 800468c:	4640      	mov	r0, r8
 800468e:	47d0      	blx	sl
 8004690:	3001      	adds	r0, #1
 8004692:	d09b      	beq.n	80045cc <_printf_i+0x164>
 8004694:	3501      	adds	r5, #1
 8004696:	68e3      	ldr	r3, [r4, #12]
 8004698:	9903      	ldr	r1, [sp, #12]
 800469a:	1a5b      	subs	r3, r3, r1
 800469c:	42ab      	cmp	r3, r5
 800469e:	dcf2      	bgt.n	8004686 <_printf_i+0x21e>
 80046a0:	e7eb      	b.n	800467a <_printf_i+0x212>
 80046a2:	2500      	movs	r5, #0
 80046a4:	f104 0619 	add.w	r6, r4, #25
 80046a8:	e7f5      	b.n	8004696 <_printf_i+0x22e>
 80046aa:	bf00      	nop
 80046ac:	08004d8d 	.word	0x08004d8d
 80046b0:	08004d9e 	.word	0x08004d9e

080046b4 <_sbrk_r>:
 80046b4:	b538      	push	{r3, r4, r5, lr}
 80046b6:	4d06      	ldr	r5, [pc, #24]	; (80046d0 <_sbrk_r+0x1c>)
 80046b8:	2300      	movs	r3, #0
 80046ba:	4604      	mov	r4, r0
 80046bc:	4608      	mov	r0, r1
 80046be:	602b      	str	r3, [r5, #0]
 80046c0:	f7fc fb4e 	bl	8000d60 <_sbrk>
 80046c4:	1c43      	adds	r3, r0, #1
 80046c6:	d102      	bne.n	80046ce <_sbrk_r+0x1a>
 80046c8:	682b      	ldr	r3, [r5, #0]
 80046ca:	b103      	cbz	r3, 80046ce <_sbrk_r+0x1a>
 80046cc:	6023      	str	r3, [r4, #0]
 80046ce:	bd38      	pop	{r3, r4, r5, pc}
 80046d0:	200001f0 	.word	0x200001f0

080046d4 <__sread>:
 80046d4:	b510      	push	{r4, lr}
 80046d6:	460c      	mov	r4, r1
 80046d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046dc:	f000 fab4 	bl	8004c48 <_read_r>
 80046e0:	2800      	cmp	r0, #0
 80046e2:	bfab      	itete	ge
 80046e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80046e6:	89a3      	ldrhlt	r3, [r4, #12]
 80046e8:	181b      	addge	r3, r3, r0
 80046ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80046ee:	bfac      	ite	ge
 80046f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80046f2:	81a3      	strhlt	r3, [r4, #12]
 80046f4:	bd10      	pop	{r4, pc}

080046f6 <__swrite>:
 80046f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046fa:	461f      	mov	r7, r3
 80046fc:	898b      	ldrh	r3, [r1, #12]
 80046fe:	05db      	lsls	r3, r3, #23
 8004700:	4605      	mov	r5, r0
 8004702:	460c      	mov	r4, r1
 8004704:	4616      	mov	r6, r2
 8004706:	d505      	bpl.n	8004714 <__swrite+0x1e>
 8004708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800470c:	2302      	movs	r3, #2
 800470e:	2200      	movs	r2, #0
 8004710:	f000 f9c8 	bl	8004aa4 <_lseek_r>
 8004714:	89a3      	ldrh	r3, [r4, #12]
 8004716:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800471a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800471e:	81a3      	strh	r3, [r4, #12]
 8004720:	4632      	mov	r2, r6
 8004722:	463b      	mov	r3, r7
 8004724:	4628      	mov	r0, r5
 8004726:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800472a:	f000 b869 	b.w	8004800 <_write_r>

0800472e <__sseek>:
 800472e:	b510      	push	{r4, lr}
 8004730:	460c      	mov	r4, r1
 8004732:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004736:	f000 f9b5 	bl	8004aa4 <_lseek_r>
 800473a:	1c43      	adds	r3, r0, #1
 800473c:	89a3      	ldrh	r3, [r4, #12]
 800473e:	bf15      	itete	ne
 8004740:	6560      	strne	r0, [r4, #84]	; 0x54
 8004742:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004746:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800474a:	81a3      	strheq	r3, [r4, #12]
 800474c:	bf18      	it	ne
 800474e:	81a3      	strhne	r3, [r4, #12]
 8004750:	bd10      	pop	{r4, pc}

08004752 <__sclose>:
 8004752:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004756:	f000 b8d3 	b.w	8004900 <_close_r>
	...

0800475c <__swbuf_r>:
 800475c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800475e:	460e      	mov	r6, r1
 8004760:	4614      	mov	r4, r2
 8004762:	4605      	mov	r5, r0
 8004764:	b118      	cbz	r0, 800476e <__swbuf_r+0x12>
 8004766:	6983      	ldr	r3, [r0, #24]
 8004768:	b90b      	cbnz	r3, 800476e <__swbuf_r+0x12>
 800476a:	f7ff fbbb 	bl	8003ee4 <__sinit>
 800476e:	4b21      	ldr	r3, [pc, #132]	; (80047f4 <__swbuf_r+0x98>)
 8004770:	429c      	cmp	r4, r3
 8004772:	d12b      	bne.n	80047cc <__swbuf_r+0x70>
 8004774:	686c      	ldr	r4, [r5, #4]
 8004776:	69a3      	ldr	r3, [r4, #24]
 8004778:	60a3      	str	r3, [r4, #8]
 800477a:	89a3      	ldrh	r3, [r4, #12]
 800477c:	071a      	lsls	r2, r3, #28
 800477e:	d52f      	bpl.n	80047e0 <__swbuf_r+0x84>
 8004780:	6923      	ldr	r3, [r4, #16]
 8004782:	b36b      	cbz	r3, 80047e0 <__swbuf_r+0x84>
 8004784:	6923      	ldr	r3, [r4, #16]
 8004786:	6820      	ldr	r0, [r4, #0]
 8004788:	1ac0      	subs	r0, r0, r3
 800478a:	6963      	ldr	r3, [r4, #20]
 800478c:	b2f6      	uxtb	r6, r6
 800478e:	4283      	cmp	r3, r0
 8004790:	4637      	mov	r7, r6
 8004792:	dc04      	bgt.n	800479e <__swbuf_r+0x42>
 8004794:	4621      	mov	r1, r4
 8004796:	4628      	mov	r0, r5
 8004798:	f000 f948 	bl	8004a2c <_fflush_r>
 800479c:	bb30      	cbnz	r0, 80047ec <__swbuf_r+0x90>
 800479e:	68a3      	ldr	r3, [r4, #8]
 80047a0:	3b01      	subs	r3, #1
 80047a2:	60a3      	str	r3, [r4, #8]
 80047a4:	6823      	ldr	r3, [r4, #0]
 80047a6:	1c5a      	adds	r2, r3, #1
 80047a8:	6022      	str	r2, [r4, #0]
 80047aa:	701e      	strb	r6, [r3, #0]
 80047ac:	6963      	ldr	r3, [r4, #20]
 80047ae:	3001      	adds	r0, #1
 80047b0:	4283      	cmp	r3, r0
 80047b2:	d004      	beq.n	80047be <__swbuf_r+0x62>
 80047b4:	89a3      	ldrh	r3, [r4, #12]
 80047b6:	07db      	lsls	r3, r3, #31
 80047b8:	d506      	bpl.n	80047c8 <__swbuf_r+0x6c>
 80047ba:	2e0a      	cmp	r6, #10
 80047bc:	d104      	bne.n	80047c8 <__swbuf_r+0x6c>
 80047be:	4621      	mov	r1, r4
 80047c0:	4628      	mov	r0, r5
 80047c2:	f000 f933 	bl	8004a2c <_fflush_r>
 80047c6:	b988      	cbnz	r0, 80047ec <__swbuf_r+0x90>
 80047c8:	4638      	mov	r0, r7
 80047ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047cc:	4b0a      	ldr	r3, [pc, #40]	; (80047f8 <__swbuf_r+0x9c>)
 80047ce:	429c      	cmp	r4, r3
 80047d0:	d101      	bne.n	80047d6 <__swbuf_r+0x7a>
 80047d2:	68ac      	ldr	r4, [r5, #8]
 80047d4:	e7cf      	b.n	8004776 <__swbuf_r+0x1a>
 80047d6:	4b09      	ldr	r3, [pc, #36]	; (80047fc <__swbuf_r+0xa0>)
 80047d8:	429c      	cmp	r4, r3
 80047da:	bf08      	it	eq
 80047dc:	68ec      	ldreq	r4, [r5, #12]
 80047de:	e7ca      	b.n	8004776 <__swbuf_r+0x1a>
 80047e0:	4621      	mov	r1, r4
 80047e2:	4628      	mov	r0, r5
 80047e4:	f000 f81e 	bl	8004824 <__swsetup_r>
 80047e8:	2800      	cmp	r0, #0
 80047ea:	d0cb      	beq.n	8004784 <__swbuf_r+0x28>
 80047ec:	f04f 37ff 	mov.w	r7, #4294967295
 80047f0:	e7ea      	b.n	80047c8 <__swbuf_r+0x6c>
 80047f2:	bf00      	nop
 80047f4:	08004d3c 	.word	0x08004d3c
 80047f8:	08004d5c 	.word	0x08004d5c
 80047fc:	08004d1c 	.word	0x08004d1c

08004800 <_write_r>:
 8004800:	b538      	push	{r3, r4, r5, lr}
 8004802:	4d07      	ldr	r5, [pc, #28]	; (8004820 <_write_r+0x20>)
 8004804:	4604      	mov	r4, r0
 8004806:	4608      	mov	r0, r1
 8004808:	4611      	mov	r1, r2
 800480a:	2200      	movs	r2, #0
 800480c:	602a      	str	r2, [r5, #0]
 800480e:	461a      	mov	r2, r3
 8004810:	f7fb ffbe 	bl	8000790 <_write>
 8004814:	1c43      	adds	r3, r0, #1
 8004816:	d102      	bne.n	800481e <_write_r+0x1e>
 8004818:	682b      	ldr	r3, [r5, #0]
 800481a:	b103      	cbz	r3, 800481e <_write_r+0x1e>
 800481c:	6023      	str	r3, [r4, #0]
 800481e:	bd38      	pop	{r3, r4, r5, pc}
 8004820:	200001f0 	.word	0x200001f0

08004824 <__swsetup_r>:
 8004824:	4b32      	ldr	r3, [pc, #200]	; (80048f0 <__swsetup_r+0xcc>)
 8004826:	b570      	push	{r4, r5, r6, lr}
 8004828:	681d      	ldr	r5, [r3, #0]
 800482a:	4606      	mov	r6, r0
 800482c:	460c      	mov	r4, r1
 800482e:	b125      	cbz	r5, 800483a <__swsetup_r+0x16>
 8004830:	69ab      	ldr	r3, [r5, #24]
 8004832:	b913      	cbnz	r3, 800483a <__swsetup_r+0x16>
 8004834:	4628      	mov	r0, r5
 8004836:	f7ff fb55 	bl	8003ee4 <__sinit>
 800483a:	4b2e      	ldr	r3, [pc, #184]	; (80048f4 <__swsetup_r+0xd0>)
 800483c:	429c      	cmp	r4, r3
 800483e:	d10f      	bne.n	8004860 <__swsetup_r+0x3c>
 8004840:	686c      	ldr	r4, [r5, #4]
 8004842:	89a3      	ldrh	r3, [r4, #12]
 8004844:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004848:	0719      	lsls	r1, r3, #28
 800484a:	d42c      	bmi.n	80048a6 <__swsetup_r+0x82>
 800484c:	06dd      	lsls	r5, r3, #27
 800484e:	d411      	bmi.n	8004874 <__swsetup_r+0x50>
 8004850:	2309      	movs	r3, #9
 8004852:	6033      	str	r3, [r6, #0]
 8004854:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004858:	81a3      	strh	r3, [r4, #12]
 800485a:	f04f 30ff 	mov.w	r0, #4294967295
 800485e:	e03e      	b.n	80048de <__swsetup_r+0xba>
 8004860:	4b25      	ldr	r3, [pc, #148]	; (80048f8 <__swsetup_r+0xd4>)
 8004862:	429c      	cmp	r4, r3
 8004864:	d101      	bne.n	800486a <__swsetup_r+0x46>
 8004866:	68ac      	ldr	r4, [r5, #8]
 8004868:	e7eb      	b.n	8004842 <__swsetup_r+0x1e>
 800486a:	4b24      	ldr	r3, [pc, #144]	; (80048fc <__swsetup_r+0xd8>)
 800486c:	429c      	cmp	r4, r3
 800486e:	bf08      	it	eq
 8004870:	68ec      	ldreq	r4, [r5, #12]
 8004872:	e7e6      	b.n	8004842 <__swsetup_r+0x1e>
 8004874:	0758      	lsls	r0, r3, #29
 8004876:	d512      	bpl.n	800489e <__swsetup_r+0x7a>
 8004878:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800487a:	b141      	cbz	r1, 800488e <__swsetup_r+0x6a>
 800487c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004880:	4299      	cmp	r1, r3
 8004882:	d002      	beq.n	800488a <__swsetup_r+0x66>
 8004884:	4630      	mov	r0, r6
 8004886:	f000 f98f 	bl	8004ba8 <_free_r>
 800488a:	2300      	movs	r3, #0
 800488c:	6363      	str	r3, [r4, #52]	; 0x34
 800488e:	89a3      	ldrh	r3, [r4, #12]
 8004890:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004894:	81a3      	strh	r3, [r4, #12]
 8004896:	2300      	movs	r3, #0
 8004898:	6063      	str	r3, [r4, #4]
 800489a:	6923      	ldr	r3, [r4, #16]
 800489c:	6023      	str	r3, [r4, #0]
 800489e:	89a3      	ldrh	r3, [r4, #12]
 80048a0:	f043 0308 	orr.w	r3, r3, #8
 80048a4:	81a3      	strh	r3, [r4, #12]
 80048a6:	6923      	ldr	r3, [r4, #16]
 80048a8:	b94b      	cbnz	r3, 80048be <__swsetup_r+0x9a>
 80048aa:	89a3      	ldrh	r3, [r4, #12]
 80048ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80048b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048b4:	d003      	beq.n	80048be <__swsetup_r+0x9a>
 80048b6:	4621      	mov	r1, r4
 80048b8:	4630      	mov	r0, r6
 80048ba:	f000 f929 	bl	8004b10 <__smakebuf_r>
 80048be:	89a0      	ldrh	r0, [r4, #12]
 80048c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80048c4:	f010 0301 	ands.w	r3, r0, #1
 80048c8:	d00a      	beq.n	80048e0 <__swsetup_r+0xbc>
 80048ca:	2300      	movs	r3, #0
 80048cc:	60a3      	str	r3, [r4, #8]
 80048ce:	6963      	ldr	r3, [r4, #20]
 80048d0:	425b      	negs	r3, r3
 80048d2:	61a3      	str	r3, [r4, #24]
 80048d4:	6923      	ldr	r3, [r4, #16]
 80048d6:	b943      	cbnz	r3, 80048ea <__swsetup_r+0xc6>
 80048d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80048dc:	d1ba      	bne.n	8004854 <__swsetup_r+0x30>
 80048de:	bd70      	pop	{r4, r5, r6, pc}
 80048e0:	0781      	lsls	r1, r0, #30
 80048e2:	bf58      	it	pl
 80048e4:	6963      	ldrpl	r3, [r4, #20]
 80048e6:	60a3      	str	r3, [r4, #8]
 80048e8:	e7f4      	b.n	80048d4 <__swsetup_r+0xb0>
 80048ea:	2000      	movs	r0, #0
 80048ec:	e7f7      	b.n	80048de <__swsetup_r+0xba>
 80048ee:	bf00      	nop
 80048f0:	20000014 	.word	0x20000014
 80048f4:	08004d3c 	.word	0x08004d3c
 80048f8:	08004d5c 	.word	0x08004d5c
 80048fc:	08004d1c 	.word	0x08004d1c

08004900 <_close_r>:
 8004900:	b538      	push	{r3, r4, r5, lr}
 8004902:	4d06      	ldr	r5, [pc, #24]	; (800491c <_close_r+0x1c>)
 8004904:	2300      	movs	r3, #0
 8004906:	4604      	mov	r4, r0
 8004908:	4608      	mov	r0, r1
 800490a:	602b      	str	r3, [r5, #0]
 800490c:	f7fc f9f3 	bl	8000cf6 <_close>
 8004910:	1c43      	adds	r3, r0, #1
 8004912:	d102      	bne.n	800491a <_close_r+0x1a>
 8004914:	682b      	ldr	r3, [r5, #0]
 8004916:	b103      	cbz	r3, 800491a <_close_r+0x1a>
 8004918:	6023      	str	r3, [r4, #0]
 800491a:	bd38      	pop	{r3, r4, r5, pc}
 800491c:	200001f0 	.word	0x200001f0

08004920 <__sflush_r>:
 8004920:	898a      	ldrh	r2, [r1, #12]
 8004922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004926:	4605      	mov	r5, r0
 8004928:	0710      	lsls	r0, r2, #28
 800492a:	460c      	mov	r4, r1
 800492c:	d458      	bmi.n	80049e0 <__sflush_r+0xc0>
 800492e:	684b      	ldr	r3, [r1, #4]
 8004930:	2b00      	cmp	r3, #0
 8004932:	dc05      	bgt.n	8004940 <__sflush_r+0x20>
 8004934:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004936:	2b00      	cmp	r3, #0
 8004938:	dc02      	bgt.n	8004940 <__sflush_r+0x20>
 800493a:	2000      	movs	r0, #0
 800493c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004940:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004942:	2e00      	cmp	r6, #0
 8004944:	d0f9      	beq.n	800493a <__sflush_r+0x1a>
 8004946:	2300      	movs	r3, #0
 8004948:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800494c:	682f      	ldr	r7, [r5, #0]
 800494e:	602b      	str	r3, [r5, #0]
 8004950:	d032      	beq.n	80049b8 <__sflush_r+0x98>
 8004952:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004954:	89a3      	ldrh	r3, [r4, #12]
 8004956:	075a      	lsls	r2, r3, #29
 8004958:	d505      	bpl.n	8004966 <__sflush_r+0x46>
 800495a:	6863      	ldr	r3, [r4, #4]
 800495c:	1ac0      	subs	r0, r0, r3
 800495e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004960:	b10b      	cbz	r3, 8004966 <__sflush_r+0x46>
 8004962:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004964:	1ac0      	subs	r0, r0, r3
 8004966:	2300      	movs	r3, #0
 8004968:	4602      	mov	r2, r0
 800496a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800496c:	6a21      	ldr	r1, [r4, #32]
 800496e:	4628      	mov	r0, r5
 8004970:	47b0      	blx	r6
 8004972:	1c43      	adds	r3, r0, #1
 8004974:	89a3      	ldrh	r3, [r4, #12]
 8004976:	d106      	bne.n	8004986 <__sflush_r+0x66>
 8004978:	6829      	ldr	r1, [r5, #0]
 800497a:	291d      	cmp	r1, #29
 800497c:	d82c      	bhi.n	80049d8 <__sflush_r+0xb8>
 800497e:	4a2a      	ldr	r2, [pc, #168]	; (8004a28 <__sflush_r+0x108>)
 8004980:	40ca      	lsrs	r2, r1
 8004982:	07d6      	lsls	r6, r2, #31
 8004984:	d528      	bpl.n	80049d8 <__sflush_r+0xb8>
 8004986:	2200      	movs	r2, #0
 8004988:	6062      	str	r2, [r4, #4]
 800498a:	04d9      	lsls	r1, r3, #19
 800498c:	6922      	ldr	r2, [r4, #16]
 800498e:	6022      	str	r2, [r4, #0]
 8004990:	d504      	bpl.n	800499c <__sflush_r+0x7c>
 8004992:	1c42      	adds	r2, r0, #1
 8004994:	d101      	bne.n	800499a <__sflush_r+0x7a>
 8004996:	682b      	ldr	r3, [r5, #0]
 8004998:	b903      	cbnz	r3, 800499c <__sflush_r+0x7c>
 800499a:	6560      	str	r0, [r4, #84]	; 0x54
 800499c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800499e:	602f      	str	r7, [r5, #0]
 80049a0:	2900      	cmp	r1, #0
 80049a2:	d0ca      	beq.n	800493a <__sflush_r+0x1a>
 80049a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80049a8:	4299      	cmp	r1, r3
 80049aa:	d002      	beq.n	80049b2 <__sflush_r+0x92>
 80049ac:	4628      	mov	r0, r5
 80049ae:	f000 f8fb 	bl	8004ba8 <_free_r>
 80049b2:	2000      	movs	r0, #0
 80049b4:	6360      	str	r0, [r4, #52]	; 0x34
 80049b6:	e7c1      	b.n	800493c <__sflush_r+0x1c>
 80049b8:	6a21      	ldr	r1, [r4, #32]
 80049ba:	2301      	movs	r3, #1
 80049bc:	4628      	mov	r0, r5
 80049be:	47b0      	blx	r6
 80049c0:	1c41      	adds	r1, r0, #1
 80049c2:	d1c7      	bne.n	8004954 <__sflush_r+0x34>
 80049c4:	682b      	ldr	r3, [r5, #0]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d0c4      	beq.n	8004954 <__sflush_r+0x34>
 80049ca:	2b1d      	cmp	r3, #29
 80049cc:	d001      	beq.n	80049d2 <__sflush_r+0xb2>
 80049ce:	2b16      	cmp	r3, #22
 80049d0:	d101      	bne.n	80049d6 <__sflush_r+0xb6>
 80049d2:	602f      	str	r7, [r5, #0]
 80049d4:	e7b1      	b.n	800493a <__sflush_r+0x1a>
 80049d6:	89a3      	ldrh	r3, [r4, #12]
 80049d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049dc:	81a3      	strh	r3, [r4, #12]
 80049de:	e7ad      	b.n	800493c <__sflush_r+0x1c>
 80049e0:	690f      	ldr	r7, [r1, #16]
 80049e2:	2f00      	cmp	r7, #0
 80049e4:	d0a9      	beq.n	800493a <__sflush_r+0x1a>
 80049e6:	0793      	lsls	r3, r2, #30
 80049e8:	680e      	ldr	r6, [r1, #0]
 80049ea:	bf08      	it	eq
 80049ec:	694b      	ldreq	r3, [r1, #20]
 80049ee:	600f      	str	r7, [r1, #0]
 80049f0:	bf18      	it	ne
 80049f2:	2300      	movne	r3, #0
 80049f4:	eba6 0807 	sub.w	r8, r6, r7
 80049f8:	608b      	str	r3, [r1, #8]
 80049fa:	f1b8 0f00 	cmp.w	r8, #0
 80049fe:	dd9c      	ble.n	800493a <__sflush_r+0x1a>
 8004a00:	6a21      	ldr	r1, [r4, #32]
 8004a02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004a04:	4643      	mov	r3, r8
 8004a06:	463a      	mov	r2, r7
 8004a08:	4628      	mov	r0, r5
 8004a0a:	47b0      	blx	r6
 8004a0c:	2800      	cmp	r0, #0
 8004a0e:	dc06      	bgt.n	8004a1e <__sflush_r+0xfe>
 8004a10:	89a3      	ldrh	r3, [r4, #12]
 8004a12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a16:	81a3      	strh	r3, [r4, #12]
 8004a18:	f04f 30ff 	mov.w	r0, #4294967295
 8004a1c:	e78e      	b.n	800493c <__sflush_r+0x1c>
 8004a1e:	4407      	add	r7, r0
 8004a20:	eba8 0800 	sub.w	r8, r8, r0
 8004a24:	e7e9      	b.n	80049fa <__sflush_r+0xda>
 8004a26:	bf00      	nop
 8004a28:	20400001 	.word	0x20400001

08004a2c <_fflush_r>:
 8004a2c:	b538      	push	{r3, r4, r5, lr}
 8004a2e:	690b      	ldr	r3, [r1, #16]
 8004a30:	4605      	mov	r5, r0
 8004a32:	460c      	mov	r4, r1
 8004a34:	b913      	cbnz	r3, 8004a3c <_fflush_r+0x10>
 8004a36:	2500      	movs	r5, #0
 8004a38:	4628      	mov	r0, r5
 8004a3a:	bd38      	pop	{r3, r4, r5, pc}
 8004a3c:	b118      	cbz	r0, 8004a46 <_fflush_r+0x1a>
 8004a3e:	6983      	ldr	r3, [r0, #24]
 8004a40:	b90b      	cbnz	r3, 8004a46 <_fflush_r+0x1a>
 8004a42:	f7ff fa4f 	bl	8003ee4 <__sinit>
 8004a46:	4b14      	ldr	r3, [pc, #80]	; (8004a98 <_fflush_r+0x6c>)
 8004a48:	429c      	cmp	r4, r3
 8004a4a:	d11b      	bne.n	8004a84 <_fflush_r+0x58>
 8004a4c:	686c      	ldr	r4, [r5, #4]
 8004a4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d0ef      	beq.n	8004a36 <_fflush_r+0xa>
 8004a56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004a58:	07d0      	lsls	r0, r2, #31
 8004a5a:	d404      	bmi.n	8004a66 <_fflush_r+0x3a>
 8004a5c:	0599      	lsls	r1, r3, #22
 8004a5e:	d402      	bmi.n	8004a66 <_fflush_r+0x3a>
 8004a60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a62:	f7ff fadd 	bl	8004020 <__retarget_lock_acquire_recursive>
 8004a66:	4628      	mov	r0, r5
 8004a68:	4621      	mov	r1, r4
 8004a6a:	f7ff ff59 	bl	8004920 <__sflush_r>
 8004a6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a70:	07da      	lsls	r2, r3, #31
 8004a72:	4605      	mov	r5, r0
 8004a74:	d4e0      	bmi.n	8004a38 <_fflush_r+0xc>
 8004a76:	89a3      	ldrh	r3, [r4, #12]
 8004a78:	059b      	lsls	r3, r3, #22
 8004a7a:	d4dd      	bmi.n	8004a38 <_fflush_r+0xc>
 8004a7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a7e:	f7ff fad0 	bl	8004022 <__retarget_lock_release_recursive>
 8004a82:	e7d9      	b.n	8004a38 <_fflush_r+0xc>
 8004a84:	4b05      	ldr	r3, [pc, #20]	; (8004a9c <_fflush_r+0x70>)
 8004a86:	429c      	cmp	r4, r3
 8004a88:	d101      	bne.n	8004a8e <_fflush_r+0x62>
 8004a8a:	68ac      	ldr	r4, [r5, #8]
 8004a8c:	e7df      	b.n	8004a4e <_fflush_r+0x22>
 8004a8e:	4b04      	ldr	r3, [pc, #16]	; (8004aa0 <_fflush_r+0x74>)
 8004a90:	429c      	cmp	r4, r3
 8004a92:	bf08      	it	eq
 8004a94:	68ec      	ldreq	r4, [r5, #12]
 8004a96:	e7da      	b.n	8004a4e <_fflush_r+0x22>
 8004a98:	08004d3c 	.word	0x08004d3c
 8004a9c:	08004d5c 	.word	0x08004d5c
 8004aa0:	08004d1c 	.word	0x08004d1c

08004aa4 <_lseek_r>:
 8004aa4:	b538      	push	{r3, r4, r5, lr}
 8004aa6:	4d07      	ldr	r5, [pc, #28]	; (8004ac4 <_lseek_r+0x20>)
 8004aa8:	4604      	mov	r4, r0
 8004aaa:	4608      	mov	r0, r1
 8004aac:	4611      	mov	r1, r2
 8004aae:	2200      	movs	r2, #0
 8004ab0:	602a      	str	r2, [r5, #0]
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	f7fc f946 	bl	8000d44 <_lseek>
 8004ab8:	1c43      	adds	r3, r0, #1
 8004aba:	d102      	bne.n	8004ac2 <_lseek_r+0x1e>
 8004abc:	682b      	ldr	r3, [r5, #0]
 8004abe:	b103      	cbz	r3, 8004ac2 <_lseek_r+0x1e>
 8004ac0:	6023      	str	r3, [r4, #0]
 8004ac2:	bd38      	pop	{r3, r4, r5, pc}
 8004ac4:	200001f0 	.word	0x200001f0

08004ac8 <__swhatbuf_r>:
 8004ac8:	b570      	push	{r4, r5, r6, lr}
 8004aca:	460e      	mov	r6, r1
 8004acc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ad0:	2900      	cmp	r1, #0
 8004ad2:	b096      	sub	sp, #88	; 0x58
 8004ad4:	4614      	mov	r4, r2
 8004ad6:	461d      	mov	r5, r3
 8004ad8:	da07      	bge.n	8004aea <__swhatbuf_r+0x22>
 8004ada:	2300      	movs	r3, #0
 8004adc:	602b      	str	r3, [r5, #0]
 8004ade:	89b3      	ldrh	r3, [r6, #12]
 8004ae0:	061a      	lsls	r2, r3, #24
 8004ae2:	d410      	bmi.n	8004b06 <__swhatbuf_r+0x3e>
 8004ae4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ae8:	e00e      	b.n	8004b08 <__swhatbuf_r+0x40>
 8004aea:	466a      	mov	r2, sp
 8004aec:	f000 f8be 	bl	8004c6c <_fstat_r>
 8004af0:	2800      	cmp	r0, #0
 8004af2:	dbf2      	blt.n	8004ada <__swhatbuf_r+0x12>
 8004af4:	9a01      	ldr	r2, [sp, #4]
 8004af6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004afa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004afe:	425a      	negs	r2, r3
 8004b00:	415a      	adcs	r2, r3
 8004b02:	602a      	str	r2, [r5, #0]
 8004b04:	e7ee      	b.n	8004ae4 <__swhatbuf_r+0x1c>
 8004b06:	2340      	movs	r3, #64	; 0x40
 8004b08:	2000      	movs	r0, #0
 8004b0a:	6023      	str	r3, [r4, #0]
 8004b0c:	b016      	add	sp, #88	; 0x58
 8004b0e:	bd70      	pop	{r4, r5, r6, pc}

08004b10 <__smakebuf_r>:
 8004b10:	898b      	ldrh	r3, [r1, #12]
 8004b12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004b14:	079d      	lsls	r5, r3, #30
 8004b16:	4606      	mov	r6, r0
 8004b18:	460c      	mov	r4, r1
 8004b1a:	d507      	bpl.n	8004b2c <__smakebuf_r+0x1c>
 8004b1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004b20:	6023      	str	r3, [r4, #0]
 8004b22:	6123      	str	r3, [r4, #16]
 8004b24:	2301      	movs	r3, #1
 8004b26:	6163      	str	r3, [r4, #20]
 8004b28:	b002      	add	sp, #8
 8004b2a:	bd70      	pop	{r4, r5, r6, pc}
 8004b2c:	ab01      	add	r3, sp, #4
 8004b2e:	466a      	mov	r2, sp
 8004b30:	f7ff ffca 	bl	8004ac8 <__swhatbuf_r>
 8004b34:	9900      	ldr	r1, [sp, #0]
 8004b36:	4605      	mov	r5, r0
 8004b38:	4630      	mov	r0, r6
 8004b3a:	f7ff fa73 	bl	8004024 <_malloc_r>
 8004b3e:	b948      	cbnz	r0, 8004b54 <__smakebuf_r+0x44>
 8004b40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b44:	059a      	lsls	r2, r3, #22
 8004b46:	d4ef      	bmi.n	8004b28 <__smakebuf_r+0x18>
 8004b48:	f023 0303 	bic.w	r3, r3, #3
 8004b4c:	f043 0302 	orr.w	r3, r3, #2
 8004b50:	81a3      	strh	r3, [r4, #12]
 8004b52:	e7e3      	b.n	8004b1c <__smakebuf_r+0xc>
 8004b54:	4b0d      	ldr	r3, [pc, #52]	; (8004b8c <__smakebuf_r+0x7c>)
 8004b56:	62b3      	str	r3, [r6, #40]	; 0x28
 8004b58:	89a3      	ldrh	r3, [r4, #12]
 8004b5a:	6020      	str	r0, [r4, #0]
 8004b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b60:	81a3      	strh	r3, [r4, #12]
 8004b62:	9b00      	ldr	r3, [sp, #0]
 8004b64:	6163      	str	r3, [r4, #20]
 8004b66:	9b01      	ldr	r3, [sp, #4]
 8004b68:	6120      	str	r0, [r4, #16]
 8004b6a:	b15b      	cbz	r3, 8004b84 <__smakebuf_r+0x74>
 8004b6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b70:	4630      	mov	r0, r6
 8004b72:	f000 f88d 	bl	8004c90 <_isatty_r>
 8004b76:	b128      	cbz	r0, 8004b84 <__smakebuf_r+0x74>
 8004b78:	89a3      	ldrh	r3, [r4, #12]
 8004b7a:	f023 0303 	bic.w	r3, r3, #3
 8004b7e:	f043 0301 	orr.w	r3, r3, #1
 8004b82:	81a3      	strh	r3, [r4, #12]
 8004b84:	89a0      	ldrh	r0, [r4, #12]
 8004b86:	4305      	orrs	r5, r0
 8004b88:	81a5      	strh	r5, [r4, #12]
 8004b8a:	e7cd      	b.n	8004b28 <__smakebuf_r+0x18>
 8004b8c:	08003e7d 	.word	0x08003e7d

08004b90 <__malloc_lock>:
 8004b90:	4801      	ldr	r0, [pc, #4]	; (8004b98 <__malloc_lock+0x8>)
 8004b92:	f7ff ba45 	b.w	8004020 <__retarget_lock_acquire_recursive>
 8004b96:	bf00      	nop
 8004b98:	200001e8 	.word	0x200001e8

08004b9c <__malloc_unlock>:
 8004b9c:	4801      	ldr	r0, [pc, #4]	; (8004ba4 <__malloc_unlock+0x8>)
 8004b9e:	f7ff ba40 	b.w	8004022 <__retarget_lock_release_recursive>
 8004ba2:	bf00      	nop
 8004ba4:	200001e8 	.word	0x200001e8

08004ba8 <_free_r>:
 8004ba8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004baa:	2900      	cmp	r1, #0
 8004bac:	d048      	beq.n	8004c40 <_free_r+0x98>
 8004bae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bb2:	9001      	str	r0, [sp, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	f1a1 0404 	sub.w	r4, r1, #4
 8004bba:	bfb8      	it	lt
 8004bbc:	18e4      	addlt	r4, r4, r3
 8004bbe:	f7ff ffe7 	bl	8004b90 <__malloc_lock>
 8004bc2:	4a20      	ldr	r2, [pc, #128]	; (8004c44 <_free_r+0x9c>)
 8004bc4:	9801      	ldr	r0, [sp, #4]
 8004bc6:	6813      	ldr	r3, [r2, #0]
 8004bc8:	4615      	mov	r5, r2
 8004bca:	b933      	cbnz	r3, 8004bda <_free_r+0x32>
 8004bcc:	6063      	str	r3, [r4, #4]
 8004bce:	6014      	str	r4, [r2, #0]
 8004bd0:	b003      	add	sp, #12
 8004bd2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004bd6:	f7ff bfe1 	b.w	8004b9c <__malloc_unlock>
 8004bda:	42a3      	cmp	r3, r4
 8004bdc:	d90b      	bls.n	8004bf6 <_free_r+0x4e>
 8004bde:	6821      	ldr	r1, [r4, #0]
 8004be0:	1862      	adds	r2, r4, r1
 8004be2:	4293      	cmp	r3, r2
 8004be4:	bf04      	itt	eq
 8004be6:	681a      	ldreq	r2, [r3, #0]
 8004be8:	685b      	ldreq	r3, [r3, #4]
 8004bea:	6063      	str	r3, [r4, #4]
 8004bec:	bf04      	itt	eq
 8004bee:	1852      	addeq	r2, r2, r1
 8004bf0:	6022      	streq	r2, [r4, #0]
 8004bf2:	602c      	str	r4, [r5, #0]
 8004bf4:	e7ec      	b.n	8004bd0 <_free_r+0x28>
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	b10b      	cbz	r3, 8004c00 <_free_r+0x58>
 8004bfc:	42a3      	cmp	r3, r4
 8004bfe:	d9fa      	bls.n	8004bf6 <_free_r+0x4e>
 8004c00:	6811      	ldr	r1, [r2, #0]
 8004c02:	1855      	adds	r5, r2, r1
 8004c04:	42a5      	cmp	r5, r4
 8004c06:	d10b      	bne.n	8004c20 <_free_r+0x78>
 8004c08:	6824      	ldr	r4, [r4, #0]
 8004c0a:	4421      	add	r1, r4
 8004c0c:	1854      	adds	r4, r2, r1
 8004c0e:	42a3      	cmp	r3, r4
 8004c10:	6011      	str	r1, [r2, #0]
 8004c12:	d1dd      	bne.n	8004bd0 <_free_r+0x28>
 8004c14:	681c      	ldr	r4, [r3, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	6053      	str	r3, [r2, #4]
 8004c1a:	4421      	add	r1, r4
 8004c1c:	6011      	str	r1, [r2, #0]
 8004c1e:	e7d7      	b.n	8004bd0 <_free_r+0x28>
 8004c20:	d902      	bls.n	8004c28 <_free_r+0x80>
 8004c22:	230c      	movs	r3, #12
 8004c24:	6003      	str	r3, [r0, #0]
 8004c26:	e7d3      	b.n	8004bd0 <_free_r+0x28>
 8004c28:	6825      	ldr	r5, [r4, #0]
 8004c2a:	1961      	adds	r1, r4, r5
 8004c2c:	428b      	cmp	r3, r1
 8004c2e:	bf04      	itt	eq
 8004c30:	6819      	ldreq	r1, [r3, #0]
 8004c32:	685b      	ldreq	r3, [r3, #4]
 8004c34:	6063      	str	r3, [r4, #4]
 8004c36:	bf04      	itt	eq
 8004c38:	1949      	addeq	r1, r1, r5
 8004c3a:	6021      	streq	r1, [r4, #0]
 8004c3c:	6054      	str	r4, [r2, #4]
 8004c3e:	e7c7      	b.n	8004bd0 <_free_r+0x28>
 8004c40:	b003      	add	sp, #12
 8004c42:	bd30      	pop	{r4, r5, pc}
 8004c44:	20000098 	.word	0x20000098

08004c48 <_read_r>:
 8004c48:	b538      	push	{r3, r4, r5, lr}
 8004c4a:	4d07      	ldr	r5, [pc, #28]	; (8004c68 <_read_r+0x20>)
 8004c4c:	4604      	mov	r4, r0
 8004c4e:	4608      	mov	r0, r1
 8004c50:	4611      	mov	r1, r2
 8004c52:	2200      	movs	r2, #0
 8004c54:	602a      	str	r2, [r5, #0]
 8004c56:	461a      	mov	r2, r3
 8004c58:	f7fc f830 	bl	8000cbc <_read>
 8004c5c:	1c43      	adds	r3, r0, #1
 8004c5e:	d102      	bne.n	8004c66 <_read_r+0x1e>
 8004c60:	682b      	ldr	r3, [r5, #0]
 8004c62:	b103      	cbz	r3, 8004c66 <_read_r+0x1e>
 8004c64:	6023      	str	r3, [r4, #0]
 8004c66:	bd38      	pop	{r3, r4, r5, pc}
 8004c68:	200001f0 	.word	0x200001f0

08004c6c <_fstat_r>:
 8004c6c:	b538      	push	{r3, r4, r5, lr}
 8004c6e:	4d07      	ldr	r5, [pc, #28]	; (8004c8c <_fstat_r+0x20>)
 8004c70:	2300      	movs	r3, #0
 8004c72:	4604      	mov	r4, r0
 8004c74:	4608      	mov	r0, r1
 8004c76:	4611      	mov	r1, r2
 8004c78:	602b      	str	r3, [r5, #0]
 8004c7a:	f7fc f848 	bl	8000d0e <_fstat>
 8004c7e:	1c43      	adds	r3, r0, #1
 8004c80:	d102      	bne.n	8004c88 <_fstat_r+0x1c>
 8004c82:	682b      	ldr	r3, [r5, #0]
 8004c84:	b103      	cbz	r3, 8004c88 <_fstat_r+0x1c>
 8004c86:	6023      	str	r3, [r4, #0]
 8004c88:	bd38      	pop	{r3, r4, r5, pc}
 8004c8a:	bf00      	nop
 8004c8c:	200001f0 	.word	0x200001f0

08004c90 <_isatty_r>:
 8004c90:	b538      	push	{r3, r4, r5, lr}
 8004c92:	4d06      	ldr	r5, [pc, #24]	; (8004cac <_isatty_r+0x1c>)
 8004c94:	2300      	movs	r3, #0
 8004c96:	4604      	mov	r4, r0
 8004c98:	4608      	mov	r0, r1
 8004c9a:	602b      	str	r3, [r5, #0]
 8004c9c:	f7fc f847 	bl	8000d2e <_isatty>
 8004ca0:	1c43      	adds	r3, r0, #1
 8004ca2:	d102      	bne.n	8004caa <_isatty_r+0x1a>
 8004ca4:	682b      	ldr	r3, [r5, #0]
 8004ca6:	b103      	cbz	r3, 8004caa <_isatty_r+0x1a>
 8004ca8:	6023      	str	r3, [r4, #0]
 8004caa:	bd38      	pop	{r3, r4, r5, pc}
 8004cac:	200001f0 	.word	0x200001f0

08004cb0 <_init>:
 8004cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cb2:	bf00      	nop
 8004cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cb6:	bc08      	pop	{r3}
 8004cb8:	469e      	mov	lr, r3
 8004cba:	4770      	bx	lr

08004cbc <_fini>:
 8004cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cbe:	bf00      	nop
 8004cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cc2:	bc08      	pop	{r3}
 8004cc4:	469e      	mov	lr, r3
 8004cc6:	4770      	bx	lr
