
PE2_NRF24L01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005278  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08005400  08005400  00015400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054c0  080054c0  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  080054c0  080054c0  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  080054c0  080054c0  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054c0  080054c0  000154c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054c4  080054c4  000154c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080054c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  20000088  08005550  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  08005550  00020204  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012cf7  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002838  00000000  00000000  00032daf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  000355e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca8  00000000  00000000  00036388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001711d  00000000  00000000  00037030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011f92  00000000  00000000  0004e14d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084818  00000000  00000000  000600df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e48f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e48  00000000  00000000  000e494c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000088 	.word	0x20000088
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080053e8 	.word	0x080053e8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000008c 	.word	0x2000008c
 80001c4:	080053e8 	.word	0x080053e8

080001c8 <CS_Select>:

#define NRF24_CS_PORT	GPIOB
#define NRF24_CS_PIN	GPIO_PIN_12


void CS_Select(void){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CS_PORT, NRF24_CS_PIN, GPIO_PIN_RESET);
 80001cc:	2200      	movs	r2, #0
 80001ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001d2:	4802      	ldr	r0, [pc, #8]	; (80001dc <CS_Select+0x14>)
 80001d4:	f001 f94a 	bl	800146c <HAL_GPIO_WritePin>
}
 80001d8:	bf00      	nop
 80001da:	bd80      	pop	{r7, pc}
 80001dc:	48000400 	.word	0x48000400

080001e0 <CS_UnSelect>:

void CS_UnSelect(void){
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CS_PORT, NRF24_CS_PIN, GPIO_PIN_SET);
 80001e4:	2201      	movs	r2, #1
 80001e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001ea:	4802      	ldr	r0, [pc, #8]	; (80001f4 <CS_UnSelect+0x14>)
 80001ec:	f001 f93e 	bl	800146c <HAL_GPIO_WritePin>
}
 80001f0:	bf00      	nop
 80001f2:	bd80      	pop	{r7, pc}
 80001f4:	48000400 	.word	0x48000400

080001f8 <CE_Enable>:

void CE_Enable(void){
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 80001fc:	2201      	movs	r2, #1
 80001fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000202:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000206:	f001 f931 	bl	800146c <HAL_GPIO_WritePin>
}
 800020a:	bf00      	nop
 800020c:	bd80      	pop	{r7, pc}

0800020e <CE_Disable>:

void CE_Disable(void){
 800020e:	b580      	push	{r7, lr}
 8000210:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 8000212:	2200      	movs	r2, #0
 8000214:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000218:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800021c:	f001 f926 	bl	800146c <HAL_GPIO_WritePin>
}
 8000220:	bf00      	nop
 8000222:	bd80      	pop	{r7, pc}

08000224 <nrf24_WriteReg>:

//write a single byte to a particular register
void nrf24_WriteReg(uint8_t Reg, uint8_t Data){
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0
 800022a:	4603      	mov	r3, r0
 800022c:	460a      	mov	r2, r1
 800022e:	71fb      	strb	r3, [r7, #7]
 8000230:	4613      	mov	r3, r2
 8000232:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8000234:	79fb      	ldrb	r3, [r7, #7]
 8000236:	f043 0320 	orr.w	r3, r3, #32
 800023a:	b2db      	uxtb	r3, r3
 800023c:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 800023e:	79bb      	ldrb	r3, [r7, #6]
 8000240:	737b      	strb	r3, [r7, #13]

	//Pull the CS Pin LOW to select the device
	CS_Select();
 8000242:	f7ff ffc1 	bl	80001c8 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 8000246:	f107 010c 	add.w	r1, r7, #12
 800024a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800024e:	2202      	movs	r2, #2
 8000250:	4804      	ldr	r0, [pc, #16]	; (8000264 <nrf24_WriteReg+0x40>)
 8000252:	f002 fdd2 	bl	8002dfa <HAL_SPI_Transmit>

	//Pull the CS HIGH to release the device
	CS_UnSelect();
 8000256:	f7ff ffc3 	bl	80001e0 <CS_UnSelect>
}
 800025a:	bf00      	nop
 800025c:	3710      	adds	r7, #16
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	200000b0 	.word	0x200000b0

08000268 <nrf24_WriteRegMulti>:


//write multiple bytes to a particular register
void nrf24_WriteRegMulti(uint8_t Reg, uint8_t *data, int size){
 8000268:	b580      	push	{r7, lr}
 800026a:	b086      	sub	sp, #24
 800026c:	af00      	add	r7, sp, #0
 800026e:	4603      	mov	r3, r0
 8000270:	60b9      	str	r1, [r7, #8]
 8000272:	607a      	str	r2, [r7, #4]
 8000274:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg | 1<<5;
 8000276:	7bfb      	ldrb	r3, [r7, #15]
 8000278:	f043 0320 	orr.w	r3, r3, #32
 800027c:	b2db      	uxtb	r3, r3
 800027e:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	//Pull the CS Pin LOW to select the device
	CS_Select();
 8000280:	f7ff ffa2 	bl	80001c8 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 8000284:	f107 0114 	add.w	r1, r7, #20
 8000288:	2364      	movs	r3, #100	; 0x64
 800028a:	2201      	movs	r2, #1
 800028c:	4808      	ldr	r0, [pc, #32]	; (80002b0 <nrf24_WriteRegMulti+0x48>)
 800028e:	f002 fdb4 	bl	8002dfa <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	b29a      	uxth	r2, r3
 8000296:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800029a:	68b9      	ldr	r1, [r7, #8]
 800029c:	4804      	ldr	r0, [pc, #16]	; (80002b0 <nrf24_WriteRegMulti+0x48>)
 800029e:	f002 fdac 	bl	8002dfa <HAL_SPI_Transmit>

	//Pull the CS HIGH to release the device
	CS_UnSelect();
 80002a2:	f7ff ff9d 	bl	80001e0 <CS_UnSelect>
}
 80002a6:	bf00      	nop
 80002a8:	3718      	adds	r7, #24
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	200000b0 	.word	0x200000b0

080002b4 <nrf24_ReadReg>:


//Read multiple bytes from the register
uint8_t nrf24_ReadReg (uint8_t Reg){
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b084      	sub	sp, #16
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	71fb      	strb	r3, [r7, #7]
	uint8_t data =0;
 80002be:	2300      	movs	r3, #0
 80002c0:	73fb      	strb	r3, [r7, #15]
	//Pull the CS Pin LOW to select the device
	CS_Select();
 80002c2:	f7ff ff81 	bl	80001c8 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 80002c6:	1df9      	adds	r1, r7, #7
 80002c8:	2364      	movs	r3, #100	; 0x64
 80002ca:	2201      	movs	r2, #1
 80002cc:	4808      	ldr	r0, [pc, #32]	; (80002f0 <nrf24_ReadReg+0x3c>)
 80002ce:	f002 fd94 	bl	8002dfa <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 80002d2:	f107 010f 	add.w	r1, r7, #15
 80002d6:	2364      	movs	r3, #100	; 0x64
 80002d8:	2201      	movs	r2, #1
 80002da:	4805      	ldr	r0, [pc, #20]	; (80002f0 <nrf24_ReadReg+0x3c>)
 80002dc:	f002 ff02 	bl	80030e4 <HAL_SPI_Receive>

	//Pull the CS HIGH to release the device
	CS_UnSelect();
 80002e0:	f7ff ff7e 	bl	80001e0 <CS_UnSelect>

	return data;
 80002e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80002e6:	4618      	mov	r0, r3
 80002e8:	3710      	adds	r7, #16
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	200000b0 	.word	0x200000b0

080002f4 <nrfsendCmd>:
	// Pull the CS HIGH to release the device
	CS_UnSelect();
}

//send command to the NRF24
void nrfsendCmd(uint8_t cmd){
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b082      	sub	sp, #8
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	4603      	mov	r3, r0
 80002fc:	71fb      	strb	r3, [r7, #7]
	//Pull the CS Pin LOW to select the device
	CS_Select();
 80002fe:	f7ff ff63 	bl	80001c8 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 8000302:	1df9      	adds	r1, r7, #7
 8000304:	2364      	movs	r3, #100	; 0x64
 8000306:	2201      	movs	r2, #1
 8000308:	4804      	ldr	r0, [pc, #16]	; (800031c <nrfsendCmd+0x28>)
 800030a:	f002 fd76 	bl	8002dfa <HAL_SPI_Transmit>

	//Pull the CS HIGH to release the device
	CS_UnSelect();
 800030e:	f7ff ff67 	bl	80001e0 <CS_UnSelect>
}
 8000312:	bf00      	nop
 8000314:	3708      	adds	r7, #8
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	200000b0 	.word	0x200000b0

08000320 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b088      	sub	sp, #32
 8000324:	af00      	add	r7, sp, #0
 8000326:	4603      	mov	r3, r0
 8000328:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 800032a:	79fb      	ldrb	r3, [r7, #7]
 800032c:	2b07      	cmp	r3, #7
 800032e:	d104      	bne.n	800033a <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 8000330:	2100      	movs	r1, #0
 8000332:	2007      	movs	r0, #7
 8000334:	f7ff ff76 	bl	8000224 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 8000338:	e090      	b.n	800045c <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	2b17      	cmp	r3, #23
 800033e:	d104      	bne.n	800034a <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 8000340:	2111      	movs	r1, #17
 8000342:	2017      	movs	r0, #23
 8000344:	f7ff ff6e 	bl	8000224 <nrf24_WriteReg>
}
 8000348:	e088      	b.n	800045c <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 800034a:	2108      	movs	r1, #8
 800034c:	2000      	movs	r0, #0
 800034e:	f7ff ff69 	bl	8000224 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 8000352:	213f      	movs	r1, #63	; 0x3f
 8000354:	2001      	movs	r0, #1
 8000356:	f7ff ff65 	bl	8000224 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 800035a:	2103      	movs	r1, #3
 800035c:	2002      	movs	r0, #2
 800035e:	f7ff ff61 	bl	8000224 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 8000362:	2103      	movs	r1, #3
 8000364:	2003      	movs	r0, #3
 8000366:	f7ff ff5d 	bl	8000224 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 800036a:	2103      	movs	r1, #3
 800036c:	2004      	movs	r0, #4
 800036e:	f7ff ff59 	bl	8000224 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 8000372:	2102      	movs	r1, #2
 8000374:	2005      	movs	r0, #5
 8000376:	f7ff ff55 	bl	8000224 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 800037a:	210e      	movs	r1, #14
 800037c:	2006      	movs	r0, #6
 800037e:	f7ff ff51 	bl	8000224 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 8000382:	2100      	movs	r1, #0
 8000384:	2007      	movs	r0, #7
 8000386:	f7ff ff4d 	bl	8000224 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 800038a:	2100      	movs	r1, #0
 800038c:	2008      	movs	r0, #8
 800038e:	f7ff ff49 	bl	8000224 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 8000392:	2100      	movs	r1, #0
 8000394:	2009      	movs	r0, #9
 8000396:	f7ff ff45 	bl	8000224 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 800039a:	4a32      	ldr	r2, [pc, #200]	; (8000464 <nrf24_reset+0x144>)
 800039c:	f107 0318 	add.w	r3, r7, #24
 80003a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003a4:	6018      	str	r0, [r3, #0]
 80003a6:	3304      	adds	r3, #4
 80003a8:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 80003aa:	f107 0318 	add.w	r3, r7, #24
 80003ae:	2205      	movs	r2, #5
 80003b0:	4619      	mov	r1, r3
 80003b2:	200a      	movs	r0, #10
 80003b4:	f7ff ff58 	bl	8000268 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 80003b8:	4a2b      	ldr	r2, [pc, #172]	; (8000468 <nrf24_reset+0x148>)
 80003ba:	f107 0310 	add.w	r3, r7, #16
 80003be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003c2:	6018      	str	r0, [r3, #0]
 80003c4:	3304      	adds	r3, #4
 80003c6:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 80003c8:	f107 0310 	add.w	r3, r7, #16
 80003cc:	2205      	movs	r2, #5
 80003ce:	4619      	mov	r1, r3
 80003d0:	200b      	movs	r0, #11
 80003d2:	f7ff ff49 	bl	8000268 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 80003d6:	21c3      	movs	r1, #195	; 0xc3
 80003d8:	200c      	movs	r0, #12
 80003da:	f7ff ff23 	bl	8000224 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 80003de:	21c4      	movs	r1, #196	; 0xc4
 80003e0:	200d      	movs	r0, #13
 80003e2:	f7ff ff1f 	bl	8000224 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 80003e6:	21c5      	movs	r1, #197	; 0xc5
 80003e8:	200e      	movs	r0, #14
 80003ea:	f7ff ff1b 	bl	8000224 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 80003ee:	21c6      	movs	r1, #198	; 0xc6
 80003f0:	200f      	movs	r0, #15
 80003f2:	f7ff ff17 	bl	8000224 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80003f6:	4a1b      	ldr	r2, [pc, #108]	; (8000464 <nrf24_reset+0x144>)
 80003f8:	f107 0308 	add.w	r3, r7, #8
 80003fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000400:	6018      	str	r0, [r3, #0]
 8000402:	3304      	adds	r3, #4
 8000404:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 8000406:	f107 0308 	add.w	r3, r7, #8
 800040a:	2205      	movs	r2, #5
 800040c:	4619      	mov	r1, r3
 800040e:	2010      	movs	r0, #16
 8000410:	f7ff ff2a 	bl	8000268 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 8000414:	2100      	movs	r1, #0
 8000416:	2011      	movs	r0, #17
 8000418:	f7ff ff04 	bl	8000224 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 800041c:	2100      	movs	r1, #0
 800041e:	2012      	movs	r0, #18
 8000420:	f7ff ff00 	bl	8000224 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 8000424:	2100      	movs	r1, #0
 8000426:	2013      	movs	r0, #19
 8000428:	f7ff fefc 	bl	8000224 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 800042c:	2100      	movs	r1, #0
 800042e:	2014      	movs	r0, #20
 8000430:	f7ff fef8 	bl	8000224 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 8000434:	2100      	movs	r1, #0
 8000436:	2015      	movs	r0, #21
 8000438:	f7ff fef4 	bl	8000224 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 800043c:	2100      	movs	r1, #0
 800043e:	2016      	movs	r0, #22
 8000440:	f7ff fef0 	bl	8000224 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 8000444:	2111      	movs	r1, #17
 8000446:	2017      	movs	r0, #23
 8000448:	f7ff feec 	bl	8000224 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 800044c:	2100      	movs	r1, #0
 800044e:	201c      	movs	r0, #28
 8000450:	f7ff fee8 	bl	8000224 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 8000454:	2100      	movs	r1, #0
 8000456:	201d      	movs	r0, #29
 8000458:	f7ff fee4 	bl	8000224 <nrf24_WriteReg>
}
 800045c:	bf00      	nop
 800045e:	3720      	adds	r7, #32
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	08005400 	.word	0x08005400
 8000468:	08005408 	.word	0x08005408

0800046c <NRF24_Init>:


void NRF24_Init(void){
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
	//disable the chip before configuration
	CE_Disable();
 8000470:	f7ff fecd 	bl	800020e <CE_Disable>

	// reset everything
	nrf24_reset (0);
 8000474:	2000      	movs	r0, #0
 8000476:	f7ff ff53 	bl	8000320 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0); 		//Will be configure later
 800047a:	2100      	movs	r1, #0
 800047c:	2000      	movs	r0, #0
 800047e:	f7ff fed1 	bl	8000224 <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0); 		//No auto ACK
 8000482:	2100      	movs	r1, #0
 8000484:	2001      	movs	r0, #1
 8000486:	f7ff fecd 	bl	8000224 <nrf24_WriteReg>

	nrf24_WriteReg(EN_RXADDR, 0);	//Not enabling any data pipe right now
 800048a:	2100      	movs	r1, #0
 800048c:	2002      	movs	r0, #2
 800048e:	f7ff fec9 	bl	8000224 <nrf24_WriteReg>

	nrf24_WriteReg(SETUP_AW, 0x03);	//5 Bytes for the TX_RX address
 8000492:	2103      	movs	r1, #3
 8000494:	2003      	movs	r0, #3
 8000496:	f7ff fec5 	bl	8000224 <nrf24_WriteReg>

	nrf24_WriteReg(SETUP_RETR, 0);	//No retransmission
 800049a:	2100      	movs	r1, #0
 800049c:	2004      	movs	r0, #4
 800049e:	f7ff fec1 	bl	8000224 <nrf24_WriteReg>

	nrf24_WriteReg(RF_CH, 0);		//Will be setup during TX or RX
 80004a2:	2100      	movs	r1, #0
 80004a4:	2005      	movs	r0, #5
 80004a6:	f7ff febd 	bl	8000224 <nrf24_WriteReg>

	nrf24_WriteReg(RF_SETUP, 0x0E);	//Power = 0db, data rate = 2Mbps zie datasheet for other options
 80004aa:	210e      	movs	r1, #14
 80004ac:	2006      	movs	r0, #6
 80004ae:	f7ff feb9 	bl	8000224 <nrf24_WriteReg>

	//enable the chip after configuring the device
	CE_Enable();
 80004b2:	f7ff fea1 	bl	80001f8 <CE_Enable>
}
 80004b6:	bf00      	nop
 80004b8:	bd80      	pop	{r7, pc}

080004ba <NRF24_TxMode>:


//Set up the TX mode
void NRF24_TxMode (uint8_t *Address, uint8_t channel){
 80004ba:	b580      	push	{r7, lr}
 80004bc:	b084      	sub	sp, #16
 80004be:	af00      	add	r7, sp, #0
 80004c0:	6078      	str	r0, [r7, #4]
 80004c2:	460b      	mov	r3, r1
 80004c4:	70fb      	strb	r3, [r7, #3]
	//disable the chip before configuring the device
	CE_Disable();
 80004c6:	f7ff fea2 	bl	800020e <CE_Disable>

	nrf24_WriteReg(RF_CH, channel); //select the channel, zie datasheet for channel
 80004ca:	78fb      	ldrb	r3, [r7, #3]
 80004cc:	4619      	mov	r1, r3
 80004ce:	2005      	movs	r0, #5
 80004d0:	f7ff fea8 	bl	8000224 <nrf24_WriteReg>

	nrf24_WriteRegMulti(TX_ADDR, Address, 5);	//Write the TX adddress
 80004d4:	2205      	movs	r2, #5
 80004d6:	6879      	ldr	r1, [r7, #4]
 80004d8:	2010      	movs	r0, #16
 80004da:	f7ff fec5 	bl	8000268 <nrf24_WriteRegMulti>

	//power up the device
	uint8_t config = nrf24_ReadReg(CONFIG);
 80004de:	2000      	movs	r0, #0
 80004e0:	f7ff fee8 	bl	80002b4 <nrf24_ReadReg>
 80004e4:	4603      	mov	r3, r0
 80004e6:	73fb      	strb	r3, [r7, #15]
	config = config | (1<<1);	 // write 1 in the PWR_UP bit
 80004e8:	7bfb      	ldrb	r3, [r7, #15]
 80004ea:	f043 0302 	orr.w	r3, r3, #2
 80004ee:	73fb      	strb	r3, [r7, #15]
	//config = config & (0xF2);    // write 0 in the PRIM_RX, and 1 in the PWR_UP, and all other bits are masked
	nrf24_WriteReg(CONFIG, config);
 80004f0:	7bfb      	ldrb	r3, [r7, #15]
 80004f2:	4619      	mov	r1, r3
 80004f4:	2000      	movs	r0, #0
 80004f6:	f7ff fe95 	bl	8000224 <nrf24_WriteReg>

	//enable the chip after configuring the device
	CE_Enable();
 80004fa:	f7ff fe7d 	bl	80001f8 <CE_Enable>
}
 80004fe:	bf00      	nop
 8000500:	3710      	adds	r7, #16
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
	...

08000508 <NRF24_Transmit>:


//transmit the data
uint8_t NRF24_Transmit(uint8_t *data){
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]

	uint8_t cmdtosend = 0;
 8000510:	2300      	movs	r3, #0
 8000512:	73bb      	strb	r3, [r7, #14]

	//select the device
	CS_Select();
 8000514:	f7ff fe58 	bl	80001c8 <CS_Select>

	//payload command
	cmdtosend = W_TX_PAYLOAD;
 8000518:	23a0      	movs	r3, #160	; 0xa0
 800051a:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 800051c:	f107 010e 	add.w	r1, r7, #14
 8000520:	2364      	movs	r3, #100	; 0x64
 8000522:	2201      	movs	r2, #1
 8000524:	4816      	ldr	r0, [pc, #88]	; (8000580 <NRF24_Transmit+0x78>)
 8000526:	f002 fc68 	bl	8002dfa <HAL_SPI_Transmit>

	//send the payload
	HAL_SPI_Transmit(NRF24_SPI, data,32,1000);
 800052a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800052e:	2220      	movs	r2, #32
 8000530:	6879      	ldr	r1, [r7, #4]
 8000532:	4813      	ldr	r0, [pc, #76]	; (8000580 <NRF24_Transmit+0x78>)
 8000534:	f002 fc61 	bl	8002dfa <HAL_SPI_Transmit>

	//Unselect the device
	CS_UnSelect();
 8000538:	f7ff fe52 	bl	80001e0 <CS_UnSelect>

	HAL_Delay(1);
 800053c:	2001      	movs	r0, #1
 800053e:	f000 fc77 	bl	8000e30 <HAL_Delay>

	uint8_t fifostatus = nrf24_ReadReg(FIFO_STATUS);
 8000542:	2017      	movs	r0, #23
 8000544:	f7ff feb6 	bl	80002b4 <nrf24_ReadReg>
 8000548:	4603      	mov	r3, r0
 800054a:	73fb      	strb	r3, [r7, #15]

	if ((fifostatus&(1<<4)) && (!(fifostatus&(1<<3))))
 800054c:	7bfb      	ldrb	r3, [r7, #15]
 800054e:	f003 0310 	and.w	r3, r3, #16
 8000552:	2b00      	cmp	r3, #0
 8000554:	d00f      	beq.n	8000576 <NRF24_Transmit+0x6e>
 8000556:	7bfb      	ldrb	r3, [r7, #15]
 8000558:	f003 0308 	and.w	r3, r3, #8
 800055c:	2b00      	cmp	r3, #0
 800055e:	d10a      	bne.n	8000576 <NRF24_Transmit+0x6e>
		{
			cmdtosend = FLUSH_TX;
 8000560:	23e1      	movs	r3, #225	; 0xe1
 8000562:	73bb      	strb	r3, [r7, #14]
			nrfsendCmd(cmdtosend);
 8000564:	7bbb      	ldrb	r3, [r7, #14]
 8000566:	4618      	mov	r0, r3
 8000568:	f7ff fec4 	bl	80002f4 <nrfsendCmd>

			// reset FIFO_STATUS
			nrf24_reset (FIFO_STATUS);
 800056c:	2017      	movs	r0, #23
 800056e:	f7ff fed7 	bl	8000320 <nrf24_reset>

			return 1;
 8000572:	2301      	movs	r3, #1
 8000574:	e000      	b.n	8000578 <NRF24_Transmit+0x70>
		}

		return 0;
 8000576:	2300      	movs	r3, #0
}
 8000578:	4618      	mov	r0, r3
 800057a:	3710      	adds	r7, #16
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	200000b0 	.word	0x200000b0

08000584 <_write>:
#include <stdio.h>
#include <errno.h>
#include <sys/stat.h>
#include <sys/times.h>
#include <sys/unistd.h>
int _write(int file, char *ptr, int len) {
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af00      	add	r7, sp, #0
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef xStatus;
    switch (file) {
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	2b01      	cmp	r3, #1
 8000594:	d003      	beq.n	800059e <_write+0x1a>
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	2b02      	cmp	r3, #2
 800059a:	d015      	beq.n	80005c8 <_write+0x44>
 800059c:	e029      	b.n	80005f2 <_write+0x6e>
    case STDOUT_FILENO: /*stdout*/
		xStatus = HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	b29a      	uxth	r2, r3
 80005a2:	f04f 33ff 	mov.w	r3, #4294967295
 80005a6:	68b9      	ldr	r1, [r7, #8]
 80005a8:	481a      	ldr	r0, [pc, #104]	; (8000614 <_write+0x90>)
 80005aa:	f003 faff 	bl	8003bac <HAL_UART_Transmit>
 80005ae:	4603      	mov	r3, r0
 80005b0:	75fb      	strb	r3, [r7, #23]
		if (xStatus != HAL_OK) {
 80005b2:	7dfb      	ldrb	r3, [r7, #23]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d024      	beq.n	8000602 <_write+0x7e>
			errno = EIO;
 80005b8:	f004 fa1e 	bl	80049f8 <__errno>
 80005bc:	4603      	mov	r3, r0
 80005be:	2205      	movs	r2, #5
 80005c0:	601a      	str	r2, [r3, #0]
			return -1;
 80005c2:	f04f 33ff 	mov.w	r3, #4294967295
 80005c6:	e020      	b.n	800060a <_write+0x86>
		}
        break;
    case STDERR_FILENO: /*stderr*/
		xStatus = HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	b29a      	uxth	r2, r3
 80005cc:	f04f 33ff 	mov.w	r3, #4294967295
 80005d0:	68b9      	ldr	r1, [r7, #8]
 80005d2:	4810      	ldr	r0, [pc, #64]	; (8000614 <_write+0x90>)
 80005d4:	f003 faea 	bl	8003bac <HAL_UART_Transmit>
 80005d8:	4603      	mov	r3, r0
 80005da:	75fb      	strb	r3, [r7, #23]
		if (xStatus != HAL_OK) {
 80005dc:	7dfb      	ldrb	r3, [r7, #23]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d011      	beq.n	8000606 <_write+0x82>
			errno = EIO;
 80005e2:	f004 fa09 	bl	80049f8 <__errno>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2205      	movs	r2, #5
 80005ea:	601a      	str	r2, [r3, #0]
			return -1;
 80005ec:	f04f 33ff 	mov.w	r3, #4294967295
 80005f0:	e00b      	b.n	800060a <_write+0x86>
		}
        break;
    default:
        errno = EBADF;
 80005f2:	f004 fa01 	bl	80049f8 <__errno>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2209      	movs	r2, #9
 80005fa:	601a      	str	r2, [r3, #0]
        return -1;
 80005fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000600:	e003      	b.n	800060a <_write+0x86>
        break;
 8000602:	bf00      	nop
 8000604:	e000      	b.n	8000608 <_write+0x84>
        break;
 8000606:	bf00      	nop
    }
    return len;
 8000608:	687b      	ldr	r3, [r7, #4]
}
 800060a:	4618      	mov	r0, r3
 800060c:	3718      	adds	r7, #24
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20000168 	.word	0x20000168

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061c:	f000 fba2 	bl	8000d64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000620:	f000 f82e 	bl	8000680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000624:	f000 f93a 	bl	800089c <MX_GPIO_Init>
  MX_SPI2_Init();
 8000628:	f000 f8c6 	bl	80007b8 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 800062c:	f000 f902 	bl	8000834 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000630:	f000 f882 	bl	8000738 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  NRF24_Init();
 8000634:	f7ff ff1a 	bl	800046c <NRF24_Init>

  //TX MODE
  NRF24_TxMode(TxAddress, 10);
 8000638:	210a      	movs	r1, #10
 800063a:	480e      	ldr	r0, [pc, #56]	; (8000674 <main+0x5c>)
 800063c:	f7ff ff3d 	bl	80004ba <NRF24_TxMode>
  HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, 0);
 8000640:	2200      	movs	r2, #0
 8000642:	2120      	movs	r1, #32
 8000644:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000648:	f000 ff10 	bl	800146c <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if (NRF24_Transmit(TxData) == 1){
 800064c:	480a      	ldr	r0, [pc, #40]	; (8000678 <main+0x60>)
 800064e:	f7ff ff5b 	bl	8000508 <NRF24_Transmit>
 8000652:	4603      	mov	r3, r0
 8000654:	2b01      	cmp	r3, #1
 8000656:	d1f9      	bne.n	800064c <main+0x34>
	 	  	  		 HAL_GPIO_TogglePin(LEDA_GPIO_Port, LEDA_Pin);
 8000658:	2120      	movs	r1, #32
 800065a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800065e:	f000 ff1d 	bl	800149c <HAL_GPIO_TogglePin>
	 	  	  	 	 printf("TX is working!!!\r\n");
 8000662:	4806      	ldr	r0, [pc, #24]	; (800067c <main+0x64>)
 8000664:	f004 fa68 	bl	8004b38 <puts>
	 	  	  	 HAL_Delay(1000);
 8000668:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800066c:	f000 fbe0 	bl	8000e30 <HAL_Delay>
	  if (NRF24_Transmit(TxData) == 1){
 8000670:	e7ec      	b.n	800064c <main+0x34>
 8000672:	bf00      	nop
 8000674:	20000000 	.word	0x20000000
 8000678:	20000008 	.word	0x20000008
 800067c:	08005410 	.word	0x08005410

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b09c      	sub	sp, #112	; 0x70
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800068a:	2228      	movs	r2, #40	; 0x28
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f004 f9dc 	bl	8004a4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	2230      	movs	r2, #48	; 0x30
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f004 f9ce 	bl	8004a4c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80006b0:	2303      	movs	r3, #3
 80006b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV4;
 80006ba:	2303      	movs	r3, #3
 80006bc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006be:	2301      	movs	r3, #1
 80006c0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c2:	2310      	movs	r3, #16
 80006c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c6:	2302      	movs	r3, #2
 80006c8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006ce:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL5;
 80006d0:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80006d4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006da:	4618      	mov	r0, r3
 80006dc:	f001 f81e 	bl	800171c <HAL_RCC_OscConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80006e6:	f000 f949 	bl	800097c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ea:	230f      	movs	r3, #15
 80006ec:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ee:	2302      	movs	r3, #2
 80006f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80006f2:	2390      	movs	r3, #144	; 0x90
 80006f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000702:	2100      	movs	r1, #0
 8000704:	4618      	mov	r0, r3
 8000706:	f001 ff11 	bl	800252c <HAL_RCC_ClockConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000710:	f000 f934 	bl	800097c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000714:	2320      	movs	r3, #32
 8000716:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000718:	2300      	movs	r3, #0
 800071a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	4618      	mov	r0, r3
 8000720:	f002 f93c 	bl	800299c <HAL_RCCEx_PeriphCLKConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800072a:	f000 f927 	bl	800097c <Error_Handler>
  }
}
 800072e:	bf00      	nop
 8000730:	3770      	adds	r7, #112	; 0x70
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
	...

08000738 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800073c:	4b1b      	ldr	r3, [pc, #108]	; (80007ac <MX_I2C1_Init+0x74>)
 800073e:	4a1c      	ldr	r2, [pc, #112]	; (80007b0 <MX_I2C1_Init+0x78>)
 8000740:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000742:	4b1a      	ldr	r3, [pc, #104]	; (80007ac <MX_I2C1_Init+0x74>)
 8000744:	4a1b      	ldr	r2, [pc, #108]	; (80007b4 <MX_I2C1_Init+0x7c>)
 8000746:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000748:	4b18      	ldr	r3, [pc, #96]	; (80007ac <MX_I2C1_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800074e:	4b17      	ldr	r3, [pc, #92]	; (80007ac <MX_I2C1_Init+0x74>)
 8000750:	2201      	movs	r2, #1
 8000752:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000754:	4b15      	ldr	r3, [pc, #84]	; (80007ac <MX_I2C1_Init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800075a:	4b14      	ldr	r3, [pc, #80]	; (80007ac <MX_I2C1_Init+0x74>)
 800075c:	2200      	movs	r2, #0
 800075e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000760:	4b12      	ldr	r3, [pc, #72]	; (80007ac <MX_I2C1_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <MX_I2C1_Init+0x74>)
 8000768:	2200      	movs	r2, #0
 800076a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800076c:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <MX_I2C1_Init+0x74>)
 800076e:	2200      	movs	r2, #0
 8000770:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000772:	480e      	ldr	r0, [pc, #56]	; (80007ac <MX_I2C1_Init+0x74>)
 8000774:	f000 feac 	bl	80014d0 <HAL_I2C_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800077e:	f000 f8fd 	bl	800097c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000782:	2100      	movs	r1, #0
 8000784:	4809      	ldr	r0, [pc, #36]	; (80007ac <MX_I2C1_Init+0x74>)
 8000786:	f000 ff32 	bl	80015ee <HAL_I2CEx_ConfigAnalogFilter>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000790:	f000 f8f4 	bl	800097c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000794:	2100      	movs	r1, #0
 8000796:	4805      	ldr	r0, [pc, #20]	; (80007ac <MX_I2C1_Init+0x74>)
 8000798:	f000 ff74 	bl	8001684 <HAL_I2CEx_ConfigDigitalFilter>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007a2:	f000 f8eb 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000114 	.word	0x20000114
 80007b0:	40005400 	.word	0x40005400
 80007b4:	2000090e 	.word	0x2000090e

080007b8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80007bc:	4b1b      	ldr	r3, [pc, #108]	; (800082c <MX_SPI2_Init+0x74>)
 80007be:	4a1c      	ldr	r2, [pc, #112]	; (8000830 <MX_SPI2_Init+0x78>)
 80007c0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80007c2:	4b1a      	ldr	r3, [pc, #104]	; (800082c <MX_SPI2_Init+0x74>)
 80007c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007c8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80007ca:	4b18      	ldr	r3, [pc, #96]	; (800082c <MX_SPI2_Init+0x74>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007d0:	4b16      	ldr	r3, [pc, #88]	; (800082c <MX_SPI2_Init+0x74>)
 80007d2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80007d6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007d8:	4b14      	ldr	r3, [pc, #80]	; (800082c <MX_SPI2_Init+0x74>)
 80007da:	2200      	movs	r2, #0
 80007dc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007de:	4b13      	ldr	r3, [pc, #76]	; (800082c <MX_SPI2_Init+0x74>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80007e4:	4b11      	ldr	r3, [pc, #68]	; (800082c <MX_SPI2_Init+0x74>)
 80007e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007ea:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007ec:	4b0f      	ldr	r3, [pc, #60]	; (800082c <MX_SPI2_Init+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	; (800082c <MX_SPI2_Init+0x74>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007f8:	4b0c      	ldr	r3, [pc, #48]	; (800082c <MX_SPI2_Init+0x74>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	; (800082c <MX_SPI2_Init+0x74>)
 8000800:	2200      	movs	r2, #0
 8000802:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000804:	4b09      	ldr	r3, [pc, #36]	; (800082c <MX_SPI2_Init+0x74>)
 8000806:	2207      	movs	r2, #7
 8000808:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800080a:	4b08      	ldr	r3, [pc, #32]	; (800082c <MX_SPI2_Init+0x74>)
 800080c:	2200      	movs	r2, #0
 800080e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <MX_SPI2_Init+0x74>)
 8000812:	2208      	movs	r2, #8
 8000814:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000816:	4805      	ldr	r0, [pc, #20]	; (800082c <MX_SPI2_Init+0x74>)
 8000818:	f002 fa44 	bl	8002ca4 <HAL_SPI_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000822:	f000 f8ab 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	200000b0 	.word	0x200000b0
 8000830:	40003800 	.word	0x40003800

08000834 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000838:	4b16      	ldr	r3, [pc, #88]	; (8000894 <MX_USART2_UART_Init+0x60>)
 800083a:	4a17      	ldr	r2, [pc, #92]	; (8000898 <MX_USART2_UART_Init+0x64>)
 800083c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800083e:	4b15      	ldr	r3, [pc, #84]	; (8000894 <MX_USART2_UART_Init+0x60>)
 8000840:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000844:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000846:	4b13      	ldr	r3, [pc, #76]	; (8000894 <MX_USART2_UART_Init+0x60>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800084c:	4b11      	ldr	r3, [pc, #68]	; (8000894 <MX_USART2_UART_Init+0x60>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000852:	4b10      	ldr	r3, [pc, #64]	; (8000894 <MX_USART2_UART_Init+0x60>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000858:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <MX_USART2_UART_Init+0x60>)
 800085a:	220c      	movs	r2, #12
 800085c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085e:	4b0d      	ldr	r3, [pc, #52]	; (8000894 <MX_USART2_UART_Init+0x60>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000864:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <MX_USART2_UART_Init+0x60>)
 8000866:	2200      	movs	r2, #0
 8000868:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800086a:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <MX_USART2_UART_Init+0x60>)
 800086c:	2200      	movs	r2, #0
 800086e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8000870:	4b08      	ldr	r3, [pc, #32]	; (8000894 <MX_USART2_UART_Init+0x60>)
 8000872:	2208      	movs	r2, #8
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8000876:	4b07      	ldr	r3, [pc, #28]	; (8000894 <MX_USART2_UART_Init+0x60>)
 8000878:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800087c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800087e:	4805      	ldr	r0, [pc, #20]	; (8000894 <MX_USART2_UART_Init+0x60>)
 8000880:	f003 f946 	bl	8003b10 <HAL_UART_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800088a:	f000 f877 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20000168 	.word	0x20000168
 8000898:	40004400 	.word	0x40004400

0800089c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	; 0x28
 80008a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a2:	f107 0314 	add.w	r3, r7, #20
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
 80008ae:	60da      	str	r2, [r3, #12]
 80008b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b2:	4b30      	ldr	r3, [pc, #192]	; (8000974 <MX_GPIO_Init+0xd8>)
 80008b4:	695b      	ldr	r3, [r3, #20]
 80008b6:	4a2f      	ldr	r2, [pc, #188]	; (8000974 <MX_GPIO_Init+0xd8>)
 80008b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80008bc:	6153      	str	r3, [r2, #20]
 80008be:	4b2d      	ldr	r3, [pc, #180]	; (8000974 <MX_GPIO_Init+0xd8>)
 80008c0:	695b      	ldr	r3, [r3, #20]
 80008c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ca:	4b2a      	ldr	r3, [pc, #168]	; (8000974 <MX_GPIO_Init+0xd8>)
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	4a29      	ldr	r2, [pc, #164]	; (8000974 <MX_GPIO_Init+0xd8>)
 80008d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008d4:	6153      	str	r3, [r2, #20]
 80008d6:	4b27      	ldr	r3, [pc, #156]	; (8000974 <MX_GPIO_Init+0xd8>)
 80008d8:	695b      	ldr	r3, [r3, #20]
 80008da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e2:	4b24      	ldr	r3, [pc, #144]	; (8000974 <MX_GPIO_Init+0xd8>)
 80008e4:	695b      	ldr	r3, [r3, #20]
 80008e6:	4a23      	ldr	r2, [pc, #140]	; (8000974 <MX_GPIO_Init+0xd8>)
 80008e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ec:	6153      	str	r3, [r2, #20]
 80008ee:	4b21      	ldr	r3, [pc, #132]	; (8000974 <MX_GPIO_Init+0xd8>)
 80008f0:	695b      	ldr	r3, [r3, #20]
 80008f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008f6:	60bb      	str	r3, [r7, #8]
 80008f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fa:	4b1e      	ldr	r3, [pc, #120]	; (8000974 <MX_GPIO_Init+0xd8>)
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	4a1d      	ldr	r2, [pc, #116]	; (8000974 <MX_GPIO_Init+0xd8>)
 8000900:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000904:	6153      	str	r3, [r2, #20]
 8000906:	4b1b      	ldr	r3, [pc, #108]	; (8000974 <MX_GPIO_Init+0xd8>)
 8000908:	695b      	ldr	r3, [r3, #20]
 800090a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BUZZ_Pin|LEDA_Pin|LEDB_Pin|RF_CE_Pin, GPIO_PIN_RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8000918:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800091c:	f000 fda6 	bl	800146c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8000920:	2200      	movs	r2, #0
 8000922:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000926:	4814      	ldr	r0, [pc, #80]	; (8000978 <MX_GPIO_Init+0xdc>)
 8000928:	f000 fda0 	bl	800146c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUZZ_Pin LEDA_Pin LEDB_Pin RF_CE_Pin */
  GPIO_InitStruct.Pin = BUZZ_Pin|LEDA_Pin|LEDB_Pin|RF_CE_Pin;
 800092c:	f44f 73b8 	mov.w	r3, #368	; 0x170
 8000930:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000932:	2301      	movs	r3, #1
 8000934:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2300      	movs	r3, #0
 800093c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093e:	f107 0314 	add.w	r3, r7, #20
 8000942:	4619      	mov	r1, r3
 8000944:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000948:	f000 fc1e 	bl	8001188 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 800094c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000950:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000952:	2301      	movs	r3, #1
 8000954:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 0314 	add.w	r3, r7, #20
 8000962:	4619      	mov	r1, r3
 8000964:	4804      	ldr	r0, [pc, #16]	; (8000978 <MX_GPIO_Init+0xdc>)
 8000966:	f000 fc0f 	bl	8001188 <HAL_GPIO_Init>

}
 800096a:	bf00      	nop
 800096c:	3728      	adds	r7, #40	; 0x28
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40021000 	.word	0x40021000
 8000978:	48000400 	.word	0x48000400

0800097c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000980:	b672      	cpsid	i
}
 8000982:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000984:	e7fe      	b.n	8000984 <Error_Handler+0x8>
	...

08000988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098e:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <HAL_MspInit+0x44>)
 8000990:	699b      	ldr	r3, [r3, #24]
 8000992:	4a0e      	ldr	r2, [pc, #56]	; (80009cc <HAL_MspInit+0x44>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	6193      	str	r3, [r2, #24]
 800099a:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <HAL_MspInit+0x44>)
 800099c:	699b      	ldr	r3, [r3, #24]
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a6:	4b09      	ldr	r3, [pc, #36]	; (80009cc <HAL_MspInit+0x44>)
 80009a8:	69db      	ldr	r3, [r3, #28]
 80009aa:	4a08      	ldr	r2, [pc, #32]	; (80009cc <HAL_MspInit+0x44>)
 80009ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b0:	61d3      	str	r3, [r2, #28]
 80009b2:	4b06      	ldr	r3, [pc, #24]	; (80009cc <HAL_MspInit+0x44>)
 80009b4:	69db      	ldr	r3, [r3, #28]
 80009b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009be:	bf00      	nop
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	40021000 	.word	0x40021000

080009d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08a      	sub	sp, #40	; 0x28
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a17      	ldr	r2, [pc, #92]	; (8000a4c <HAL_I2C_MspInit+0x7c>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d127      	bne.n	8000a42 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f2:	4b17      	ldr	r3, [pc, #92]	; (8000a50 <HAL_I2C_MspInit+0x80>)
 80009f4:	695b      	ldr	r3, [r3, #20]
 80009f6:	4a16      	ldr	r2, [pc, #88]	; (8000a50 <HAL_I2C_MspInit+0x80>)
 80009f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009fc:	6153      	str	r3, [r2, #20]
 80009fe:	4b14      	ldr	r3, [pc, #80]	; (8000a50 <HAL_I2C_MspInit+0x80>)
 8000a00:	695b      	ldr	r3, [r3, #20]
 8000a02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a0a:	23c0      	movs	r3, #192	; 0xc0
 8000a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a0e:	2312      	movs	r3, #18
 8000a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a16:	2303      	movs	r3, #3
 8000a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a1a:	2304      	movs	r3, #4
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	4619      	mov	r1, r3
 8000a24:	480b      	ldr	r0, [pc, #44]	; (8000a54 <HAL_I2C_MspInit+0x84>)
 8000a26:	f000 fbaf 	bl	8001188 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <HAL_I2C_MspInit+0x80>)
 8000a2c:	69db      	ldr	r3, [r3, #28]
 8000a2e:	4a08      	ldr	r2, [pc, #32]	; (8000a50 <HAL_I2C_MspInit+0x80>)
 8000a30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a34:	61d3      	str	r3, [r2, #28]
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <HAL_I2C_MspInit+0x80>)
 8000a38:	69db      	ldr	r3, [r3, #28]
 8000a3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a42:	bf00      	nop
 8000a44:	3728      	adds	r7, #40	; 0x28
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40005400 	.word	0x40005400
 8000a50:	40021000 	.word	0x40021000
 8000a54:	48000400 	.word	0x48000400

08000a58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08a      	sub	sp, #40	; 0x28
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a17      	ldr	r2, [pc, #92]	; (8000ad4 <HAL_SPI_MspInit+0x7c>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d128      	bne.n	8000acc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a7a:	4b17      	ldr	r3, [pc, #92]	; (8000ad8 <HAL_SPI_MspInit+0x80>)
 8000a7c:	69db      	ldr	r3, [r3, #28]
 8000a7e:	4a16      	ldr	r2, [pc, #88]	; (8000ad8 <HAL_SPI_MspInit+0x80>)
 8000a80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a84:	61d3      	str	r3, [r2, #28]
 8000a86:	4b14      	ldr	r3, [pc, #80]	; (8000ad8 <HAL_SPI_MspInit+0x80>)
 8000a88:	69db      	ldr	r3, [r3, #28]
 8000a8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a92:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <HAL_SPI_MspInit+0x80>)
 8000a94:	695b      	ldr	r3, [r3, #20]
 8000a96:	4a10      	ldr	r2, [pc, #64]	; (8000ad8 <HAL_SPI_MspInit+0x80>)
 8000a98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a9c:	6153      	str	r3, [r2, #20]
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <HAL_SPI_MspInit+0x80>)
 8000aa0:	695b      	ldr	r3, [r3, #20]
 8000aa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000aaa:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000aae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ab8:	2303      	movs	r3, #3
 8000aba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000abc:	2305      	movs	r3, #5
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4805      	ldr	r0, [pc, #20]	; (8000adc <HAL_SPI_MspInit+0x84>)
 8000ac8:	f000 fb5e 	bl	8001188 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000acc:	bf00      	nop
 8000ace:	3728      	adds	r7, #40	; 0x28
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40003800 	.word	0x40003800
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	48000400 	.word	0x48000400

08000ae0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08a      	sub	sp, #40	; 0x28
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a1b      	ldr	r2, [pc, #108]	; (8000b6c <HAL_UART_MspInit+0x8c>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d130      	bne.n	8000b64 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b02:	4b1b      	ldr	r3, [pc, #108]	; (8000b70 <HAL_UART_MspInit+0x90>)
 8000b04:	69db      	ldr	r3, [r3, #28]
 8000b06:	4a1a      	ldr	r2, [pc, #104]	; (8000b70 <HAL_UART_MspInit+0x90>)
 8000b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b0c:	61d3      	str	r3, [r2, #28]
 8000b0e:	4b18      	ldr	r3, [pc, #96]	; (8000b70 <HAL_UART_MspInit+0x90>)
 8000b10:	69db      	ldr	r3, [r3, #28]
 8000b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1a:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <HAL_UART_MspInit+0x90>)
 8000b1c:	695b      	ldr	r3, [r3, #20]
 8000b1e:	4a14      	ldr	r2, [pc, #80]	; (8000b70 <HAL_UART_MspInit+0x90>)
 8000b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b24:	6153      	str	r3, [r2, #20]
 8000b26:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <HAL_UART_MspInit+0x90>)
 8000b28:	695b      	ldr	r3, [r3, #20]
 8000b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b32:	230c      	movs	r3, #12
 8000b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b36:	2302      	movs	r3, #2
 8000b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b42:	2307      	movs	r3, #7
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b50:	f000 fb1a 	bl	8001188 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b54:	2200      	movs	r2, #0
 8000b56:	2100      	movs	r1, #0
 8000b58:	2026      	movs	r0, #38	; 0x26
 8000b5a:	f000 fa68 	bl	800102e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b5e:	2026      	movs	r0, #38	; 0x26
 8000b60:	f000 fa81 	bl	8001066 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b64:	bf00      	nop
 8000b66:	3728      	adds	r7, #40	; 0x28
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40004400 	.word	0x40004400
 8000b70:	40021000 	.word	0x40021000

08000b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <NMI_Handler+0x4>

08000b7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7e:	e7fe      	b.n	8000b7e <HardFault_Handler+0x4>

08000b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <MemManage_Handler+0x4>

08000b86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b8a:	e7fe      	b.n	8000b8a <BusFault_Handler+0x4>

08000b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <UsageFault_Handler+0x4>

08000b92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc0:	f000 f916 	bl	8000df0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bcc:	4802      	ldr	r0, [pc, #8]	; (8000bd8 <USART2_IRQHandler+0x10>)
 8000bce:	f003 f877 	bl	8003cc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000168 	.word	0x20000168

08000bdc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]
 8000bec:	e00a      	b.n	8000c04 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000bee:	f3af 8000 	nop.w
 8000bf2:	4601      	mov	r1, r0
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	1c5a      	adds	r2, r3, #1
 8000bf8:	60ba      	str	r2, [r7, #8]
 8000bfa:	b2ca      	uxtb	r2, r1
 8000bfc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	3301      	adds	r3, #1
 8000c02:	617b      	str	r3, [r7, #20]
 8000c04:	697a      	ldr	r2, [r7, #20]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	dbf0      	blt.n	8000bee <_read+0x12>
	}

return len;
 8000c0c:	687b      	ldr	r3, [r7, #4]
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3718      	adds	r7, #24
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000c16:	b480      	push	{r7}
 8000c18:	b083      	sub	sp, #12
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	6078      	str	r0, [r7, #4]
	return -1;
 8000c1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	b083      	sub	sp, #12
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
 8000c36:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c3e:	605a      	str	r2, [r3, #4]
	return 0;
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr

08000c4e <_isatty>:

int _isatty(int file)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	b083      	sub	sp, #12
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
	return 1;
 8000c56:	2301      	movs	r3, #1
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
	return 0;
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3714      	adds	r7, #20
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
	...

08000c80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c88:	4a14      	ldr	r2, [pc, #80]	; (8000cdc <_sbrk+0x5c>)
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <_sbrk+0x60>)
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c94:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <_sbrk+0x64>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d102      	bne.n	8000ca2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c9c:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <_sbrk+0x64>)
 8000c9e:	4a12      	ldr	r2, [pc, #72]	; (8000ce8 <_sbrk+0x68>)
 8000ca0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ca2:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <_sbrk+0x64>)
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4413      	add	r3, r2
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d207      	bcs.n	8000cc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cb0:	f003 fea2 	bl	80049f8 <__errno>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	220c      	movs	r2, #12
 8000cb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cba:	f04f 33ff 	mov.w	r3, #4294967295
 8000cbe:	e009      	b.n	8000cd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cc0:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <_sbrk+0x64>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cc6:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <_sbrk+0x64>)
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4413      	add	r3, r2
 8000cce:	4a05      	ldr	r2, [pc, #20]	; (8000ce4 <_sbrk+0x64>)
 8000cd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3718      	adds	r7, #24
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20004000 	.word	0x20004000
 8000ce0:	00000400 	.word	0x00000400
 8000ce4:	200000a4 	.word	0x200000a4
 8000ce8:	20000208 	.word	0x20000208

08000cec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <SystemInit+0x20>)
 8000cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cf6:	4a05      	ldr	r2, [pc, #20]	; (8000d0c <SystemInit+0x20>)
 8000cf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d48 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d14:	f7ff ffea 	bl	8000cec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d18:	480c      	ldr	r0, [pc, #48]	; (8000d4c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d1a:	490d      	ldr	r1, [pc, #52]	; (8000d50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d1c:	4a0d      	ldr	r2, [pc, #52]	; (8000d54 <LoopForever+0xe>)
  movs r3, #0
 8000d1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d20:	e002      	b.n	8000d28 <LoopCopyDataInit>

08000d22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d26:	3304      	adds	r3, #4

08000d28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d2c:	d3f9      	bcc.n	8000d22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d2e:	4a0a      	ldr	r2, [pc, #40]	; (8000d58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d30:	4c0a      	ldr	r4, [pc, #40]	; (8000d5c <LoopForever+0x16>)
  movs r3, #0
 8000d32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d34:	e001      	b.n	8000d3a <LoopFillZerobss>

08000d36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d38:	3204      	adds	r2, #4

08000d3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d3c:	d3fb      	bcc.n	8000d36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d3e:	f003 fe61 	bl	8004a04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d42:	f7ff fc69 	bl	8000618 <main>

08000d46 <LoopForever>:

LoopForever:
    b LoopForever
 8000d46:	e7fe      	b.n	8000d46 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d48:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000d4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d50:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000d54:	080054c8 	.word	0x080054c8
  ldr r2, =_sbss
 8000d58:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000d5c:	20000204 	.word	0x20000204

08000d60 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d60:	e7fe      	b.n	8000d60 <ADC1_IRQHandler>
	...

08000d64 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d68:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <HAL_Init+0x28>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a07      	ldr	r2, [pc, #28]	; (8000d8c <HAL_Init+0x28>)
 8000d6e:	f043 0310 	orr.w	r3, r3, #16
 8000d72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d74:	2003      	movs	r0, #3
 8000d76:	f000 f94f 	bl	8001018 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d7a:	200f      	movs	r0, #15
 8000d7c:	f000 f808 	bl	8000d90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d80:	f7ff fe02 	bl	8000988 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40022000 	.word	0x40022000

08000d90 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d98:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <HAL_InitTick+0x54>)
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <HAL_InitTick+0x58>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	4619      	mov	r1, r3
 8000da2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dae:	4618      	mov	r0, r3
 8000db0:	f000 f967 	bl	8001082 <HAL_SYSTICK_Config>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e00e      	b.n	8000ddc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2b0f      	cmp	r3, #15
 8000dc2:	d80a      	bhi.n	8000dda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	6879      	ldr	r1, [r7, #4]
 8000dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dcc:	f000 f92f 	bl	800102e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dd0:	4a06      	ldr	r2, [pc, #24]	; (8000dec <HAL_InitTick+0x5c>)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	e000      	b.n	8000ddc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20000018 	.word	0x20000018
 8000de8:	20000020 	.word	0x20000020
 8000dec:	2000001c 	.word	0x2000001c

08000df0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df4:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <HAL_IncTick+0x20>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	461a      	mov	r2, r3
 8000dfa:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <HAL_IncTick+0x24>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4413      	add	r3, r2
 8000e00:	4a04      	ldr	r2, [pc, #16]	; (8000e14 <HAL_IncTick+0x24>)
 8000e02:	6013      	str	r3, [r2, #0]
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	20000020 	.word	0x20000020
 8000e14:	200001f0 	.word	0x200001f0

08000e18 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000e1c:	4b03      	ldr	r3, [pc, #12]	; (8000e2c <HAL_GetTick+0x14>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	200001f0 	.word	0x200001f0

08000e30 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e38:	f7ff ffee 	bl	8000e18 <HAL_GetTick>
 8000e3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e48:	d005      	beq.n	8000e56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e4a:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <HAL_Delay+0x44>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	4413      	add	r3, r2
 8000e54:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e56:	bf00      	nop
 8000e58:	f7ff ffde 	bl	8000e18 <HAL_GetTick>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	68fa      	ldr	r2, [r7, #12]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d8f7      	bhi.n	8000e58 <HAL_Delay+0x28>
  {
  }
}
 8000e68:	bf00      	nop
 8000e6a:	bf00      	nop
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000020 	.word	0x20000020

08000e78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <__NVIC_SetPriorityGrouping+0x44>)
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e8e:	68ba      	ldr	r2, [r7, #8]
 8000e90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e94:	4013      	ands	r3, r2
 8000e96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ea0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eaa:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <__NVIC_SetPriorityGrouping+0x44>)
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	60d3      	str	r3, [r2, #12]
}
 8000eb0:	bf00      	nop
 8000eb2:	3714      	adds	r7, #20
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec4:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	0a1b      	lsrs	r3, r3, #8
 8000eca:	f003 0307 	and.w	r3, r3, #7
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	db0b      	blt.n	8000f06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	f003 021f 	and.w	r2, r3, #31
 8000ef4:	4907      	ldr	r1, [pc, #28]	; (8000f14 <__NVIC_EnableIRQ+0x38>)
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	095b      	lsrs	r3, r3, #5
 8000efc:	2001      	movs	r0, #1
 8000efe:	fa00 f202 	lsl.w	r2, r0, r2
 8000f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f06:	bf00      	nop
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	e000e100 	.word	0xe000e100

08000f18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	6039      	str	r1, [r7, #0]
 8000f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	db0a      	blt.n	8000f42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	490c      	ldr	r1, [pc, #48]	; (8000f64 <__NVIC_SetPriority+0x4c>)
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	0112      	lsls	r2, r2, #4
 8000f38:	b2d2      	uxtb	r2, r2
 8000f3a:	440b      	add	r3, r1
 8000f3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f40:	e00a      	b.n	8000f58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	4908      	ldr	r1, [pc, #32]	; (8000f68 <__NVIC_SetPriority+0x50>)
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	f003 030f 	and.w	r3, r3, #15
 8000f4e:	3b04      	subs	r3, #4
 8000f50:	0112      	lsls	r2, r2, #4
 8000f52:	b2d2      	uxtb	r2, r2
 8000f54:	440b      	add	r3, r1
 8000f56:	761a      	strb	r2, [r3, #24]
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000e100 	.word	0xe000e100
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b089      	sub	sp, #36	; 0x24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	f1c3 0307 	rsb	r3, r3, #7
 8000f86:	2b04      	cmp	r3, #4
 8000f88:	bf28      	it	cs
 8000f8a:	2304      	movcs	r3, #4
 8000f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	3304      	adds	r3, #4
 8000f92:	2b06      	cmp	r3, #6
 8000f94:	d902      	bls.n	8000f9c <NVIC_EncodePriority+0x30>
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	3b03      	subs	r3, #3
 8000f9a:	e000      	b.n	8000f9e <NVIC_EncodePriority+0x32>
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43da      	mvns	r2, r3
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	401a      	ands	r2, r3
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	fa01 f303 	lsl.w	r3, r1, r3
 8000fbe:	43d9      	mvns	r1, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc4:	4313      	orrs	r3, r2
         );
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3724      	adds	r7, #36	; 0x24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
	...

08000fd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fe4:	d301      	bcc.n	8000fea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e00f      	b.n	800100a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fea:	4a0a      	ldr	r2, [pc, #40]	; (8001014 <SysTick_Config+0x40>)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ff2:	210f      	movs	r1, #15
 8000ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff8:	f7ff ff8e 	bl	8000f18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ffc:	4b05      	ldr	r3, [pc, #20]	; (8001014 <SysTick_Config+0x40>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001002:	4b04      	ldr	r3, [pc, #16]	; (8001014 <SysTick_Config+0x40>)
 8001004:	2207      	movs	r2, #7
 8001006:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	e000e010 	.word	0xe000e010

08001018 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f7ff ff29 	bl	8000e78 <__NVIC_SetPriorityGrouping>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b086      	sub	sp, #24
 8001032:	af00      	add	r7, sp, #0
 8001034:	4603      	mov	r3, r0
 8001036:	60b9      	str	r1, [r7, #8]
 8001038:	607a      	str	r2, [r7, #4]
 800103a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001040:	f7ff ff3e 	bl	8000ec0 <__NVIC_GetPriorityGrouping>
 8001044:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	68b9      	ldr	r1, [r7, #8]
 800104a:	6978      	ldr	r0, [r7, #20]
 800104c:	f7ff ff8e 	bl	8000f6c <NVIC_EncodePriority>
 8001050:	4602      	mov	r2, r0
 8001052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001056:	4611      	mov	r1, r2
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff ff5d 	bl	8000f18 <__NVIC_SetPriority>
}
 800105e:	bf00      	nop
 8001060:	3718      	adds	r7, #24
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b082      	sub	sp, #8
 800106a:	af00      	add	r7, sp, #0
 800106c:	4603      	mov	r3, r0
 800106e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ff31 	bl	8000edc <__NVIC_EnableIRQ>
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b082      	sub	sp, #8
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f7ff ffa2 	bl	8000fd4 <SysTick_Config>
 8001090:	4603      	mov	r3, r0
}
 8001092:	4618      	mov	r0, r3
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800109a:	b480      	push	{r7}
 800109c:	b083      	sub	sp, #12
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d008      	beq.n	80010be <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2204      	movs	r2, #4
 80010b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e020      	b.n	8001100 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f022 020e 	bic.w	r2, r2, #14
 80010cc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f022 0201 	bic.w	r2, r2, #1
 80010dc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010e6:	2101      	movs	r1, #1
 80010e8:	fa01 f202 	lsl.w	r2, r1, r2
 80010ec:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2201      	movs	r2, #1
 80010f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80010fe:	2300      	movs	r3, #0
}
 8001100:	4618      	mov	r0, r3
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001114:	2300      	movs	r3, #0
 8001116:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800111e:	2b02      	cmp	r3, #2
 8001120:	d005      	beq.n	800112e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2204      	movs	r2, #4
 8001126:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	73fb      	strb	r3, [r7, #15]
 800112c:	e027      	b.n	800117e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f022 020e 	bic.w	r2, r2, #14
 800113c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f022 0201 	bic.w	r2, r2, #1
 800114c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001156:	2101      	movs	r1, #1
 8001158:	fa01 f202 	lsl.w	r2, r1, r2
 800115c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2201      	movs	r2, #1
 8001162:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2200      	movs	r2, #0
 800116a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	4798      	blx	r3
    } 
  }
  return status;
 800117e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001180:	4618      	mov	r0, r3
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001188:	b480      	push	{r7}
 800118a:	b087      	sub	sp, #28
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001192:	2300      	movs	r3, #0
 8001194:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001196:	e14e      	b.n	8001436 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	2101      	movs	r1, #1
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	fa01 f303 	lsl.w	r3, r1, r3
 80011a4:	4013      	ands	r3, r2
 80011a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f000 8140 	beq.w	8001430 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f003 0303 	and.w	r3, r3, #3
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d005      	beq.n	80011c8 <HAL_GPIO_Init+0x40>
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f003 0303 	and.w	r3, r3, #3
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d130      	bne.n	800122a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	2203      	movs	r2, #3
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	4013      	ands	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	68da      	ldr	r2, [r3, #12]
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011fe:	2201      	movs	r2, #1
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43db      	mvns	r3, r3
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	4013      	ands	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	091b      	lsrs	r3, r3, #4
 8001214:	f003 0201 	and.w	r2, r3, #1
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	4313      	orrs	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f003 0303 	and.w	r3, r3, #3
 8001232:	2b03      	cmp	r3, #3
 8001234:	d017      	beq.n	8001266 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	2203      	movs	r2, #3
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43db      	mvns	r3, r3
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	4013      	ands	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	689a      	ldr	r2, [r3, #8]
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	4313      	orrs	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f003 0303 	and.w	r3, r3, #3
 800126e:	2b02      	cmp	r3, #2
 8001270:	d123      	bne.n	80012ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	08da      	lsrs	r2, r3, #3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	3208      	adds	r2, #8
 800127a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800127e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	220f      	movs	r2, #15
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43db      	mvns	r3, r3
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	4013      	ands	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	691a      	ldr	r2, [r3, #16]
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	f003 0307 	and.w	r3, r3, #7
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	08da      	lsrs	r2, r3, #3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3208      	adds	r2, #8
 80012b4:	6939      	ldr	r1, [r7, #16]
 80012b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	2203      	movs	r2, #3
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43db      	mvns	r3, r3
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	4013      	ands	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f003 0203 	and.w	r2, r3, #3
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f000 809a 	beq.w	8001430 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fc:	4b55      	ldr	r3, [pc, #340]	; (8001454 <HAL_GPIO_Init+0x2cc>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	4a54      	ldr	r2, [pc, #336]	; (8001454 <HAL_GPIO_Init+0x2cc>)
 8001302:	f043 0301 	orr.w	r3, r3, #1
 8001306:	6193      	str	r3, [r2, #24]
 8001308:	4b52      	ldr	r3, [pc, #328]	; (8001454 <HAL_GPIO_Init+0x2cc>)
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001314:	4a50      	ldr	r2, [pc, #320]	; (8001458 <HAL_GPIO_Init+0x2d0>)
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	089b      	lsrs	r3, r3, #2
 800131a:	3302      	adds	r3, #2
 800131c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001320:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	f003 0303 	and.w	r3, r3, #3
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	220f      	movs	r2, #15
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43db      	mvns	r3, r3
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	4013      	ands	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800133e:	d013      	beq.n	8001368 <HAL_GPIO_Init+0x1e0>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4a46      	ldr	r2, [pc, #280]	; (800145c <HAL_GPIO_Init+0x2d4>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d00d      	beq.n	8001364 <HAL_GPIO_Init+0x1dc>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4a45      	ldr	r2, [pc, #276]	; (8001460 <HAL_GPIO_Init+0x2d8>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d007      	beq.n	8001360 <HAL_GPIO_Init+0x1d8>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a44      	ldr	r2, [pc, #272]	; (8001464 <HAL_GPIO_Init+0x2dc>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d101      	bne.n	800135c <HAL_GPIO_Init+0x1d4>
 8001358:	2303      	movs	r3, #3
 800135a:	e006      	b.n	800136a <HAL_GPIO_Init+0x1e2>
 800135c:	2305      	movs	r3, #5
 800135e:	e004      	b.n	800136a <HAL_GPIO_Init+0x1e2>
 8001360:	2302      	movs	r3, #2
 8001362:	e002      	b.n	800136a <HAL_GPIO_Init+0x1e2>
 8001364:	2301      	movs	r3, #1
 8001366:	e000      	b.n	800136a <HAL_GPIO_Init+0x1e2>
 8001368:	2300      	movs	r3, #0
 800136a:	697a      	ldr	r2, [r7, #20]
 800136c:	f002 0203 	and.w	r2, r2, #3
 8001370:	0092      	lsls	r2, r2, #2
 8001372:	4093      	lsls	r3, r2
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	4313      	orrs	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800137a:	4937      	ldr	r1, [pc, #220]	; (8001458 <HAL_GPIO_Init+0x2d0>)
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	089b      	lsrs	r3, r3, #2
 8001380:	3302      	adds	r3, #2
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001388:	4b37      	ldr	r3, [pc, #220]	; (8001468 <HAL_GPIO_Init+0x2e0>)
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	43db      	mvns	r3, r3
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	4013      	ands	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d003      	beq.n	80013ac <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80013ac:	4a2e      	ldr	r2, [pc, #184]	; (8001468 <HAL_GPIO_Init+0x2e0>)
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013b2:	4b2d      	ldr	r3, [pc, #180]	; (8001468 <HAL_GPIO_Init+0x2e0>)
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	43db      	mvns	r3, r3
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	4013      	ands	r3, r2
 80013c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013d6:	4a24      	ldr	r2, [pc, #144]	; (8001468 <HAL_GPIO_Init+0x2e0>)
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013dc:	4b22      	ldr	r3, [pc, #136]	; (8001468 <HAL_GPIO_Init+0x2e0>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	43db      	mvns	r3, r3
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4013      	ands	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d003      	beq.n	8001400 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001400:	4a19      	ldr	r2, [pc, #100]	; (8001468 <HAL_GPIO_Init+0x2e0>)
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001406:	4b18      	ldr	r3, [pc, #96]	; (8001468 <HAL_GPIO_Init+0x2e0>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	43db      	mvns	r3, r3
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	4013      	ands	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	4313      	orrs	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800142a:	4a0f      	ldr	r2, [pc, #60]	; (8001468 <HAL_GPIO_Init+0x2e0>)
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	3301      	adds	r3, #1
 8001434:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	fa22 f303 	lsr.w	r3, r2, r3
 8001440:	2b00      	cmp	r3, #0
 8001442:	f47f aea9 	bne.w	8001198 <HAL_GPIO_Init+0x10>
  }
}
 8001446:	bf00      	nop
 8001448:	bf00      	nop
 800144a:	371c      	adds	r7, #28
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	40021000 	.word	0x40021000
 8001458:	40010000 	.word	0x40010000
 800145c:	48000400 	.word	0x48000400
 8001460:	48000800 	.word	0x48000800
 8001464:	48000c00 	.word	0x48000c00
 8001468:	40010400 	.word	0x40010400

0800146c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	460b      	mov	r3, r1
 8001476:	807b      	strh	r3, [r7, #2]
 8001478:	4613      	mov	r3, r2
 800147a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800147c:	787b      	ldrb	r3, [r7, #1]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d003      	beq.n	800148a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001482:	887a      	ldrh	r2, [r7, #2]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001488:	e002      	b.n	8001490 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800148a:	887a      	ldrh	r2, [r7, #2]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	460b      	mov	r3, r1
 80014a6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	695b      	ldr	r3, [r3, #20]
 80014ac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014ae:	887a      	ldrh	r2, [r7, #2]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4013      	ands	r3, r2
 80014b4:	041a      	lsls	r2, r3, #16
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	43d9      	mvns	r1, r3
 80014ba:	887b      	ldrh	r3, [r7, #2]
 80014bc:	400b      	ands	r3, r1
 80014be:	431a      	orrs	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	619a      	str	r2, [r3, #24]
}
 80014c4:	bf00      	nop
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d101      	bne.n	80014e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e081      	b.n	80015e6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d106      	bne.n	80014fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff fa6a 	bl	80009d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2224      	movs	r2, #36	; 0x24
 8001500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f022 0201 	bic.w	r2, r2, #1
 8001512:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685a      	ldr	r2, [r3, #4]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001520:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	689a      	ldr	r2, [r3, #8]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001530:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	68db      	ldr	r3, [r3, #12]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d107      	bne.n	800154a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	689a      	ldr	r2, [r3, #8]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	e006      	b.n	8001558 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	689a      	ldr	r2, [r3, #8]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001556:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	2b02      	cmp	r3, #2
 800155e:	d104      	bne.n	800156a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001568:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	6812      	ldr	r2, [r2, #0]
 8001574:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001578:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800157c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	68da      	ldr	r2, [r3, #12]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800158c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	691a      	ldr	r2, [r3, #16]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	430a      	orrs	r2, r1
 80015a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	69d9      	ldr	r1, [r3, #28]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a1a      	ldr	r2, [r3, #32]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	430a      	orrs	r2, r1
 80015b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f042 0201 	orr.w	r2, r2, #1
 80015c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2220      	movs	r2, #32
 80015d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2200      	movs	r2, #0
 80015da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80015ee:	b480      	push	{r7}
 80015f0:	b083      	sub	sp, #12
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
 80015f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	2b20      	cmp	r3, #32
 8001602:	d138      	bne.n	8001676 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800160a:	2b01      	cmp	r3, #1
 800160c:	d101      	bne.n	8001612 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800160e:	2302      	movs	r3, #2
 8001610:	e032      	b.n	8001678 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2201      	movs	r2, #1
 8001616:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2224      	movs	r2, #36	; 0x24
 800161e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f022 0201 	bic.w	r2, r2, #1
 8001630:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001640:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	6819      	ldr	r1, [r3, #0]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	430a      	orrs	r2, r1
 8001650:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f042 0201 	orr.w	r2, r2, #1
 8001660:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2220      	movs	r2, #32
 8001666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2200      	movs	r2, #0
 800166e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001672:	2300      	movs	r3, #0
 8001674:	e000      	b.n	8001678 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001676:	2302      	movs	r3, #2
  }
}
 8001678:	4618      	mov	r0, r3
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b20      	cmp	r3, #32
 8001698:	d139      	bne.n	800170e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d101      	bne.n	80016a8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80016a4:	2302      	movs	r3, #2
 80016a6:	e033      	b.n	8001710 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2201      	movs	r2, #1
 80016ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2224      	movs	r2, #36	; 0x24
 80016b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f022 0201 	bic.w	r2, r2, #1
 80016c6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80016d6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	021b      	lsls	r3, r3, #8
 80016dc:	68fa      	ldr	r2, [r7, #12]
 80016de:	4313      	orrs	r3, r2
 80016e0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f042 0201 	orr.w	r2, r2, #1
 80016f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2220      	movs	r2, #32
 80016fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800170a:	2300      	movs	r3, #0
 800170c:	e000      	b.n	8001710 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800170e:	2302      	movs	r3, #2
  }
}
 8001710:	4618      	mov	r0, r3
 8001712:	3714      	adds	r7, #20
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001722:	af00      	add	r7, sp, #0
 8001724:	1d3b      	adds	r3, r7, #4
 8001726:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001728:	1d3b      	adds	r3, r7, #4
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d102      	bne.n	8001736 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	f000 bef4 	b.w	800251e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001736:	1d3b      	adds	r3, r7, #4
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	2b00      	cmp	r3, #0
 8001742:	f000 816a 	beq.w	8001a1a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001746:	4bb3      	ldr	r3, [pc, #716]	; (8001a14 <HAL_RCC_OscConfig+0x2f8>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f003 030c 	and.w	r3, r3, #12
 800174e:	2b04      	cmp	r3, #4
 8001750:	d00c      	beq.n	800176c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001752:	4bb0      	ldr	r3, [pc, #704]	; (8001a14 <HAL_RCC_OscConfig+0x2f8>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f003 030c 	and.w	r3, r3, #12
 800175a:	2b08      	cmp	r3, #8
 800175c:	d159      	bne.n	8001812 <HAL_RCC_OscConfig+0xf6>
 800175e:	4bad      	ldr	r3, [pc, #692]	; (8001a14 <HAL_RCC_OscConfig+0x2f8>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001766:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800176a:	d152      	bne.n	8001812 <HAL_RCC_OscConfig+0xf6>
 800176c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001770:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001774:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001778:	fa93 f3a3 	rbit	r3, r3
 800177c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001780:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001784:	fab3 f383 	clz	r3, r3
 8001788:	b2db      	uxtb	r3, r3
 800178a:	095b      	lsrs	r3, r3, #5
 800178c:	b2db      	uxtb	r3, r3
 800178e:	f043 0301 	orr.w	r3, r3, #1
 8001792:	b2db      	uxtb	r3, r3
 8001794:	2b01      	cmp	r3, #1
 8001796:	d102      	bne.n	800179e <HAL_RCC_OscConfig+0x82>
 8001798:	4b9e      	ldr	r3, [pc, #632]	; (8001a14 <HAL_RCC_OscConfig+0x2f8>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	e015      	b.n	80017ca <HAL_RCC_OscConfig+0xae>
 800179e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017a2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80017aa:	fa93 f3a3 	rbit	r3, r3
 80017ae:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80017b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017b6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80017ba:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80017be:	fa93 f3a3 	rbit	r3, r3
 80017c2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80017c6:	4b93      	ldr	r3, [pc, #588]	; (8001a14 <HAL_RCC_OscConfig+0x2f8>)
 80017c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017ce:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80017d2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80017d6:	fa92 f2a2 	rbit	r2, r2
 80017da:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80017de:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80017e2:	fab2 f282 	clz	r2, r2
 80017e6:	b2d2      	uxtb	r2, r2
 80017e8:	f042 0220 	orr.w	r2, r2, #32
 80017ec:	b2d2      	uxtb	r2, r2
 80017ee:	f002 021f 	and.w	r2, r2, #31
 80017f2:	2101      	movs	r1, #1
 80017f4:	fa01 f202 	lsl.w	r2, r1, r2
 80017f8:	4013      	ands	r3, r2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f000 810c 	beq.w	8001a18 <HAL_RCC_OscConfig+0x2fc>
 8001800:	1d3b      	adds	r3, r7, #4
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2b00      	cmp	r3, #0
 8001808:	f040 8106 	bne.w	8001a18 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	f000 be86 	b.w	800251e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001812:	1d3b      	adds	r3, r7, #4
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800181c:	d106      	bne.n	800182c <HAL_RCC_OscConfig+0x110>
 800181e:	4b7d      	ldr	r3, [pc, #500]	; (8001a14 <HAL_RCC_OscConfig+0x2f8>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a7c      	ldr	r2, [pc, #496]	; (8001a14 <HAL_RCC_OscConfig+0x2f8>)
 8001824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	e030      	b.n	800188e <HAL_RCC_OscConfig+0x172>
 800182c:	1d3b      	adds	r3, r7, #4
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d10c      	bne.n	8001850 <HAL_RCC_OscConfig+0x134>
 8001836:	4b77      	ldr	r3, [pc, #476]	; (8001a14 <HAL_RCC_OscConfig+0x2f8>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a76      	ldr	r2, [pc, #472]	; (8001a14 <HAL_RCC_OscConfig+0x2f8>)
 800183c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001840:	6013      	str	r3, [r2, #0]
 8001842:	4b74      	ldr	r3, [pc, #464]	; (8001a14 <HAL_RCC_OscConfig+0x2f8>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a73      	ldr	r2, [pc, #460]	; (8001a14 <HAL_RCC_OscConfig+0x2f8>)
 8001848:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800184c:	6013      	str	r3, [r2, #0]
 800184e:	e01e      	b.n	800188e <HAL_RCC_OscConfig+0x172>
 8001850:	1d3b      	adds	r3, r7, #4
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800185a:	d10c      	bne.n	8001876 <HAL_RCC_OscConfig+0x15a>
 800185c:	4b6d      	ldr	r3, [pc, #436]	; (8001a14 <HAL_RCC_OscConfig+0x2f8>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a6c      	ldr	r2, [pc, #432]	; (8001a14 <HAL_RCC_OscConfig+0x2f8>)
 8001862:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001866:	6013      	str	r3, [r2, #0]
 8001868:	4b6a      	ldr	r3, [pc, #424]	; (8001a14 <HAL_RCC_OscConfig+0x2f8>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a69      	ldr	r2, [pc, #420]	; (8001a14 <HAL_RCC_OscConfig+0x2f8>)
 800186e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001872:	6013      	str	r3, [r2, #0]
 8001874:	e00b      	b.n	800188e <HAL_RCC_OscConfig+0x172>
 8001876:	4b67      	ldr	r3, [pc, #412]	; (8001a14 <HAL_RCC_OscConfig+0x2f8>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a66      	ldr	r2, [pc, #408]	; (8001a14 <HAL_RCC_OscConfig+0x2f8>)
 800187c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001880:	6013      	str	r3, [r2, #0]
 8001882:	4b64      	ldr	r3, [pc, #400]	; (8001a14 <HAL_RCC_OscConfig+0x2f8>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a63      	ldr	r2, [pc, #396]	; (8001a14 <HAL_RCC_OscConfig+0x2f8>)
 8001888:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800188c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800188e:	4b61      	ldr	r3, [pc, #388]	; (8001a14 <HAL_RCC_OscConfig+0x2f8>)
 8001890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001892:	f023 020f 	bic.w	r2, r3, #15
 8001896:	1d3b      	adds	r3, r7, #4
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	495d      	ldr	r1, [pc, #372]	; (8001a14 <HAL_RCC_OscConfig+0x2f8>)
 800189e:	4313      	orrs	r3, r2
 80018a0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018a2:	1d3b      	adds	r3, r7, #4
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d059      	beq.n	8001960 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ac:	f7ff fab4 	bl	8000e18 <HAL_GetTick>
 80018b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018b4:	e00a      	b.n	80018cc <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018b6:	f7ff faaf 	bl	8000e18 <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b64      	cmp	r3, #100	; 0x64
 80018c4:	d902      	bls.n	80018cc <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	f000 be29 	b.w	800251e <HAL_RCC_OscConfig+0xe02>
 80018cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018d0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80018d8:	fa93 f3a3 	rbit	r3, r3
 80018dc:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80018e0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e4:	fab3 f383 	clz	r3, r3
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	095b      	lsrs	r3, r3, #5
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d102      	bne.n	80018fe <HAL_RCC_OscConfig+0x1e2>
 80018f8:	4b46      	ldr	r3, [pc, #280]	; (8001a14 <HAL_RCC_OscConfig+0x2f8>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	e015      	b.n	800192a <HAL_RCC_OscConfig+0x20e>
 80018fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001902:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001906:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800190a:	fa93 f3a3 	rbit	r3, r3
 800190e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001912:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001916:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800191a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800191e:	fa93 f3a3 	rbit	r3, r3
 8001922:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001926:	4b3b      	ldr	r3, [pc, #236]	; (8001a14 <HAL_RCC_OscConfig+0x2f8>)
 8001928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800192e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001932:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001936:	fa92 f2a2 	rbit	r2, r2
 800193a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800193e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001942:	fab2 f282 	clz	r2, r2
 8001946:	b2d2      	uxtb	r2, r2
 8001948:	f042 0220 	orr.w	r2, r2, #32
 800194c:	b2d2      	uxtb	r2, r2
 800194e:	f002 021f 	and.w	r2, r2, #31
 8001952:	2101      	movs	r1, #1
 8001954:	fa01 f202 	lsl.w	r2, r1, r2
 8001958:	4013      	ands	r3, r2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d0ab      	beq.n	80018b6 <HAL_RCC_OscConfig+0x19a>
 800195e:	e05c      	b.n	8001a1a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001960:	f7ff fa5a 	bl	8000e18 <HAL_GetTick>
 8001964:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001968:	e00a      	b.n	8001980 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800196a:	f7ff fa55 	bl	8000e18 <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b64      	cmp	r3, #100	; 0x64
 8001978:	d902      	bls.n	8001980 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	f000 bdcf 	b.w	800251e <HAL_RCC_OscConfig+0xe02>
 8001980:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001984:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001988:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800198c:	fa93 f3a3 	rbit	r3, r3
 8001990:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001994:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001998:	fab3 f383 	clz	r3, r3
 800199c:	b2db      	uxtb	r3, r3
 800199e:	095b      	lsrs	r3, r3, #5
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	f043 0301 	orr.w	r3, r3, #1
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d102      	bne.n	80019b2 <HAL_RCC_OscConfig+0x296>
 80019ac:	4b19      	ldr	r3, [pc, #100]	; (8001a14 <HAL_RCC_OscConfig+0x2f8>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	e015      	b.n	80019de <HAL_RCC_OscConfig+0x2c2>
 80019b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019b6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ba:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80019be:	fa93 f3a3 	rbit	r3, r3
 80019c2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80019c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019ca:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80019ce:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80019d2:	fa93 f3a3 	rbit	r3, r3
 80019d6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80019da:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <HAL_RCC_OscConfig+0x2f8>)
 80019dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019e2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80019e6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80019ea:	fa92 f2a2 	rbit	r2, r2
 80019ee:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80019f2:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80019f6:	fab2 f282 	clz	r2, r2
 80019fa:	b2d2      	uxtb	r2, r2
 80019fc:	f042 0220 	orr.w	r2, r2, #32
 8001a00:	b2d2      	uxtb	r2, r2
 8001a02:	f002 021f 	and.w	r2, r2, #31
 8001a06:	2101      	movs	r1, #1
 8001a08:	fa01 f202 	lsl.w	r2, r1, r2
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1ab      	bne.n	800196a <HAL_RCC_OscConfig+0x24e>
 8001a12:	e002      	b.n	8001a1a <HAL_RCC_OscConfig+0x2fe>
 8001a14:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a1a:	1d3b      	adds	r3, r7, #4
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f000 816f 	beq.w	8001d08 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a2a:	4bd0      	ldr	r3, [pc, #832]	; (8001d6c <HAL_RCC_OscConfig+0x650>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f003 030c 	and.w	r3, r3, #12
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d00b      	beq.n	8001a4e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a36:	4bcd      	ldr	r3, [pc, #820]	; (8001d6c <HAL_RCC_OscConfig+0x650>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f003 030c 	and.w	r3, r3, #12
 8001a3e:	2b08      	cmp	r3, #8
 8001a40:	d16c      	bne.n	8001b1c <HAL_RCC_OscConfig+0x400>
 8001a42:	4bca      	ldr	r3, [pc, #808]	; (8001d6c <HAL_RCC_OscConfig+0x650>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d166      	bne.n	8001b1c <HAL_RCC_OscConfig+0x400>
 8001a4e:	2302      	movs	r3, #2
 8001a50:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a54:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001a58:	fa93 f3a3 	rbit	r3, r3
 8001a5c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001a60:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a64:	fab3 f383 	clz	r3, r3
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	095b      	lsrs	r3, r3, #5
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	f043 0301 	orr.w	r3, r3, #1
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d102      	bne.n	8001a7e <HAL_RCC_OscConfig+0x362>
 8001a78:	4bbc      	ldr	r3, [pc, #752]	; (8001d6c <HAL_RCC_OscConfig+0x650>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	e013      	b.n	8001aa6 <HAL_RCC_OscConfig+0x38a>
 8001a7e:	2302      	movs	r3, #2
 8001a80:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a84:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001a88:	fa93 f3a3 	rbit	r3, r3
 8001a8c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001a90:	2302      	movs	r3, #2
 8001a92:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001a96:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001a9a:	fa93 f3a3 	rbit	r3, r3
 8001a9e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001aa2:	4bb2      	ldr	r3, [pc, #712]	; (8001d6c <HAL_RCC_OscConfig+0x650>)
 8001aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001aac:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001ab0:	fa92 f2a2 	rbit	r2, r2
 8001ab4:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001ab8:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001abc:	fab2 f282 	clz	r2, r2
 8001ac0:	b2d2      	uxtb	r2, r2
 8001ac2:	f042 0220 	orr.w	r2, r2, #32
 8001ac6:	b2d2      	uxtb	r2, r2
 8001ac8:	f002 021f 	and.w	r2, r2, #31
 8001acc:	2101      	movs	r1, #1
 8001ace:	fa01 f202 	lsl.w	r2, r1, r2
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d007      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x3cc>
 8001ad8:	1d3b      	adds	r3, r7, #4
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d002      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	f000 bd1b 	b.w	800251e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae8:	4ba0      	ldr	r3, [pc, #640]	; (8001d6c <HAL_RCC_OscConfig+0x650>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001af0:	1d3b      	adds	r3, r7, #4
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	21f8      	movs	r1, #248	; 0xf8
 8001af8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afc:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001b00:	fa91 f1a1 	rbit	r1, r1
 8001b04:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001b08:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001b0c:	fab1 f181 	clz	r1, r1
 8001b10:	b2c9      	uxtb	r1, r1
 8001b12:	408b      	lsls	r3, r1
 8001b14:	4995      	ldr	r1, [pc, #596]	; (8001d6c <HAL_RCC_OscConfig+0x650>)
 8001b16:	4313      	orrs	r3, r2
 8001b18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b1a:	e0f5      	b.n	8001d08 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b1c:	1d3b      	adds	r3, r7, #4
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f000 8085 	beq.w	8001c32 <HAL_RCC_OscConfig+0x516>
 8001b28:	2301      	movs	r3, #1
 8001b2a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001b32:	fa93 f3a3 	rbit	r3, r3
 8001b36:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001b3a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b3e:	fab3 f383 	clz	r3, r3
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b48:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	461a      	mov	r2, r3
 8001b50:	2301      	movs	r3, #1
 8001b52:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b54:	f7ff f960 	bl	8000e18 <HAL_GetTick>
 8001b58:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b5c:	e00a      	b.n	8001b74 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b5e:	f7ff f95b 	bl	8000e18 <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d902      	bls.n	8001b74 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	f000 bcd5 	b.w	800251e <HAL_RCC_OscConfig+0xe02>
 8001b74:	2302      	movs	r3, #2
 8001b76:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001b7e:	fa93 f3a3 	rbit	r3, r3
 8001b82:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001b86:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b8a:	fab3 f383 	clz	r3, r3
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	095b      	lsrs	r3, r3, #5
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	f043 0301 	orr.w	r3, r3, #1
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d102      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x488>
 8001b9e:	4b73      	ldr	r3, [pc, #460]	; (8001d6c <HAL_RCC_OscConfig+0x650>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	e013      	b.n	8001bcc <HAL_RCC_OscConfig+0x4b0>
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001baa:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001bae:	fa93 f3a3 	rbit	r3, r3
 8001bb2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001bbc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001bc0:	fa93 f3a3 	rbit	r3, r3
 8001bc4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001bc8:	4b68      	ldr	r3, [pc, #416]	; (8001d6c <HAL_RCC_OscConfig+0x650>)
 8001bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bcc:	2202      	movs	r2, #2
 8001bce:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001bd2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001bd6:	fa92 f2a2 	rbit	r2, r2
 8001bda:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001bde:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001be2:	fab2 f282 	clz	r2, r2
 8001be6:	b2d2      	uxtb	r2, r2
 8001be8:	f042 0220 	orr.w	r2, r2, #32
 8001bec:	b2d2      	uxtb	r2, r2
 8001bee:	f002 021f 	and.w	r2, r2, #31
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	fa01 f202 	lsl.w	r2, r1, r2
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d0af      	beq.n	8001b5e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bfe:	4b5b      	ldr	r3, [pc, #364]	; (8001d6c <HAL_RCC_OscConfig+0x650>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c06:	1d3b      	adds	r3, r7, #4
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	695b      	ldr	r3, [r3, #20]
 8001c0c:	21f8      	movs	r1, #248	; 0xf8
 8001c0e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c12:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001c16:	fa91 f1a1 	rbit	r1, r1
 8001c1a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001c1e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001c22:	fab1 f181 	clz	r1, r1
 8001c26:	b2c9      	uxtb	r1, r1
 8001c28:	408b      	lsls	r3, r1
 8001c2a:	4950      	ldr	r1, [pc, #320]	; (8001d6c <HAL_RCC_OscConfig+0x650>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	600b      	str	r3, [r1, #0]
 8001c30:	e06a      	b.n	8001d08 <HAL_RCC_OscConfig+0x5ec>
 8001c32:	2301      	movs	r3, #1
 8001c34:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c38:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001c3c:	fa93 f3a3 	rbit	r3, r3
 8001c40:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001c44:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c48:	fab3 f383 	clz	r3, r3
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c52:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	461a      	mov	r2, r3
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5e:	f7ff f8db 	bl	8000e18 <HAL_GetTick>
 8001c62:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c66:	e00a      	b.n	8001c7e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c68:	f7ff f8d6 	bl	8000e18 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d902      	bls.n	8001c7e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	f000 bc50 	b.w	800251e <HAL_RCC_OscConfig+0xe02>
 8001c7e:	2302      	movs	r3, #2
 8001c80:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c84:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001c88:	fa93 f3a3 	rbit	r3, r3
 8001c8c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001c90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c94:	fab3 f383 	clz	r3, r3
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	095b      	lsrs	r3, r3, #5
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	f043 0301 	orr.w	r3, r3, #1
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d102      	bne.n	8001cae <HAL_RCC_OscConfig+0x592>
 8001ca8:	4b30      	ldr	r3, [pc, #192]	; (8001d6c <HAL_RCC_OscConfig+0x650>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	e013      	b.n	8001cd6 <HAL_RCC_OscConfig+0x5ba>
 8001cae:	2302      	movs	r3, #2
 8001cb0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001cb8:	fa93 f3a3 	rbit	r3, r3
 8001cbc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001cc6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001cca:	fa93 f3a3 	rbit	r3, r3
 8001cce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001cd2:	4b26      	ldr	r3, [pc, #152]	; (8001d6c <HAL_RCC_OscConfig+0x650>)
 8001cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001cdc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001ce0:	fa92 f2a2 	rbit	r2, r2
 8001ce4:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001ce8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001cec:	fab2 f282 	clz	r2, r2
 8001cf0:	b2d2      	uxtb	r2, r2
 8001cf2:	f042 0220 	orr.w	r2, r2, #32
 8001cf6:	b2d2      	uxtb	r2, r2
 8001cf8:	f002 021f 	and.w	r2, r2, #31
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	fa01 f202 	lsl.w	r2, r1, r2
 8001d02:	4013      	ands	r3, r2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d1af      	bne.n	8001c68 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d08:	1d3b      	adds	r3, r7, #4
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0308 	and.w	r3, r3, #8
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f000 80da 	beq.w	8001ecc <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d18:	1d3b      	adds	r3, r7, #4
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d069      	beq.n	8001df6 <HAL_RCC_OscConfig+0x6da>
 8001d22:	2301      	movs	r3, #1
 8001d24:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d28:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001d2c:	fa93 f3a3 	rbit	r3, r3
 8001d30:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001d34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d38:	fab3 f383 	clz	r3, r3
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	461a      	mov	r2, r3
 8001d40:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <HAL_RCC_OscConfig+0x654>)
 8001d42:	4413      	add	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	461a      	mov	r2, r3
 8001d48:	2301      	movs	r3, #1
 8001d4a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d4c:	f7ff f864 	bl	8000e18 <HAL_GetTick>
 8001d50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d54:	e00e      	b.n	8001d74 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d56:	f7ff f85f 	bl	8000e18 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d906      	bls.n	8001d74 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e3d9      	b.n	800251e <HAL_RCC_OscConfig+0xe02>
 8001d6a:	bf00      	nop
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	10908120 	.word	0x10908120
 8001d74:	2302      	movs	r3, #2
 8001d76:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001d7e:	fa93 f3a3 	rbit	r3, r3
 8001d82:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001d86:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	fa93 f2a3 	rbit	r2, r3
 8001d98:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001da2:	2202      	movs	r2, #2
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	fa93 f2a3 	rbit	r2, r3
 8001db0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001db4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001db6:	4ba5      	ldr	r3, [pc, #660]	; (800204c <HAL_RCC_OscConfig+0x930>)
 8001db8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dba:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001dbe:	2102      	movs	r1, #2
 8001dc0:	6019      	str	r1, [r3, #0]
 8001dc2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	fa93 f1a3 	rbit	r1, r3
 8001dcc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001dd0:	6019      	str	r1, [r3, #0]
  return result;
 8001dd2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	fab3 f383 	clz	r3, r3
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	f003 031f 	and.w	r3, r3, #31
 8001de8:	2101      	movs	r1, #1
 8001dea:	fa01 f303 	lsl.w	r3, r1, r3
 8001dee:	4013      	ands	r3, r2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d0b0      	beq.n	8001d56 <HAL_RCC_OscConfig+0x63a>
 8001df4:	e06a      	b.n	8001ecc <HAL_RCC_OscConfig+0x7b0>
 8001df6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfe:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	fa93 f2a3 	rbit	r2, r3
 8001e08:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001e0c:	601a      	str	r2, [r3, #0]
  return result;
 8001e0e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001e12:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e14:	fab3 f383 	clz	r3, r3
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	4b8c      	ldr	r3, [pc, #560]	; (8002050 <HAL_RCC_OscConfig+0x934>)
 8001e1e:	4413      	add	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	461a      	mov	r2, r3
 8001e24:	2300      	movs	r3, #0
 8001e26:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e28:	f7fe fff6 	bl	8000e18 <HAL_GetTick>
 8001e2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e30:	e009      	b.n	8001e46 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e32:	f7fe fff1 	bl	8000e18 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e36b      	b.n	800251e <HAL_RCC_OscConfig+0xe02>
 8001e46:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	fa93 f2a3 	rbit	r2, r3
 8001e58:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001e62:	2202      	movs	r2, #2
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	fa93 f2a3 	rbit	r2, r3
 8001e70:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	fa93 f2a3 	rbit	r2, r3
 8001e88:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e8c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e8e:	4b6f      	ldr	r3, [pc, #444]	; (800204c <HAL_RCC_OscConfig+0x930>)
 8001e90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e92:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001e96:	2102      	movs	r1, #2
 8001e98:	6019      	str	r1, [r3, #0]
 8001e9a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	fa93 f1a3 	rbit	r1, r3
 8001ea4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001ea8:	6019      	str	r1, [r3, #0]
  return result;
 8001eaa:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	fab3 f383 	clz	r3, r3
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	f003 031f 	and.w	r3, r3, #31
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d1b2      	bne.n	8001e32 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ecc:	1d3b      	adds	r3, r7, #4
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0304 	and.w	r3, r3, #4
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f000 8158 	beq.w	800218c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001edc:	2300      	movs	r3, #0
 8001ede:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ee2:	4b5a      	ldr	r3, [pc, #360]	; (800204c <HAL_RCC_OscConfig+0x930>)
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d112      	bne.n	8001f14 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eee:	4b57      	ldr	r3, [pc, #348]	; (800204c <HAL_RCC_OscConfig+0x930>)
 8001ef0:	69db      	ldr	r3, [r3, #28]
 8001ef2:	4a56      	ldr	r2, [pc, #344]	; (800204c <HAL_RCC_OscConfig+0x930>)
 8001ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ef8:	61d3      	str	r3, [r2, #28]
 8001efa:	4b54      	ldr	r3, [pc, #336]	; (800204c <HAL_RCC_OscConfig+0x930>)
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001f02:	f107 0308 	add.w	r3, r7, #8
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	f107 0308 	add.w	r3, r7, #8
 8001f0c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f14:	4b4f      	ldr	r3, [pc, #316]	; (8002054 <HAL_RCC_OscConfig+0x938>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d11a      	bne.n	8001f56 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f20:	4b4c      	ldr	r3, [pc, #304]	; (8002054 <HAL_RCC_OscConfig+0x938>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a4b      	ldr	r2, [pc, #300]	; (8002054 <HAL_RCC_OscConfig+0x938>)
 8001f26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f2a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f2c:	f7fe ff74 	bl	8000e18 <HAL_GetTick>
 8001f30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f34:	e009      	b.n	8001f4a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f36:	f7fe ff6f 	bl	8000e18 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b64      	cmp	r3, #100	; 0x64
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e2e9      	b.n	800251e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f4a:	4b42      	ldr	r3, [pc, #264]	; (8002054 <HAL_RCC_OscConfig+0x938>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d0ef      	beq.n	8001f36 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f56:	1d3b      	adds	r3, r7, #4
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d106      	bne.n	8001f6e <HAL_RCC_OscConfig+0x852>
 8001f60:	4b3a      	ldr	r3, [pc, #232]	; (800204c <HAL_RCC_OscConfig+0x930>)
 8001f62:	6a1b      	ldr	r3, [r3, #32]
 8001f64:	4a39      	ldr	r2, [pc, #228]	; (800204c <HAL_RCC_OscConfig+0x930>)
 8001f66:	f043 0301 	orr.w	r3, r3, #1
 8001f6a:	6213      	str	r3, [r2, #32]
 8001f6c:	e02f      	b.n	8001fce <HAL_RCC_OscConfig+0x8b2>
 8001f6e:	1d3b      	adds	r3, r7, #4
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d10c      	bne.n	8001f92 <HAL_RCC_OscConfig+0x876>
 8001f78:	4b34      	ldr	r3, [pc, #208]	; (800204c <HAL_RCC_OscConfig+0x930>)
 8001f7a:	6a1b      	ldr	r3, [r3, #32]
 8001f7c:	4a33      	ldr	r2, [pc, #204]	; (800204c <HAL_RCC_OscConfig+0x930>)
 8001f7e:	f023 0301 	bic.w	r3, r3, #1
 8001f82:	6213      	str	r3, [r2, #32]
 8001f84:	4b31      	ldr	r3, [pc, #196]	; (800204c <HAL_RCC_OscConfig+0x930>)
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	4a30      	ldr	r2, [pc, #192]	; (800204c <HAL_RCC_OscConfig+0x930>)
 8001f8a:	f023 0304 	bic.w	r3, r3, #4
 8001f8e:	6213      	str	r3, [r2, #32]
 8001f90:	e01d      	b.n	8001fce <HAL_RCC_OscConfig+0x8b2>
 8001f92:	1d3b      	adds	r3, r7, #4
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	2b05      	cmp	r3, #5
 8001f9a:	d10c      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x89a>
 8001f9c:	4b2b      	ldr	r3, [pc, #172]	; (800204c <HAL_RCC_OscConfig+0x930>)
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	4a2a      	ldr	r2, [pc, #168]	; (800204c <HAL_RCC_OscConfig+0x930>)
 8001fa2:	f043 0304 	orr.w	r3, r3, #4
 8001fa6:	6213      	str	r3, [r2, #32]
 8001fa8:	4b28      	ldr	r3, [pc, #160]	; (800204c <HAL_RCC_OscConfig+0x930>)
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	4a27      	ldr	r2, [pc, #156]	; (800204c <HAL_RCC_OscConfig+0x930>)
 8001fae:	f043 0301 	orr.w	r3, r3, #1
 8001fb2:	6213      	str	r3, [r2, #32]
 8001fb4:	e00b      	b.n	8001fce <HAL_RCC_OscConfig+0x8b2>
 8001fb6:	4b25      	ldr	r3, [pc, #148]	; (800204c <HAL_RCC_OscConfig+0x930>)
 8001fb8:	6a1b      	ldr	r3, [r3, #32]
 8001fba:	4a24      	ldr	r2, [pc, #144]	; (800204c <HAL_RCC_OscConfig+0x930>)
 8001fbc:	f023 0301 	bic.w	r3, r3, #1
 8001fc0:	6213      	str	r3, [r2, #32]
 8001fc2:	4b22      	ldr	r3, [pc, #136]	; (800204c <HAL_RCC_OscConfig+0x930>)
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
 8001fc6:	4a21      	ldr	r2, [pc, #132]	; (800204c <HAL_RCC_OscConfig+0x930>)
 8001fc8:	f023 0304 	bic.w	r3, r3, #4
 8001fcc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fce:	1d3b      	adds	r3, r7, #4
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d06b      	beq.n	80020b0 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fd8:	f7fe ff1e 	bl	8000e18 <HAL_GetTick>
 8001fdc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe0:	e00b      	b.n	8001ffa <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fe2:	f7fe ff19 	bl	8000e18 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e291      	b.n	800251e <HAL_RCC_OscConfig+0xe02>
 8001ffa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001ffe:	2202      	movs	r2, #2
 8002000:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002002:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	fa93 f2a3 	rbit	r2, r3
 800200c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002016:	2202      	movs	r2, #2
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	fa93 f2a3 	rbit	r2, r3
 8002024:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002028:	601a      	str	r2, [r3, #0]
  return result;
 800202a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800202e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002030:	fab3 f383 	clz	r3, r3
 8002034:	b2db      	uxtb	r3, r3
 8002036:	095b      	lsrs	r3, r3, #5
 8002038:	b2db      	uxtb	r3, r3
 800203a:	f043 0302 	orr.w	r3, r3, #2
 800203e:	b2db      	uxtb	r3, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d109      	bne.n	8002058 <HAL_RCC_OscConfig+0x93c>
 8002044:	4b01      	ldr	r3, [pc, #4]	; (800204c <HAL_RCC_OscConfig+0x930>)
 8002046:	6a1b      	ldr	r3, [r3, #32]
 8002048:	e014      	b.n	8002074 <HAL_RCC_OscConfig+0x958>
 800204a:	bf00      	nop
 800204c:	40021000 	.word	0x40021000
 8002050:	10908120 	.word	0x10908120
 8002054:	40007000 	.word	0x40007000
 8002058:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800205c:	2202      	movs	r2, #2
 800205e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002060:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	fa93 f2a3 	rbit	r2, r3
 800206a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	4bbb      	ldr	r3, [pc, #748]	; (8002360 <HAL_RCC_OscConfig+0xc44>)
 8002072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002074:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002078:	2102      	movs	r1, #2
 800207a:	6011      	str	r1, [r2, #0]
 800207c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002080:	6812      	ldr	r2, [r2, #0]
 8002082:	fa92 f1a2 	rbit	r1, r2
 8002086:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800208a:	6011      	str	r1, [r2, #0]
  return result;
 800208c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002090:	6812      	ldr	r2, [r2, #0]
 8002092:	fab2 f282 	clz	r2, r2
 8002096:	b2d2      	uxtb	r2, r2
 8002098:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800209c:	b2d2      	uxtb	r2, r2
 800209e:	f002 021f 	and.w	r2, r2, #31
 80020a2:	2101      	movs	r1, #1
 80020a4:	fa01 f202 	lsl.w	r2, r1, r2
 80020a8:	4013      	ands	r3, r2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d099      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x8c6>
 80020ae:	e063      	b.n	8002178 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b0:	f7fe feb2 	bl	8000e18 <HAL_GetTick>
 80020b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020b8:	e00b      	b.n	80020d2 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020ba:	f7fe fead 	bl	8000e18 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e225      	b.n	800251e <HAL_RCC_OscConfig+0xe02>
 80020d2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80020d6:	2202      	movs	r2, #2
 80020d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020da:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	fa93 f2a3 	rbit	r2, r3
 80020e4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80020ee:	2202      	movs	r2, #2
 80020f0:	601a      	str	r2, [r3, #0]
 80020f2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	fa93 f2a3 	rbit	r2, r3
 80020fc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002100:	601a      	str	r2, [r3, #0]
  return result;
 8002102:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002106:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002108:	fab3 f383 	clz	r3, r3
 800210c:	b2db      	uxtb	r3, r3
 800210e:	095b      	lsrs	r3, r3, #5
 8002110:	b2db      	uxtb	r3, r3
 8002112:	f043 0302 	orr.w	r3, r3, #2
 8002116:	b2db      	uxtb	r3, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d102      	bne.n	8002122 <HAL_RCC_OscConfig+0xa06>
 800211c:	4b90      	ldr	r3, [pc, #576]	; (8002360 <HAL_RCC_OscConfig+0xc44>)
 800211e:	6a1b      	ldr	r3, [r3, #32]
 8002120:	e00d      	b.n	800213e <HAL_RCC_OscConfig+0xa22>
 8002122:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002126:	2202      	movs	r2, #2
 8002128:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	fa93 f2a3 	rbit	r2, r3
 8002134:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	4b89      	ldr	r3, [pc, #548]	; (8002360 <HAL_RCC_OscConfig+0xc44>)
 800213c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002142:	2102      	movs	r1, #2
 8002144:	6011      	str	r1, [r2, #0]
 8002146:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800214a:	6812      	ldr	r2, [r2, #0]
 800214c:	fa92 f1a2 	rbit	r1, r2
 8002150:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002154:	6011      	str	r1, [r2, #0]
  return result;
 8002156:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800215a:	6812      	ldr	r2, [r2, #0]
 800215c:	fab2 f282 	clz	r2, r2
 8002160:	b2d2      	uxtb	r2, r2
 8002162:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002166:	b2d2      	uxtb	r2, r2
 8002168:	f002 021f 	and.w	r2, r2, #31
 800216c:	2101      	movs	r1, #1
 800216e:	fa01 f202 	lsl.w	r2, r1, r2
 8002172:	4013      	ands	r3, r2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1a0      	bne.n	80020ba <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002178:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800217c:	2b01      	cmp	r3, #1
 800217e:	d105      	bne.n	800218c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002180:	4b77      	ldr	r3, [pc, #476]	; (8002360 <HAL_RCC_OscConfig+0xc44>)
 8002182:	69db      	ldr	r3, [r3, #28]
 8002184:	4a76      	ldr	r2, [pc, #472]	; (8002360 <HAL_RCC_OscConfig+0xc44>)
 8002186:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800218a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800218c:	1d3b      	adds	r3, r7, #4
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	2b00      	cmp	r3, #0
 8002194:	f000 81c2 	beq.w	800251c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002198:	4b71      	ldr	r3, [pc, #452]	; (8002360 <HAL_RCC_OscConfig+0xc44>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f003 030c 	and.w	r3, r3, #12
 80021a0:	2b08      	cmp	r3, #8
 80021a2:	f000 819c 	beq.w	80024de <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021a6:	1d3b      	adds	r3, r7, #4
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	69db      	ldr	r3, [r3, #28]
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	f040 8114 	bne.w	80023da <HAL_RCC_OscConfig+0xcbe>
 80021b2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80021b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80021ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021bc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	fa93 f2a3 	rbit	r2, r3
 80021c6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80021ca:	601a      	str	r2, [r3, #0]
  return result;
 80021cc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80021d0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d2:	fab3 f383 	clz	r3, r3
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	461a      	mov	r2, r3
 80021e4:	2300      	movs	r3, #0
 80021e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e8:	f7fe fe16 	bl	8000e18 <HAL_GetTick>
 80021ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021f0:	e009      	b.n	8002206 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021f2:	f7fe fe11 	bl	8000e18 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e18b      	b.n	800251e <HAL_RCC_OscConfig+0xe02>
 8002206:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800220a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800220e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002210:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	fa93 f2a3 	rbit	r2, r3
 800221a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800221e:	601a      	str	r2, [r3, #0]
  return result;
 8002220:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002224:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002226:	fab3 f383 	clz	r3, r3
 800222a:	b2db      	uxtb	r3, r3
 800222c:	095b      	lsrs	r3, r3, #5
 800222e:	b2db      	uxtb	r3, r3
 8002230:	f043 0301 	orr.w	r3, r3, #1
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b01      	cmp	r3, #1
 8002238:	d102      	bne.n	8002240 <HAL_RCC_OscConfig+0xb24>
 800223a:	4b49      	ldr	r3, [pc, #292]	; (8002360 <HAL_RCC_OscConfig+0xc44>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	e01b      	b.n	8002278 <HAL_RCC_OscConfig+0xb5c>
 8002240:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002244:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002248:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	fa93 f2a3 	rbit	r2, r3
 8002254:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800225e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	fa93 f2a3 	rbit	r2, r3
 800226e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	4b3a      	ldr	r3, [pc, #232]	; (8002360 <HAL_RCC_OscConfig+0xc44>)
 8002276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002278:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800227c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002280:	6011      	str	r1, [r2, #0]
 8002282:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002286:	6812      	ldr	r2, [r2, #0]
 8002288:	fa92 f1a2 	rbit	r1, r2
 800228c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002290:	6011      	str	r1, [r2, #0]
  return result;
 8002292:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002296:	6812      	ldr	r2, [r2, #0]
 8002298:	fab2 f282 	clz	r2, r2
 800229c:	b2d2      	uxtb	r2, r2
 800229e:	f042 0220 	orr.w	r2, r2, #32
 80022a2:	b2d2      	uxtb	r2, r2
 80022a4:	f002 021f 	and.w	r2, r2, #31
 80022a8:	2101      	movs	r1, #1
 80022aa:	fa01 f202 	lsl.w	r2, r1, r2
 80022ae:	4013      	ands	r3, r2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d19e      	bne.n	80021f2 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022b4:	4b2a      	ldr	r3, [pc, #168]	; (8002360 <HAL_RCC_OscConfig+0xc44>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022bc:	1d3b      	adds	r3, r7, #4
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80022c2:	1d3b      	adds	r3, r7, #4
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	430b      	orrs	r3, r1
 80022ca:	4925      	ldr	r1, [pc, #148]	; (8002360 <HAL_RCC_OscConfig+0xc44>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	604b      	str	r3, [r1, #4]
 80022d0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80022d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80022d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	fa93 f2a3 	rbit	r2, r3
 80022e4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80022e8:	601a      	str	r2, [r3, #0]
  return result;
 80022ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80022ee:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022f0:	fab3 f383 	clz	r3, r3
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022fa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	461a      	mov	r2, r3
 8002302:	2301      	movs	r3, #1
 8002304:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002306:	f7fe fd87 	bl	8000e18 <HAL_GetTick>
 800230a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800230e:	e009      	b.n	8002324 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002310:	f7fe fd82 	bl	8000e18 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e0fc      	b.n	800251e <HAL_RCC_OscConfig+0xe02>
 8002324:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002328:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800232c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	fa93 f2a3 	rbit	r2, r3
 8002338:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800233c:	601a      	str	r2, [r3, #0]
  return result;
 800233e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002342:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002344:	fab3 f383 	clz	r3, r3
 8002348:	b2db      	uxtb	r3, r3
 800234a:	095b      	lsrs	r3, r3, #5
 800234c:	b2db      	uxtb	r3, r3
 800234e:	f043 0301 	orr.w	r3, r3, #1
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b01      	cmp	r3, #1
 8002356:	d105      	bne.n	8002364 <HAL_RCC_OscConfig+0xc48>
 8002358:	4b01      	ldr	r3, [pc, #4]	; (8002360 <HAL_RCC_OscConfig+0xc44>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	e01e      	b.n	800239c <HAL_RCC_OscConfig+0xc80>
 800235e:	bf00      	nop
 8002360:	40021000 	.word	0x40021000
 8002364:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002368:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800236c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	fa93 f2a3 	rbit	r2, r3
 8002378:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002382:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	fa93 f2a3 	rbit	r2, r3
 8002392:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	4b63      	ldr	r3, [pc, #396]	; (8002528 <HAL_RCC_OscConfig+0xe0c>)
 800239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80023a0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80023a4:	6011      	str	r1, [r2, #0]
 80023a6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80023aa:	6812      	ldr	r2, [r2, #0]
 80023ac:	fa92 f1a2 	rbit	r1, r2
 80023b0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80023b4:	6011      	str	r1, [r2, #0]
  return result;
 80023b6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80023ba:	6812      	ldr	r2, [r2, #0]
 80023bc:	fab2 f282 	clz	r2, r2
 80023c0:	b2d2      	uxtb	r2, r2
 80023c2:	f042 0220 	orr.w	r2, r2, #32
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	f002 021f 	and.w	r2, r2, #31
 80023cc:	2101      	movs	r1, #1
 80023ce:	fa01 f202 	lsl.w	r2, r1, r2
 80023d2:	4013      	ands	r3, r2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d09b      	beq.n	8002310 <HAL_RCC_OscConfig+0xbf4>
 80023d8:	e0a0      	b.n	800251c <HAL_RCC_OscConfig+0xe00>
 80023da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023de:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80023e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	fa93 f2a3 	rbit	r2, r3
 80023ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023f2:	601a      	str	r2, [r3, #0]
  return result;
 80023f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023f8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023fa:	fab3 f383 	clz	r3, r3
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002404:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	461a      	mov	r2, r3
 800240c:	2300      	movs	r3, #0
 800240e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002410:	f7fe fd02 	bl	8000e18 <HAL_GetTick>
 8002414:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002418:	e009      	b.n	800242e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800241a:	f7fe fcfd 	bl	8000e18 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e077      	b.n	800251e <HAL_RCC_OscConfig+0xe02>
 800242e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002432:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002436:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002438:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	fa93 f2a3 	rbit	r2, r3
 8002442:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002446:	601a      	str	r2, [r3, #0]
  return result;
 8002448:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800244c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800244e:	fab3 f383 	clz	r3, r3
 8002452:	b2db      	uxtb	r3, r3
 8002454:	095b      	lsrs	r3, r3, #5
 8002456:	b2db      	uxtb	r3, r3
 8002458:	f043 0301 	orr.w	r3, r3, #1
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b01      	cmp	r3, #1
 8002460:	d102      	bne.n	8002468 <HAL_RCC_OscConfig+0xd4c>
 8002462:	4b31      	ldr	r3, [pc, #196]	; (8002528 <HAL_RCC_OscConfig+0xe0c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	e01b      	b.n	80024a0 <HAL_RCC_OscConfig+0xd84>
 8002468:	f107 0320 	add.w	r3, r7, #32
 800246c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002470:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002472:	f107 0320 	add.w	r3, r7, #32
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	fa93 f2a3 	rbit	r2, r3
 800247c:	f107 031c 	add.w	r3, r7, #28
 8002480:	601a      	str	r2, [r3, #0]
 8002482:	f107 0318 	add.w	r3, r7, #24
 8002486:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	f107 0318 	add.w	r3, r7, #24
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	fa93 f2a3 	rbit	r2, r3
 8002496:	f107 0314 	add.w	r3, r7, #20
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	4b22      	ldr	r3, [pc, #136]	; (8002528 <HAL_RCC_OscConfig+0xe0c>)
 800249e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a0:	f107 0210 	add.w	r2, r7, #16
 80024a4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80024a8:	6011      	str	r1, [r2, #0]
 80024aa:	f107 0210 	add.w	r2, r7, #16
 80024ae:	6812      	ldr	r2, [r2, #0]
 80024b0:	fa92 f1a2 	rbit	r1, r2
 80024b4:	f107 020c 	add.w	r2, r7, #12
 80024b8:	6011      	str	r1, [r2, #0]
  return result;
 80024ba:	f107 020c 	add.w	r2, r7, #12
 80024be:	6812      	ldr	r2, [r2, #0]
 80024c0:	fab2 f282 	clz	r2, r2
 80024c4:	b2d2      	uxtb	r2, r2
 80024c6:	f042 0220 	orr.w	r2, r2, #32
 80024ca:	b2d2      	uxtb	r2, r2
 80024cc:	f002 021f 	and.w	r2, r2, #31
 80024d0:	2101      	movs	r1, #1
 80024d2:	fa01 f202 	lsl.w	r2, r1, r2
 80024d6:	4013      	ands	r3, r2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d19e      	bne.n	800241a <HAL_RCC_OscConfig+0xcfe>
 80024dc:	e01e      	b.n	800251c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024de:	1d3b      	adds	r3, r7, #4
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	69db      	ldr	r3, [r3, #28]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d101      	bne.n	80024ec <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e018      	b.n	800251e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024ec:	4b0e      	ldr	r3, [pc, #56]	; (8002528 <HAL_RCC_OscConfig+0xe0c>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80024f4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80024f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024fc:	1d3b      	adds	r3, r7, #4
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	429a      	cmp	r2, r3
 8002504:	d108      	bne.n	8002518 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002506:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800250a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800250e:	1d3b      	adds	r3, r7, #4
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002514:	429a      	cmp	r2, r3
 8002516:	d001      	beq.n	800251c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e000      	b.n	800251e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40021000 	.word	0x40021000

0800252c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b09e      	sub	sp, #120	; 0x78
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002536:	2300      	movs	r3, #0
 8002538:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d101      	bne.n	8002544 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e162      	b.n	800280a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002544:	4b90      	ldr	r3, [pc, #576]	; (8002788 <HAL_RCC_ClockConfig+0x25c>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0307 	and.w	r3, r3, #7
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	429a      	cmp	r2, r3
 8002550:	d910      	bls.n	8002574 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002552:	4b8d      	ldr	r3, [pc, #564]	; (8002788 <HAL_RCC_ClockConfig+0x25c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f023 0207 	bic.w	r2, r3, #7
 800255a:	498b      	ldr	r1, [pc, #556]	; (8002788 <HAL_RCC_ClockConfig+0x25c>)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	4313      	orrs	r3, r2
 8002560:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002562:	4b89      	ldr	r3, [pc, #548]	; (8002788 <HAL_RCC_ClockConfig+0x25c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0307 	and.w	r3, r3, #7
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	429a      	cmp	r2, r3
 800256e:	d001      	beq.n	8002574 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e14a      	b.n	800280a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d008      	beq.n	8002592 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002580:	4b82      	ldr	r3, [pc, #520]	; (800278c <HAL_RCC_ClockConfig+0x260>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	497f      	ldr	r1, [pc, #508]	; (800278c <HAL_RCC_ClockConfig+0x260>)
 800258e:	4313      	orrs	r3, r2
 8002590:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	2b00      	cmp	r3, #0
 800259c:	f000 80dc 	beq.w	8002758 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d13c      	bne.n	8002622 <HAL_RCC_ClockConfig+0xf6>
 80025a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025ac:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025b0:	fa93 f3a3 	rbit	r3, r3
 80025b4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80025b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b8:	fab3 f383 	clz	r3, r3
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	095b      	lsrs	r3, r3, #5
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	f043 0301 	orr.w	r3, r3, #1
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d102      	bne.n	80025d2 <HAL_RCC_ClockConfig+0xa6>
 80025cc:	4b6f      	ldr	r3, [pc, #444]	; (800278c <HAL_RCC_ClockConfig+0x260>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	e00f      	b.n	80025f2 <HAL_RCC_ClockConfig+0xc6>
 80025d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025d6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025da:	fa93 f3a3 	rbit	r3, r3
 80025de:	667b      	str	r3, [r7, #100]	; 0x64
 80025e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025e4:	663b      	str	r3, [r7, #96]	; 0x60
 80025e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025e8:	fa93 f3a3 	rbit	r3, r3
 80025ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80025ee:	4b67      	ldr	r3, [pc, #412]	; (800278c <HAL_RCC_ClockConfig+0x260>)
 80025f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025f6:	65ba      	str	r2, [r7, #88]	; 0x58
 80025f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80025fa:	fa92 f2a2 	rbit	r2, r2
 80025fe:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002600:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002602:	fab2 f282 	clz	r2, r2
 8002606:	b2d2      	uxtb	r2, r2
 8002608:	f042 0220 	orr.w	r2, r2, #32
 800260c:	b2d2      	uxtb	r2, r2
 800260e:	f002 021f 	and.w	r2, r2, #31
 8002612:	2101      	movs	r1, #1
 8002614:	fa01 f202 	lsl.w	r2, r1, r2
 8002618:	4013      	ands	r3, r2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d17b      	bne.n	8002716 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e0f3      	b.n	800280a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2b02      	cmp	r3, #2
 8002628:	d13c      	bne.n	80026a4 <HAL_RCC_ClockConfig+0x178>
 800262a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800262e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002630:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002632:	fa93 f3a3 	rbit	r3, r3
 8002636:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800263a:	fab3 f383 	clz	r3, r3
 800263e:	b2db      	uxtb	r3, r3
 8002640:	095b      	lsrs	r3, r3, #5
 8002642:	b2db      	uxtb	r3, r3
 8002644:	f043 0301 	orr.w	r3, r3, #1
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b01      	cmp	r3, #1
 800264c:	d102      	bne.n	8002654 <HAL_RCC_ClockConfig+0x128>
 800264e:	4b4f      	ldr	r3, [pc, #316]	; (800278c <HAL_RCC_ClockConfig+0x260>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	e00f      	b.n	8002674 <HAL_RCC_ClockConfig+0x148>
 8002654:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002658:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800265c:	fa93 f3a3 	rbit	r3, r3
 8002660:	647b      	str	r3, [r7, #68]	; 0x44
 8002662:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002666:	643b      	str	r3, [r7, #64]	; 0x40
 8002668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800266a:	fa93 f3a3 	rbit	r3, r3
 800266e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002670:	4b46      	ldr	r3, [pc, #280]	; (800278c <HAL_RCC_ClockConfig+0x260>)
 8002672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002674:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002678:	63ba      	str	r2, [r7, #56]	; 0x38
 800267a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800267c:	fa92 f2a2 	rbit	r2, r2
 8002680:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002682:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002684:	fab2 f282 	clz	r2, r2
 8002688:	b2d2      	uxtb	r2, r2
 800268a:	f042 0220 	orr.w	r2, r2, #32
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	f002 021f 	and.w	r2, r2, #31
 8002694:	2101      	movs	r1, #1
 8002696:	fa01 f202 	lsl.w	r2, r1, r2
 800269a:	4013      	ands	r3, r2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d13a      	bne.n	8002716 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e0b2      	b.n	800280a <HAL_RCC_ClockConfig+0x2de>
 80026a4:	2302      	movs	r3, #2
 80026a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026aa:	fa93 f3a3 	rbit	r3, r3
 80026ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80026b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b2:	fab3 f383 	clz	r3, r3
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	095b      	lsrs	r3, r3, #5
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d102      	bne.n	80026cc <HAL_RCC_ClockConfig+0x1a0>
 80026c6:	4b31      	ldr	r3, [pc, #196]	; (800278c <HAL_RCC_ClockConfig+0x260>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	e00d      	b.n	80026e8 <HAL_RCC_ClockConfig+0x1bc>
 80026cc:	2302      	movs	r3, #2
 80026ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d2:	fa93 f3a3 	rbit	r3, r3
 80026d6:	627b      	str	r3, [r7, #36]	; 0x24
 80026d8:	2302      	movs	r3, #2
 80026da:	623b      	str	r3, [r7, #32]
 80026dc:	6a3b      	ldr	r3, [r7, #32]
 80026de:	fa93 f3a3 	rbit	r3, r3
 80026e2:	61fb      	str	r3, [r7, #28]
 80026e4:	4b29      	ldr	r3, [pc, #164]	; (800278c <HAL_RCC_ClockConfig+0x260>)
 80026e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e8:	2202      	movs	r2, #2
 80026ea:	61ba      	str	r2, [r7, #24]
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	fa92 f2a2 	rbit	r2, r2
 80026f2:	617a      	str	r2, [r7, #20]
  return result;
 80026f4:	697a      	ldr	r2, [r7, #20]
 80026f6:	fab2 f282 	clz	r2, r2
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	f042 0220 	orr.w	r2, r2, #32
 8002700:	b2d2      	uxtb	r2, r2
 8002702:	f002 021f 	and.w	r2, r2, #31
 8002706:	2101      	movs	r1, #1
 8002708:	fa01 f202 	lsl.w	r2, r1, r2
 800270c:	4013      	ands	r3, r2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e079      	b.n	800280a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002716:	4b1d      	ldr	r3, [pc, #116]	; (800278c <HAL_RCC_ClockConfig+0x260>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f023 0203 	bic.w	r2, r3, #3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	491a      	ldr	r1, [pc, #104]	; (800278c <HAL_RCC_ClockConfig+0x260>)
 8002724:	4313      	orrs	r3, r2
 8002726:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002728:	f7fe fb76 	bl	8000e18 <HAL_GetTick>
 800272c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800272e:	e00a      	b.n	8002746 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002730:	f7fe fb72 	bl	8000e18 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	f241 3288 	movw	r2, #5000	; 0x1388
 800273e:	4293      	cmp	r3, r2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e061      	b.n	800280a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002746:	4b11      	ldr	r3, [pc, #68]	; (800278c <HAL_RCC_ClockConfig+0x260>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f003 020c 	and.w	r2, r3, #12
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	429a      	cmp	r2, r3
 8002756:	d1eb      	bne.n	8002730 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002758:	4b0b      	ldr	r3, [pc, #44]	; (8002788 <HAL_RCC_ClockConfig+0x25c>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0307 	and.w	r3, r3, #7
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	429a      	cmp	r2, r3
 8002764:	d214      	bcs.n	8002790 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002766:	4b08      	ldr	r3, [pc, #32]	; (8002788 <HAL_RCC_ClockConfig+0x25c>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f023 0207 	bic.w	r2, r3, #7
 800276e:	4906      	ldr	r1, [pc, #24]	; (8002788 <HAL_RCC_ClockConfig+0x25c>)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	4313      	orrs	r3, r2
 8002774:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002776:	4b04      	ldr	r3, [pc, #16]	; (8002788 <HAL_RCC_ClockConfig+0x25c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0307 	and.w	r3, r3, #7
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	429a      	cmp	r2, r3
 8002782:	d005      	beq.n	8002790 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e040      	b.n	800280a <HAL_RCC_ClockConfig+0x2de>
 8002788:	40022000 	.word	0x40022000
 800278c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	2b00      	cmp	r3, #0
 800279a:	d008      	beq.n	80027ae <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800279c:	4b1d      	ldr	r3, [pc, #116]	; (8002814 <HAL_RCC_ClockConfig+0x2e8>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	491a      	ldr	r1, [pc, #104]	; (8002814 <HAL_RCC_ClockConfig+0x2e8>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0308 	and.w	r3, r3, #8
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d009      	beq.n	80027ce <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027ba:	4b16      	ldr	r3, [pc, #88]	; (8002814 <HAL_RCC_ClockConfig+0x2e8>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	4912      	ldr	r1, [pc, #72]	; (8002814 <HAL_RCC_ClockConfig+0x2e8>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80027ce:	f000 f829 	bl	8002824 <HAL_RCC_GetSysClockFreq>
 80027d2:	4601      	mov	r1, r0
 80027d4:	4b0f      	ldr	r3, [pc, #60]	; (8002814 <HAL_RCC_ClockConfig+0x2e8>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027dc:	22f0      	movs	r2, #240	; 0xf0
 80027de:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	fa92 f2a2 	rbit	r2, r2
 80027e6:	60fa      	str	r2, [r7, #12]
  return result;
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	fab2 f282 	clz	r2, r2
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	40d3      	lsrs	r3, r2
 80027f2:	4a09      	ldr	r2, [pc, #36]	; (8002818 <HAL_RCC_ClockConfig+0x2ec>)
 80027f4:	5cd3      	ldrb	r3, [r2, r3]
 80027f6:	fa21 f303 	lsr.w	r3, r1, r3
 80027fa:	4a08      	ldr	r2, [pc, #32]	; (800281c <HAL_RCC_ClockConfig+0x2f0>)
 80027fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80027fe:	4b08      	ldr	r3, [pc, #32]	; (8002820 <HAL_RCC_ClockConfig+0x2f4>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f7fe fac4 	bl	8000d90 <HAL_InitTick>
  
  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3778      	adds	r7, #120	; 0x78
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40021000 	.word	0x40021000
 8002818:	08005424 	.word	0x08005424
 800281c:	20000018 	.word	0x20000018
 8002820:	2000001c 	.word	0x2000001c

08002824 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002824:	b480      	push	{r7}
 8002826:	b08b      	sub	sp, #44	; 0x2c
 8002828:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800282a:	2300      	movs	r3, #0
 800282c:	61fb      	str	r3, [r7, #28]
 800282e:	2300      	movs	r3, #0
 8002830:	61bb      	str	r3, [r7, #24]
 8002832:	2300      	movs	r3, #0
 8002834:	627b      	str	r3, [r7, #36]	; 0x24
 8002836:	2300      	movs	r3, #0
 8002838:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800283a:	2300      	movs	r3, #0
 800283c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800283e:	4b29      	ldr	r3, [pc, #164]	; (80028e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	f003 030c 	and.w	r3, r3, #12
 800284a:	2b04      	cmp	r3, #4
 800284c:	d002      	beq.n	8002854 <HAL_RCC_GetSysClockFreq+0x30>
 800284e:	2b08      	cmp	r3, #8
 8002850:	d003      	beq.n	800285a <HAL_RCC_GetSysClockFreq+0x36>
 8002852:	e03c      	b.n	80028ce <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002854:	4b24      	ldr	r3, [pc, #144]	; (80028e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002856:	623b      	str	r3, [r7, #32]
      break;
 8002858:	e03c      	b.n	80028d4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002860:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002864:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002866:	68ba      	ldr	r2, [r7, #8]
 8002868:	fa92 f2a2 	rbit	r2, r2
 800286c:	607a      	str	r2, [r7, #4]
  return result;
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	fab2 f282 	clz	r2, r2
 8002874:	b2d2      	uxtb	r2, r2
 8002876:	40d3      	lsrs	r3, r2
 8002878:	4a1c      	ldr	r2, [pc, #112]	; (80028ec <HAL_RCC_GetSysClockFreq+0xc8>)
 800287a:	5cd3      	ldrb	r3, [r2, r3]
 800287c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800287e:	4b19      	ldr	r3, [pc, #100]	; (80028e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	220f      	movs	r2, #15
 8002888:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	fa92 f2a2 	rbit	r2, r2
 8002890:	60fa      	str	r2, [r7, #12]
  return result;
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	fab2 f282 	clz	r2, r2
 8002898:	b2d2      	uxtb	r2, r2
 800289a:	40d3      	lsrs	r3, r2
 800289c:	4a14      	ldr	r2, [pc, #80]	; (80028f0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800289e:	5cd3      	ldrb	r3, [r2, r3]
 80028a0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d008      	beq.n	80028be <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80028ac:	4a0e      	ldr	r2, [pc, #56]	; (80028e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	fb02 f303 	mul.w	r3, r2, r3
 80028ba:	627b      	str	r3, [r7, #36]	; 0x24
 80028bc:	e004      	b.n	80028c8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	4a0c      	ldr	r2, [pc, #48]	; (80028f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 80028c2:	fb02 f303 	mul.w	r3, r2, r3
 80028c6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	623b      	str	r3, [r7, #32]
      break;
 80028cc:	e002      	b.n	80028d4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028ce:	4b0a      	ldr	r3, [pc, #40]	; (80028f8 <HAL_RCC_GetSysClockFreq+0xd4>)
 80028d0:	623b      	str	r3, [r7, #32]
      break;
 80028d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028d4:	6a3b      	ldr	r3, [r7, #32]
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	372c      	adds	r7, #44	; 0x2c
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	40021000 	.word	0x40021000
 80028e8:	01e84800 	.word	0x01e84800
 80028ec:	0800543c 	.word	0x0800543c
 80028f0:	0800544c 	.word	0x0800544c
 80028f4:	003d0900 	.word	0x003d0900
 80028f8:	007a1200 	.word	0x007a1200

080028fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002900:	4b03      	ldr	r3, [pc, #12]	; (8002910 <HAL_RCC_GetHCLKFreq+0x14>)
 8002902:	681b      	ldr	r3, [r3, #0]
}
 8002904:	4618      	mov	r0, r3
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	20000018 	.word	0x20000018

08002914 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800291a:	f7ff ffef 	bl	80028fc <HAL_RCC_GetHCLKFreq>
 800291e:	4601      	mov	r1, r0
 8002920:	4b0b      	ldr	r3, [pc, #44]	; (8002950 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002928:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800292c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	fa92 f2a2 	rbit	r2, r2
 8002934:	603a      	str	r2, [r7, #0]
  return result;
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	fab2 f282 	clz	r2, r2
 800293c:	b2d2      	uxtb	r2, r2
 800293e:	40d3      	lsrs	r3, r2
 8002940:	4a04      	ldr	r2, [pc, #16]	; (8002954 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002942:	5cd3      	ldrb	r3, [r2, r3]
 8002944:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002948:	4618      	mov	r0, r3
 800294a:	3708      	adds	r7, #8
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40021000 	.word	0x40021000
 8002954:	08005434 	.word	0x08005434

08002958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800295e:	f7ff ffcd 	bl	80028fc <HAL_RCC_GetHCLKFreq>
 8002962:	4601      	mov	r1, r0
 8002964:	4b0b      	ldr	r3, [pc, #44]	; (8002994 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800296c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002970:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	fa92 f2a2 	rbit	r2, r2
 8002978:	603a      	str	r2, [r7, #0]
  return result;
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	fab2 f282 	clz	r2, r2
 8002980:	b2d2      	uxtb	r2, r2
 8002982:	40d3      	lsrs	r3, r2
 8002984:	4a04      	ldr	r2, [pc, #16]	; (8002998 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002986:	5cd3      	ldrb	r3, [r2, r3]
 8002988:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800298c:	4618      	mov	r0, r3
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	40021000 	.word	0x40021000
 8002998:	08005434 	.word	0x08005434

0800299c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b092      	sub	sp, #72	; 0x48
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029a4:	2300      	movs	r3, #0
 80029a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80029a8:	2300      	movs	r3, #0
 80029aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80029ac:	2300      	movs	r3, #0
 80029ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f000 80d4 	beq.w	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029c0:	4b4e      	ldr	r3, [pc, #312]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029c2:	69db      	ldr	r3, [r3, #28]
 80029c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d10e      	bne.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029cc:	4b4b      	ldr	r3, [pc, #300]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ce:	69db      	ldr	r3, [r3, #28]
 80029d0:	4a4a      	ldr	r2, [pc, #296]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029d6:	61d3      	str	r3, [r2, #28]
 80029d8:	4b48      	ldr	r3, [pc, #288]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029da:	69db      	ldr	r3, [r3, #28]
 80029dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e0:	60bb      	str	r3, [r7, #8]
 80029e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029e4:	2301      	movs	r3, #1
 80029e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ea:	4b45      	ldr	r3, [pc, #276]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d118      	bne.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029f6:	4b42      	ldr	r3, [pc, #264]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a41      	ldr	r2, [pc, #260]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a00:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a02:	f7fe fa09 	bl	8000e18 <HAL_GetTick>
 8002a06:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a08:	e008      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a0a:	f7fe fa05 	bl	8000e18 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b64      	cmp	r3, #100	; 0x64
 8002a16:	d901      	bls.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e13c      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a1c:	4b38      	ldr	r3, [pc, #224]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d0f0      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a28:	4b34      	ldr	r3, [pc, #208]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a30:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f000 8084 	beq.w	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d07c      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a48:	4b2c      	ldr	r3, [pc, #176]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a4a:	6a1b      	ldr	r3, [r3, #32]
 8002a4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a56:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a5a:	fa93 f3a3 	rbit	r3, r3
 8002a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a62:	fab3 f383 	clz	r3, r3
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	461a      	mov	r2, r3
 8002a6a:	4b26      	ldr	r3, [pc, #152]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a6c:	4413      	add	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	461a      	mov	r2, r3
 8002a72:	2301      	movs	r3, #1
 8002a74:	6013      	str	r3, [r2, #0]
 8002a76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a7a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a7e:	fa93 f3a3 	rbit	r3, r3
 8002a82:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a86:	fab3 f383 	clz	r3, r3
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	4b1d      	ldr	r3, [pc, #116]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a90:	4413      	add	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	461a      	mov	r2, r3
 8002a96:	2300      	movs	r3, #0
 8002a98:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a9a:	4a18      	ldr	r2, [pc, #96]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a9e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002aa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d04b      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aaa:	f7fe f9b5 	bl	8000e18 <HAL_GetTick>
 8002aae:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab0:	e00a      	b.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ab2:	f7fe f9b1 	bl	8000e18 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e0e6      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8002ac8:	2302      	movs	r3, #2
 8002aca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ace:	fa93 f3a3 	rbit	r3, r3
 8002ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	623b      	str	r3, [r7, #32]
 8002ad8:	6a3b      	ldr	r3, [r7, #32]
 8002ada:	fa93 f3a3 	rbit	r3, r3
 8002ade:	61fb      	str	r3, [r7, #28]
  return result;
 8002ae0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ae2:	fab3 f383 	clz	r3, r3
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	095b      	lsrs	r3, r3, #5
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	f043 0302 	orr.w	r3, r3, #2
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d108      	bne.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002af6:	4b01      	ldr	r3, [pc, #4]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002af8:	6a1b      	ldr	r3, [r3, #32]
 8002afa:	e00d      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002afc:	40021000 	.word	0x40021000
 8002b00:	40007000 	.word	0x40007000
 8002b04:	10908100 	.word	0x10908100
 8002b08:	2302      	movs	r3, #2
 8002b0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	fa93 f3a3 	rbit	r3, r3
 8002b12:	617b      	str	r3, [r7, #20]
 8002b14:	4b62      	ldr	r3, [pc, #392]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b18:	2202      	movs	r2, #2
 8002b1a:	613a      	str	r2, [r7, #16]
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	fa92 f2a2 	rbit	r2, r2
 8002b22:	60fa      	str	r2, [r7, #12]
  return result;
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	fab2 f282 	clz	r2, r2
 8002b2a:	b2d2      	uxtb	r2, r2
 8002b2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b30:	b2d2      	uxtb	r2, r2
 8002b32:	f002 021f 	and.w	r2, r2, #31
 8002b36:	2101      	movs	r1, #1
 8002b38:	fa01 f202 	lsl.w	r2, r1, r2
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d0b7      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002b42:	4b57      	ldr	r3, [pc, #348]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	4954      	ldr	r1, [pc, #336]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b54:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d105      	bne.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b5c:	4b50      	ldr	r3, [pc, #320]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b5e:	69db      	ldr	r3, [r3, #28]
 8002b60:	4a4f      	ldr	r2, [pc, #316]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b66:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d008      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b74:	4b4a      	ldr	r3, [pc, #296]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b78:	f023 0203 	bic.w	r2, r3, #3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	4947      	ldr	r1, [pc, #284]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0320 	and.w	r3, r3, #32
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d008      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b92:	4b43      	ldr	r3, [pc, #268]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	f023 0210 	bic.w	r2, r3, #16
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	4940      	ldr	r1, [pc, #256]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d008      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002bb0:	4b3b      	ldr	r3, [pc, #236]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb4:	f023 0220 	bic.w	r2, r3, #32
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	4938      	ldr	r1, [pc, #224]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d008      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bce:	4b34      	ldr	r3, [pc, #208]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	4931      	ldr	r1, [pc, #196]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d008      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002bec:	4b2c      	ldr	r3, [pc, #176]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	69db      	ldr	r3, [r3, #28]
 8002bf8:	4929      	ldr	r1, [pc, #164]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d008      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8002c0a:	4b25      	ldr	r3, [pc, #148]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	4922      	ldr	r1, [pc, #136]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d008      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002c28:	4b1d      	ldr	r3, [pc, #116]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a1b      	ldr	r3, [r3, #32]
 8002c34:	491a      	ldr	r1, [pc, #104]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d008      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002c46:	4b16      	ldr	r3, [pc, #88]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c52:	4913      	ldr	r1, [pc, #76]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d008      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002c64:	4b0e      	ldr	r3, [pc, #56]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c68:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c70:	490b      	ldr	r1, [pc, #44]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d008      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002c82:	4b07      	ldr	r3, [pc, #28]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8e:	4904      	ldr	r1, [pc, #16]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3748      	adds	r7, #72	; 0x48
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40021000 	.word	0x40021000

08002ca4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e09d      	b.n	8002df2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d108      	bne.n	8002cd0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cc6:	d009      	beq.n	8002cdc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	61da      	str	r2, [r3, #28]
 8002cce:	e005      	b.n	8002cdc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d106      	bne.n	8002cfc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f7fd feae 	bl	8000a58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2202      	movs	r2, #2
 8002d00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d12:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d1c:	d902      	bls.n	8002d24 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	60fb      	str	r3, [r7, #12]
 8002d22:	e002      	b.n	8002d2a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002d24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d28:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002d32:	d007      	beq.n	8002d44 <HAL_SPI_Init+0xa0>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d3c:	d002      	beq.n	8002d44 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002d54:	431a      	orrs	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	695b      	ldr	r3, [r3, #20]
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d72:	431a      	orrs	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	69db      	ldr	r3, [r3, #28]
 8002d78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d86:	ea42 0103 	orr.w	r1, r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	0c1b      	lsrs	r3, r3, #16
 8002da0:	f003 0204 	and.w	r2, r3, #4
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da8:	f003 0310 	and.w	r3, r3, #16
 8002dac:	431a      	orrs	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002db2:	f003 0308 	and.w	r3, r3, #8
 8002db6:	431a      	orrs	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002dc0:	ea42 0103 	orr.w	r1, r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	69da      	ldr	r2, [r3, #28]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002de0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b088      	sub	sp, #32
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	60f8      	str	r0, [r7, #12]
 8002e02:	60b9      	str	r1, [r7, #8]
 8002e04:	603b      	str	r3, [r7, #0]
 8002e06:	4613      	mov	r3, r2
 8002e08:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d101      	bne.n	8002e1c <HAL_SPI_Transmit+0x22>
 8002e18:	2302      	movs	r3, #2
 8002e1a:	e15f      	b.n	80030dc <HAL_SPI_Transmit+0x2e2>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e24:	f7fd fff8 	bl	8000e18 <HAL_GetTick>
 8002e28:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002e2a:	88fb      	ldrh	r3, [r7, #6]
 8002e2c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d002      	beq.n	8002e40 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e3e:	e148      	b.n	80030d2 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d002      	beq.n	8002e4c <HAL_SPI_Transmit+0x52>
 8002e46:	88fb      	ldrh	r3, [r7, #6]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d102      	bne.n	8002e52 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e50:	e13f      	b.n	80030d2 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2203      	movs	r2, #3
 8002e56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	68ba      	ldr	r2, [r7, #8]
 8002e64:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	88fa      	ldrh	r2, [r7, #6]
 8002e6a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	88fa      	ldrh	r2, [r7, #6]
 8002e70:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e9c:	d10f      	bne.n	8002ebe <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ebc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec8:	2b40      	cmp	r3, #64	; 0x40
 8002eca:	d007      	beq.n	8002edc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eda:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ee4:	d94f      	bls.n	8002f86 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d002      	beq.n	8002ef4 <HAL_SPI_Transmit+0xfa>
 8002eee:	8afb      	ldrh	r3, [r7, #22]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d142      	bne.n	8002f7a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef8:	881a      	ldrh	r2, [r3, #0]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f04:	1c9a      	adds	r2, r3, #2
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	3b01      	subs	r3, #1
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002f18:	e02f      	b.n	8002f7a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d112      	bne.n	8002f4e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2c:	881a      	ldrh	r2, [r3, #0]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f38:	1c9a      	adds	r2, r3, #2
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	3b01      	subs	r3, #1
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f4c:	e015      	b.n	8002f7a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f4e:	f7fd ff63 	bl	8000e18 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d803      	bhi.n	8002f66 <HAL_SPI_Transmit+0x16c>
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f64:	d102      	bne.n	8002f6c <HAL_SPI_Transmit+0x172>
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d106      	bne.n	8002f7a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002f78:	e0ab      	b.n	80030d2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1ca      	bne.n	8002f1a <HAL_SPI_Transmit+0x120>
 8002f84:	e080      	b.n	8003088 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d002      	beq.n	8002f94 <HAL_SPI_Transmit+0x19a>
 8002f8e:	8afb      	ldrh	r3, [r7, #22]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d174      	bne.n	800307e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d912      	bls.n	8002fc4 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa2:	881a      	ldrh	r2, [r3, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fae:	1c9a      	adds	r2, r3, #2
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	3b02      	subs	r3, #2
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fc2:	e05c      	b.n	800307e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	330c      	adds	r3, #12
 8002fce:	7812      	ldrb	r2, [r2, #0]
 8002fd0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd6:	1c5a      	adds	r2, r3, #1
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002fea:	e048      	b.n	800307e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d12b      	bne.n	8003052 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	2b01      	cmp	r3, #1
 8003002:	d912      	bls.n	800302a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003008:	881a      	ldrh	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003014:	1c9a      	adds	r2, r3, #2
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800301e:	b29b      	uxth	r3, r3
 8003020:	3b02      	subs	r3, #2
 8003022:	b29a      	uxth	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003028:	e029      	b.n	800307e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	330c      	adds	r3, #12
 8003034:	7812      	ldrb	r2, [r2, #0]
 8003036:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303c:	1c5a      	adds	r2, r3, #1
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003046:	b29b      	uxth	r3, r3
 8003048:	3b01      	subs	r3, #1
 800304a:	b29a      	uxth	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003050:	e015      	b.n	800307e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003052:	f7fd fee1 	bl	8000e18 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	429a      	cmp	r2, r3
 8003060:	d803      	bhi.n	800306a <HAL_SPI_Transmit+0x270>
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003068:	d102      	bne.n	8003070 <HAL_SPI_Transmit+0x276>
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d106      	bne.n	800307e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800307c:	e029      	b.n	80030d2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003082:	b29b      	uxth	r3, r3
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1b1      	bne.n	8002fec <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	6839      	ldr	r1, [r7, #0]
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	f000 fcf9 	bl	8003a84 <SPI_EndRxTxTransaction>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d002      	beq.n	800309e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2220      	movs	r2, #32
 800309c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10a      	bne.n	80030bc <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030a6:	2300      	movs	r3, #0
 80030a8:	613b      	str	r3, [r7, #16]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	613b      	str	r3, [r7, #16]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	613b      	str	r3, [r7, #16]
 80030ba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d002      	beq.n	80030ca <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	77fb      	strb	r3, [r7, #31]
 80030c8:	e003      	b.n	80030d2 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80030da:	7ffb      	ldrb	r3, [r7, #31]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3720      	adds	r7, #32
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b088      	sub	sp, #32
 80030e8:	af02      	add	r7, sp, #8
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	603b      	str	r3, [r7, #0]
 80030f0:	4613      	mov	r3, r2
 80030f2:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80030f4:	2300      	movs	r3, #0
 80030f6:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	2b01      	cmp	r3, #1
 8003102:	d002      	beq.n	800310a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003104:	2302      	movs	r3, #2
 8003106:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003108:	e11a      	b.n	8003340 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003112:	d112      	bne.n	800313a <HAL_SPI_Receive+0x56>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d10e      	bne.n	800313a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2204      	movs	r2, #4
 8003120:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003124:	88fa      	ldrh	r2, [r7, #6]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	9300      	str	r3, [sp, #0]
 800312a:	4613      	mov	r3, r2
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	68b9      	ldr	r1, [r7, #8]
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f000 f90e 	bl	8003352 <HAL_SPI_TransmitReceive>
 8003136:	4603      	mov	r3, r0
 8003138:	e107      	b.n	800334a <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003140:	2b01      	cmp	r3, #1
 8003142:	d101      	bne.n	8003148 <HAL_SPI_Receive+0x64>
 8003144:	2302      	movs	r3, #2
 8003146:	e100      	b.n	800334a <HAL_SPI_Receive+0x266>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003150:	f7fd fe62 	bl	8000e18 <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d002      	beq.n	8003162 <HAL_SPI_Receive+0x7e>
 800315c:	88fb      	ldrh	r3, [r7, #6]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d102      	bne.n	8003168 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003166:	e0eb      	b.n	8003340 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2204      	movs	r2, #4
 800316c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	68ba      	ldr	r2, [r7, #8]
 800317a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	88fa      	ldrh	r2, [r7, #6]
 8003180:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	88fa      	ldrh	r2, [r7, #6]
 8003188:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80031b2:	d908      	bls.n	80031c6 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80031c2:	605a      	str	r2, [r3, #4]
 80031c4:	e007      	b.n	80031d6 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	685a      	ldr	r2, [r3, #4]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80031d4:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031de:	d10f      	bne.n	8003200 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031ee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80031fe:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800320a:	2b40      	cmp	r3, #64	; 0x40
 800320c:	d007      	beq.n	800321e <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800321c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003226:	d86f      	bhi.n	8003308 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003228:	e034      	b.n	8003294 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	2b01      	cmp	r3, #1
 8003236:	d117      	bne.n	8003268 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f103 020c 	add.w	r2, r3, #12
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003244:	7812      	ldrb	r2, [r2, #0]
 8003246:	b2d2      	uxtb	r2, r2
 8003248:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	1c5a      	adds	r2, r3, #1
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800325a:	b29b      	uxth	r3, r3
 800325c:	3b01      	subs	r3, #1
 800325e:	b29a      	uxth	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003266:	e015      	b.n	8003294 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003268:	f7fd fdd6 	bl	8000e18 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	429a      	cmp	r2, r3
 8003276:	d803      	bhi.n	8003280 <HAL_SPI_Receive+0x19c>
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800327e:	d102      	bne.n	8003286 <HAL_SPI_Receive+0x1a2>
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d106      	bne.n	8003294 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2201      	movs	r2, #1
 800328e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003292:	e055      	b.n	8003340 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800329a:	b29b      	uxth	r3, r3
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1c4      	bne.n	800322a <HAL_SPI_Receive+0x146>
 80032a0:	e038      	b.n	8003314 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d115      	bne.n	80032dc <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68da      	ldr	r2, [r3, #12]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	b292      	uxth	r2, r2
 80032bc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	1c9a      	adds	r2, r3, #2
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	3b01      	subs	r3, #1
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80032da:	e015      	b.n	8003308 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032dc:	f7fd fd9c 	bl	8000e18 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	683a      	ldr	r2, [r7, #0]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d803      	bhi.n	80032f4 <HAL_SPI_Receive+0x210>
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f2:	d102      	bne.n	80032fa <HAL_SPI_Receive+0x216>
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d106      	bne.n	8003308 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2201      	movs	r2, #1
 8003302:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003306:	e01b      	b.n	8003340 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800330e:	b29b      	uxth	r3, r3
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1c6      	bne.n	80032a2 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	6839      	ldr	r1, [r7, #0]
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 fb5b 	bl	80039d4 <SPI_EndRxTransaction>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d002      	beq.n	800332a <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2220      	movs	r2, #32
 8003328:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800332e:	2b00      	cmp	r3, #0
 8003330:	d002      	beq.n	8003338 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	75fb      	strb	r3, [r7, #23]
 8003336:	e003      	b.n	8003340 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003348:	7dfb      	ldrb	r3, [r7, #23]
}
 800334a:	4618      	mov	r0, r3
 800334c:	3718      	adds	r7, #24
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b08a      	sub	sp, #40	; 0x28
 8003356:	af00      	add	r7, sp, #0
 8003358:	60f8      	str	r0, [r7, #12]
 800335a:	60b9      	str	r1, [r7, #8]
 800335c:	607a      	str	r2, [r7, #4]
 800335e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003360:	2301      	movs	r3, #1
 8003362:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003364:	2300      	movs	r3, #0
 8003366:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003370:	2b01      	cmp	r3, #1
 8003372:	d101      	bne.n	8003378 <HAL_SPI_TransmitReceive+0x26>
 8003374:	2302      	movs	r3, #2
 8003376:	e20a      	b.n	800378e <HAL_SPI_TransmitReceive+0x43c>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003380:	f7fd fd4a 	bl	8000e18 <HAL_GetTick>
 8003384:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800338c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003394:	887b      	ldrh	r3, [r7, #2]
 8003396:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003398:	887b      	ldrh	r3, [r7, #2]
 800339a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800339c:	7efb      	ldrb	r3, [r7, #27]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d00e      	beq.n	80033c0 <HAL_SPI_TransmitReceive+0x6e>
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033a8:	d106      	bne.n	80033b8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d102      	bne.n	80033b8 <HAL_SPI_TransmitReceive+0x66>
 80033b2:	7efb      	ldrb	r3, [r7, #27]
 80033b4:	2b04      	cmp	r3, #4
 80033b6:	d003      	beq.n	80033c0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80033b8:	2302      	movs	r3, #2
 80033ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80033be:	e1e0      	b.n	8003782 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d005      	beq.n	80033d2 <HAL_SPI_TransmitReceive+0x80>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d002      	beq.n	80033d2 <HAL_SPI_TransmitReceive+0x80>
 80033cc:	887b      	ldrh	r3, [r7, #2]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d103      	bne.n	80033da <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80033d8:	e1d3      	b.n	8003782 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b04      	cmp	r3, #4
 80033e4:	d003      	beq.n	80033ee <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2205      	movs	r2, #5
 80033ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	887a      	ldrh	r2, [r7, #2]
 80033fe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	887a      	ldrh	r2, [r7, #2]
 8003406:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	68ba      	ldr	r2, [r7, #8]
 800340e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	887a      	ldrh	r2, [r7, #2]
 8003414:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	887a      	ldrh	r2, [r7, #2]
 800341a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003430:	d802      	bhi.n	8003438 <HAL_SPI_TransmitReceive+0xe6>
 8003432:	8a3b      	ldrh	r3, [r7, #16]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d908      	bls.n	800344a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	685a      	ldr	r2, [r3, #4]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003446:	605a      	str	r2, [r3, #4]
 8003448:	e007      	b.n	800345a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003458:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003464:	2b40      	cmp	r3, #64	; 0x40
 8003466:	d007      	beq.n	8003478 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003476:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003480:	f240 8081 	bls.w	8003586 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d002      	beq.n	8003492 <HAL_SPI_TransmitReceive+0x140>
 800348c:	8a7b      	ldrh	r3, [r7, #18]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d16d      	bne.n	800356e <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003496:	881a      	ldrh	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a2:	1c9a      	adds	r2, r3, #2
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	3b01      	subs	r3, #1
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034b6:	e05a      	b.n	800356e <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d11b      	bne.n	80034fe <HAL_SPI_TransmitReceive+0x1ac>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d016      	beq.n	80034fe <HAL_SPI_TransmitReceive+0x1ac>
 80034d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d113      	bne.n	80034fe <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034da:	881a      	ldrh	r2, [r3, #0]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e6:	1c9a      	adds	r2, r3, #2
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	3b01      	subs	r3, #1
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80034fa:	2300      	movs	r3, #0
 80034fc:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f003 0301 	and.w	r3, r3, #1
 8003508:	2b01      	cmp	r3, #1
 800350a:	d11c      	bne.n	8003546 <HAL_SPI_TransmitReceive+0x1f4>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003512:	b29b      	uxth	r3, r3
 8003514:	2b00      	cmp	r3, #0
 8003516:	d016      	beq.n	8003546 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68da      	ldr	r2, [r3, #12]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003522:	b292      	uxth	r2, r2
 8003524:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	1c9a      	adds	r2, r3, #2
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003536:	b29b      	uxth	r3, r3
 8003538:	3b01      	subs	r3, #1
 800353a:	b29a      	uxth	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003542:	2301      	movs	r3, #1
 8003544:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003546:	f7fd fc67 	bl	8000e18 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003552:	429a      	cmp	r2, r3
 8003554:	d80b      	bhi.n	800356e <HAL_SPI_TransmitReceive+0x21c>
 8003556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800355c:	d007      	beq.n	800356e <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800356c:	e109      	b.n	8003782 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003572:	b29b      	uxth	r3, r3
 8003574:	2b00      	cmp	r3, #0
 8003576:	d19f      	bne.n	80034b8 <HAL_SPI_TransmitReceive+0x166>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800357e:	b29b      	uxth	r3, r3
 8003580:	2b00      	cmp	r3, #0
 8003582:	d199      	bne.n	80034b8 <HAL_SPI_TransmitReceive+0x166>
 8003584:	e0e3      	b.n	800374e <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <HAL_SPI_TransmitReceive+0x244>
 800358e:	8a7b      	ldrh	r3, [r7, #18]
 8003590:	2b01      	cmp	r3, #1
 8003592:	f040 80cf 	bne.w	8003734 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800359a:	b29b      	uxth	r3, r3
 800359c:	2b01      	cmp	r3, #1
 800359e:	d912      	bls.n	80035c6 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a4:	881a      	ldrh	r2, [r3, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b0:	1c9a      	adds	r2, r3, #2
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	3b02      	subs	r3, #2
 80035be:	b29a      	uxth	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80035c4:	e0b6      	b.n	8003734 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	330c      	adds	r3, #12
 80035d0:	7812      	ldrb	r2, [r2, #0]
 80035d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d8:	1c5a      	adds	r2, r3, #1
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	3b01      	subs	r3, #1
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035ec:	e0a2      	b.n	8003734 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d134      	bne.n	8003666 <HAL_SPI_TransmitReceive+0x314>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003600:	b29b      	uxth	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d02f      	beq.n	8003666 <HAL_SPI_TransmitReceive+0x314>
 8003606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003608:	2b01      	cmp	r3, #1
 800360a:	d12c      	bne.n	8003666 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003610:	b29b      	uxth	r3, r3
 8003612:	2b01      	cmp	r3, #1
 8003614:	d912      	bls.n	800363c <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361a:	881a      	ldrh	r2, [r3, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003626:	1c9a      	adds	r2, r3, #2
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003630:	b29b      	uxth	r3, r3
 8003632:	3b02      	subs	r3, #2
 8003634:	b29a      	uxth	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	87da      	strh	r2, [r3, #62]	; 0x3e
 800363a:	e012      	b.n	8003662 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	330c      	adds	r3, #12
 8003646:	7812      	ldrb	r2, [r2, #0]
 8003648:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364e:	1c5a      	adds	r2, r3, #1
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003658:	b29b      	uxth	r3, r3
 800365a:	3b01      	subs	r3, #1
 800365c:	b29a      	uxth	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003662:	2300      	movs	r3, #0
 8003664:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	2b01      	cmp	r3, #1
 8003672:	d148      	bne.n	8003706 <HAL_SPI_TransmitReceive+0x3b4>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800367a:	b29b      	uxth	r3, r3
 800367c:	2b00      	cmp	r3, #0
 800367e:	d042      	beq.n	8003706 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003686:	b29b      	uxth	r3, r3
 8003688:	2b01      	cmp	r3, #1
 800368a:	d923      	bls.n	80036d4 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68da      	ldr	r2, [r3, #12]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	b292      	uxth	r2, r2
 8003698:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369e:	1c9a      	adds	r2, r3, #2
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	3b02      	subs	r3, #2
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80036bc:	b29b      	uxth	r3, r3
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d81f      	bhi.n	8003702 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	685a      	ldr	r2, [r3, #4]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80036d0:	605a      	str	r2, [r3, #4]
 80036d2:	e016      	b.n	8003702 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f103 020c 	add.w	r2, r3, #12
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e0:	7812      	ldrb	r2, [r2, #0]
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ea:	1c5a      	adds	r2, r3, #1
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	3b01      	subs	r3, #1
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003702:	2301      	movs	r3, #1
 8003704:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003706:	f7fd fb87 	bl	8000e18 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003712:	429a      	cmp	r2, r3
 8003714:	d803      	bhi.n	800371e <HAL_SPI_TransmitReceive+0x3cc>
 8003716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800371c:	d102      	bne.n	8003724 <HAL_SPI_TransmitReceive+0x3d2>
 800371e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003720:	2b00      	cmp	r3, #0
 8003722:	d107      	bne.n	8003734 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8003732:	e026      	b.n	8003782 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003738:	b29b      	uxth	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	f47f af57 	bne.w	80035ee <HAL_SPI_TransmitReceive+0x29c>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003746:	b29b      	uxth	r3, r3
 8003748:	2b00      	cmp	r3, #0
 800374a:	f47f af50 	bne.w	80035ee <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800374e:	69fa      	ldr	r2, [r7, #28]
 8003750:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f000 f996 	bl	8003a84 <SPI_EndRxTxTransaction>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d005      	beq.n	800376a <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2220      	movs	r2, #32
 8003768:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800376e:	2b00      	cmp	r3, #0
 8003770:	d003      	beq.n	800377a <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003778:	e003      	b.n	8003782 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800378a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800378e:	4618      	mov	r0, r3
 8003790:	3728      	adds	r7, #40	; 0x28
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
	...

08003798 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b088      	sub	sp, #32
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	603b      	str	r3, [r7, #0]
 80037a4:	4613      	mov	r3, r2
 80037a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80037a8:	f7fd fb36 	bl	8000e18 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b0:	1a9b      	subs	r3, r3, r2
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	4413      	add	r3, r2
 80037b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80037b8:	f7fd fb2e 	bl	8000e18 <HAL_GetTick>
 80037bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80037be:	4b39      	ldr	r3, [pc, #228]	; (80038a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	015b      	lsls	r3, r3, #5
 80037c4:	0d1b      	lsrs	r3, r3, #20
 80037c6:	69fa      	ldr	r2, [r7, #28]
 80037c8:	fb02 f303 	mul.w	r3, r2, r3
 80037cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037ce:	e054      	b.n	800387a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d6:	d050      	beq.n	800387a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80037d8:	f7fd fb1e 	bl	8000e18 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	69fa      	ldr	r2, [r7, #28]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d902      	bls.n	80037ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d13d      	bne.n	800386a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80037fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003806:	d111      	bne.n	800382c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003810:	d004      	beq.n	800381c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800381a:	d107      	bne.n	800382c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800382a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003830:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003834:	d10f      	bne.n	8003856 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003854:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e017      	b.n	800389a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d101      	bne.n	8003874 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003870:	2300      	movs	r3, #0
 8003872:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	3b01      	subs	r3, #1
 8003878:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	689a      	ldr	r2, [r3, #8]
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	4013      	ands	r3, r2
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	429a      	cmp	r2, r3
 8003888:	bf0c      	ite	eq
 800388a:	2301      	moveq	r3, #1
 800388c:	2300      	movne	r3, #0
 800388e:	b2db      	uxtb	r3, r3
 8003890:	461a      	mov	r2, r3
 8003892:	79fb      	ldrb	r3, [r7, #7]
 8003894:	429a      	cmp	r2, r3
 8003896:	d19b      	bne.n	80037d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3720      	adds	r7, #32
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	20000018 	.word	0x20000018

080038a8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b08a      	sub	sp, #40	; 0x28
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
 80038b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80038b6:	2300      	movs	r3, #0
 80038b8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80038ba:	f7fd faad 	bl	8000e18 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c2:	1a9b      	subs	r3, r3, r2
 80038c4:	683a      	ldr	r2, [r7, #0]
 80038c6:	4413      	add	r3, r2
 80038c8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80038ca:	f7fd faa5 	bl	8000e18 <HAL_GetTick>
 80038ce:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	330c      	adds	r3, #12
 80038d6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80038d8:	4b3d      	ldr	r3, [pc, #244]	; (80039d0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	4613      	mov	r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	4413      	add	r3, r2
 80038e2:	00da      	lsls	r2, r3, #3
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	0d1b      	lsrs	r3, r3, #20
 80038e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ea:	fb02 f303 	mul.w	r3, r2, r3
 80038ee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80038f0:	e060      	b.n	80039b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80038f8:	d107      	bne.n	800390a <SPI_WaitFifoStateUntilTimeout+0x62>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d104      	bne.n	800390a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	b2db      	uxtb	r3, r3
 8003906:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003908:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003910:	d050      	beq.n	80039b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003912:	f7fd fa81 	bl	8000e18 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	6a3b      	ldr	r3, [r7, #32]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800391e:	429a      	cmp	r2, r3
 8003920:	d902      	bls.n	8003928 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003924:	2b00      	cmp	r3, #0
 8003926:	d13d      	bne.n	80039a4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	685a      	ldr	r2, [r3, #4]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003936:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003940:	d111      	bne.n	8003966 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800394a:	d004      	beq.n	8003956 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003954:	d107      	bne.n	8003966 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003964:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800396e:	d10f      	bne.n	8003990 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800398e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e010      	b.n	80039c6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80039aa:	2300      	movs	r3, #0
 80039ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	3b01      	subs	r3, #1
 80039b2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	689a      	ldr	r2, [r3, #8]
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	4013      	ands	r3, r2
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d196      	bne.n	80038f2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3728      	adds	r7, #40	; 0x28
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	20000018 	.word	0x20000018

080039d4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af02      	add	r7, sp, #8
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039e8:	d111      	bne.n	8003a0e <SPI_EndRxTransaction+0x3a>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039f2:	d004      	beq.n	80039fe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039fc:	d107      	bne.n	8003a0e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a0c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	2200      	movs	r2, #0
 8003a16:	2180      	movs	r1, #128	; 0x80
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f7ff febd 	bl	8003798 <SPI_WaitFlagStateUntilTimeout>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d007      	beq.n	8003a34 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a28:	f043 0220 	orr.w	r2, r3, #32
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e023      	b.n	8003a7c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a3c:	d11d      	bne.n	8003a7a <SPI_EndRxTransaction+0xa6>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a46:	d004      	beq.n	8003a52 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a50:	d113      	bne.n	8003a7a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	9300      	str	r3, [sp, #0]
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f7ff ff22 	bl	80038a8 <SPI_WaitFifoStateUntilTimeout>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d007      	beq.n	8003a7a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a6e:	f043 0220 	orr.w	r2, r3, #32
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e000      	b.n	8003a7c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b086      	sub	sp, #24
 8003a88:	af02      	add	r7, sp, #8
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	9300      	str	r3, [sp, #0]
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003a9c:	68f8      	ldr	r0, [r7, #12]
 8003a9e:	f7ff ff03 	bl	80038a8 <SPI_WaitFifoStateUntilTimeout>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d007      	beq.n	8003ab8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aac:	f043 0220 	orr.w	r2, r3, #32
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e027      	b.n	8003b08 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	2180      	movs	r1, #128	; 0x80
 8003ac2:	68f8      	ldr	r0, [r7, #12]
 8003ac4:	f7ff fe68 	bl	8003798 <SPI_WaitFlagStateUntilTimeout>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d007      	beq.n	8003ade <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ad2:	f043 0220 	orr.w	r2, r3, #32
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e014      	b.n	8003b08 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	9300      	str	r3, [sp, #0]
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f7ff fedc 	bl	80038a8 <SPI_WaitFifoStateUntilTimeout>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d007      	beq.n	8003b06 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003afa:	f043 0220 	orr.w	r2, r3, #32
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e000      	b.n	8003b08 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e040      	b.n	8003ba4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d106      	bne.n	8003b38 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f7fc ffd4 	bl	8000ae0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2224      	movs	r2, #36	; 0x24
 8003b3c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f022 0201 	bic.w	r2, r2, #1
 8003b4c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 fbbc 	bl	80042cc <UART_SetConfig>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d101      	bne.n	8003b5e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e022      	b.n	8003ba4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d002      	beq.n	8003b6c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 fce6 	bl	8004538 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	689a      	ldr	r2, [r3, #8]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f042 0201 	orr.w	r2, r2, #1
 8003b9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f000 fd6d 	bl	800467c <UART_CheckIdleState>
 8003ba2:	4603      	mov	r3, r0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3708      	adds	r7, #8
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b08a      	sub	sp, #40	; 0x28
 8003bb0:	af02      	add	r7, sp, #8
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	603b      	str	r3, [r7, #0]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bc0:	2b20      	cmp	r3, #32
 8003bc2:	d178      	bne.n	8003cb6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d002      	beq.n	8003bd0 <HAL_UART_Transmit+0x24>
 8003bca:	88fb      	ldrh	r3, [r7, #6]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d101      	bne.n	8003bd4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e071      	b.n	8003cb8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2221      	movs	r2, #33	; 0x21
 8003be0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003be2:	f7fd f919 	bl	8000e18 <HAL_GetTick>
 8003be6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	88fa      	ldrh	r2, [r7, #6]
 8003bec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	88fa      	ldrh	r2, [r7, #6]
 8003bf4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c00:	d108      	bne.n	8003c14 <HAL_UART_Transmit+0x68>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d104      	bne.n	8003c14 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	61bb      	str	r3, [r7, #24]
 8003c12:	e003      	b.n	8003c1c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c1c:	e030      	b.n	8003c80 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	9300      	str	r3, [sp, #0]
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	2200      	movs	r2, #0
 8003c26:	2180      	movs	r1, #128	; 0x80
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f000 fdcf 	bl	80047cc <UART_WaitOnFlagUntilTimeout>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d004      	beq.n	8003c3e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2220      	movs	r2, #32
 8003c38:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e03c      	b.n	8003cb8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d10b      	bne.n	8003c5c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	881a      	ldrh	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c50:	b292      	uxth	r2, r2
 8003c52:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	3302      	adds	r3, #2
 8003c58:	61bb      	str	r3, [r7, #24]
 8003c5a:	e008      	b.n	8003c6e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	781a      	ldrb	r2, [r3, #0]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	b292      	uxth	r2, r2
 8003c66:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	3b01      	subs	r3, #1
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1c8      	bne.n	8003c1e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	9300      	str	r3, [sp, #0]
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	2200      	movs	r2, #0
 8003c94:	2140      	movs	r1, #64	; 0x40
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f000 fd98 	bl	80047cc <UART_WaitOnFlagUntilTimeout>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d004      	beq.n	8003cac <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e005      	b.n	8003cb8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2220      	movs	r2, #32
 8003cb0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	e000      	b.n	8003cb8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003cb6:	2302      	movs	r3, #2
  }
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3720      	adds	r7, #32
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b0ba      	sub	sp, #232	; 0xe8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	69db      	ldr	r3, [r3, #28]
 8003cce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003ce6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003cea:	f640 030f 	movw	r3, #2063	; 0x80f
 8003cee:	4013      	ands	r3, r2
 8003cf0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003cf4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d115      	bne.n	8003d28 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003cfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d00:	f003 0320 	and.w	r3, r3, #32
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00f      	beq.n	8003d28 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d0c:	f003 0320 	and.w	r3, r3, #32
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d009      	beq.n	8003d28 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f000 82ab 	beq.w	8004274 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	4798      	blx	r3
      }
      return;
 8003d26:	e2a5      	b.n	8004274 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003d28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 8117 	beq.w	8003f60 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003d32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d106      	bne.n	8003d4c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003d3e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003d42:	4b85      	ldr	r3, [pc, #532]	; (8003f58 <HAL_UART_IRQHandler+0x298>)
 8003d44:	4013      	ands	r3, r2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f000 810a 	beq.w	8003f60 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003d4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d50:	f003 0301 	and.w	r3, r3, #1
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d011      	beq.n	8003d7c <HAL_UART_IRQHandler+0xbc>
 8003d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00b      	beq.n	8003d7c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d72:	f043 0201 	orr.w	r2, r3, #1
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d011      	beq.n	8003dac <HAL_UART_IRQHandler+0xec>
 8003d88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d8c:	f003 0301 	and.w	r3, r3, #1
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00b      	beq.n	8003dac <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2202      	movs	r2, #2
 8003d9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003da2:	f043 0204 	orr.w	r2, r3, #4
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003dac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003db0:	f003 0304 	and.w	r3, r3, #4
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d011      	beq.n	8003ddc <HAL_UART_IRQHandler+0x11c>
 8003db8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00b      	beq.n	8003ddc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2204      	movs	r2, #4
 8003dca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dd2:	f043 0202 	orr.w	r2, r3, #2
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003ddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003de0:	f003 0308 	and.w	r3, r3, #8
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d017      	beq.n	8003e18 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dec:	f003 0320 	and.w	r3, r3, #32
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d105      	bne.n	8003e00 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003df4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003df8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00b      	beq.n	8003e18 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2208      	movs	r2, #8
 8003e06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e0e:	f043 0208 	orr.w	r2, r3, #8
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003e18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d012      	beq.n	8003e4a <HAL_UART_IRQHandler+0x18a>
 8003e24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00c      	beq.n	8003e4a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e40:	f043 0220 	orr.w	r2, r3, #32
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f000 8211 	beq.w	8004278 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e5a:	f003 0320 	and.w	r3, r3, #32
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00d      	beq.n	8003e7e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003e62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e66:	f003 0320 	and.w	r3, r3, #32
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d007      	beq.n	8003e7e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d003      	beq.n	8003e7e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e92:	2b40      	cmp	r3, #64	; 0x40
 8003e94:	d005      	beq.n	8003ea2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003e96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e9a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d04f      	beq.n	8003f42 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 fcf9 	bl	800489a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb2:	2b40      	cmp	r3, #64	; 0x40
 8003eb4:	d141      	bne.n	8003f3a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	3308      	adds	r3, #8
 8003ebc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ec4:	e853 3f00 	ldrex	r3, [r3]
 8003ec8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003ecc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ed0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ed4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	3308      	adds	r3, #8
 8003ede:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003ee2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003ee6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003eee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003ef2:	e841 2300 	strex	r3, r2, [r1]
 8003ef6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003efa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1d9      	bne.n	8003eb6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d013      	beq.n	8003f32 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f0e:	4a13      	ldr	r2, [pc, #76]	; (8003f5c <HAL_UART_IRQHandler+0x29c>)
 8003f10:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7fd f8f8 	bl	800110c <HAL_DMA_Abort_IT>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d017      	beq.n	8003f52 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003f2c:	4610      	mov	r0, r2
 8003f2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f30:	e00f      	b.n	8003f52 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 f9b4 	bl	80042a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f38:	e00b      	b.n	8003f52 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 f9b0 	bl	80042a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f40:	e007      	b.n	8003f52 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 f9ac 	bl	80042a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003f50:	e192      	b.n	8004278 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f52:	bf00      	nop
    return;
 8003f54:	e190      	b.n	8004278 <HAL_UART_IRQHandler+0x5b8>
 8003f56:	bf00      	nop
 8003f58:	04000120 	.word	0x04000120
 8003f5c:	08004963 	.word	0x08004963

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	f040 814b 	bne.w	8004200 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f6e:	f003 0310 	and.w	r3, r3, #16
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f000 8144 	beq.w	8004200 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003f78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f7c:	f003 0310 	and.w	r3, r3, #16
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f000 813d 	beq.w	8004200 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2210      	movs	r2, #16
 8003f8c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f98:	2b40      	cmp	r3, #64	; 0x40
 8003f9a:	f040 80b5 	bne.w	8004108 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003faa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f000 8164 	beq.w	800427c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003fba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	f080 815c 	bcs.w	800427c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003fca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	2b20      	cmp	r3, #32
 8003fd6:	f000 8086 	beq.w	80040e6 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003fe6:	e853 3f00 	ldrex	r3, [r3]
 8003fea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003fee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ff2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ff6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	461a      	mov	r2, r3
 8004000:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004004:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004008:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004010:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004014:	e841 2300 	strex	r3, r2, [r1]
 8004018:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800401c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004020:	2b00      	cmp	r3, #0
 8004022:	d1da      	bne.n	8003fda <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	3308      	adds	r3, #8
 800402a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800402e:	e853 3f00 	ldrex	r3, [r3]
 8004032:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004034:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004036:	f023 0301 	bic.w	r3, r3, #1
 800403a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	3308      	adds	r3, #8
 8004044:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004048:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800404c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004050:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004054:	e841 2300 	strex	r3, r2, [r1]
 8004058:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800405a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1e1      	bne.n	8004024 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	3308      	adds	r3, #8
 8004066:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004068:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800406a:	e853 3f00 	ldrex	r3, [r3]
 800406e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004070:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004072:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004076:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	3308      	adds	r3, #8
 8004080:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004084:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004086:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004088:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800408a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800408c:	e841 2300 	strex	r3, r2, [r1]
 8004090:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004092:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1e3      	bne.n	8004060 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2220      	movs	r2, #32
 800409c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040ae:	e853 3f00 	ldrex	r3, [r3]
 80040b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80040b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040b6:	f023 0310 	bic.w	r3, r3, #16
 80040ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	461a      	mov	r2, r3
 80040c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80040c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80040ca:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80040ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80040d0:	e841 2300 	strex	r3, r2, [r1]
 80040d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80040d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1e4      	bne.n	80040a6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7fc ffda 	bl	800109a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2202      	movs	r2, #2
 80040ea:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	4619      	mov	r1, r3
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 f8d7 	bl	80042b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004106:	e0b9      	b.n	800427c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004114:	b29b      	uxth	r3, r3
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004122:	b29b      	uxth	r3, r3
 8004124:	2b00      	cmp	r3, #0
 8004126:	f000 80ab 	beq.w	8004280 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800412a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800412e:	2b00      	cmp	r3, #0
 8004130:	f000 80a6 	beq.w	8004280 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800413c:	e853 3f00 	ldrex	r3, [r3]
 8004140:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004144:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004148:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	461a      	mov	r2, r3
 8004152:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004156:	647b      	str	r3, [r7, #68]	; 0x44
 8004158:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800415c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800415e:	e841 2300 	strex	r3, r2, [r1]
 8004162:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1e4      	bne.n	8004134 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	3308      	adds	r3, #8
 8004170:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004174:	e853 3f00 	ldrex	r3, [r3]
 8004178:	623b      	str	r3, [r7, #32]
   return(result);
 800417a:	6a3b      	ldr	r3, [r7, #32]
 800417c:	f023 0301 	bic.w	r3, r3, #1
 8004180:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	3308      	adds	r3, #8
 800418a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800418e:	633a      	str	r2, [r7, #48]	; 0x30
 8004190:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004192:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004194:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004196:	e841 2300 	strex	r3, r2, [r1]
 800419a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800419c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1e3      	bne.n	800416a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2220      	movs	r2, #32
 80041a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	e853 3f00 	ldrex	r3, [r3]
 80041c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f023 0310 	bic.w	r3, r3, #16
 80041ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	461a      	mov	r2, r3
 80041d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80041d8:	61fb      	str	r3, [r7, #28]
 80041da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041dc:	69b9      	ldr	r1, [r7, #24]
 80041de:	69fa      	ldr	r2, [r7, #28]
 80041e0:	e841 2300 	strex	r3, r2, [r1]
 80041e4:	617b      	str	r3, [r7, #20]
   return(result);
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1e4      	bne.n	80041b6 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2202      	movs	r2, #2
 80041f0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80041f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80041f6:	4619      	mov	r1, r3
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 f85b 	bl	80042b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80041fe:	e03f      	b.n	8004280 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004204:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00e      	beq.n	800422a <HAL_UART_IRQHandler+0x56a>
 800420c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004210:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d008      	beq.n	800422a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004220:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 fbdd 	bl	80049e2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004228:	e02d      	b.n	8004286 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800422a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800422e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00e      	beq.n	8004254 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004236:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800423a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800423e:	2b00      	cmp	r3, #0
 8004240:	d008      	beq.n	8004254 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004246:	2b00      	cmp	r3, #0
 8004248:	d01c      	beq.n	8004284 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	4798      	blx	r3
    }
    return;
 8004252:	e017      	b.n	8004284 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800425c:	2b00      	cmp	r3, #0
 800425e:	d012      	beq.n	8004286 <HAL_UART_IRQHandler+0x5c6>
 8004260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00c      	beq.n	8004286 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 fb8e 	bl	800498e <UART_EndTransmit_IT>
    return;
 8004272:	e008      	b.n	8004286 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004274:	bf00      	nop
 8004276:	e006      	b.n	8004286 <HAL_UART_IRQHandler+0x5c6>
    return;
 8004278:	bf00      	nop
 800427a:	e004      	b.n	8004286 <HAL_UART_IRQHandler+0x5c6>
      return;
 800427c:	bf00      	nop
 800427e:	e002      	b.n	8004286 <HAL_UART_IRQHandler+0x5c6>
      return;
 8004280:	bf00      	nop
 8004282:	e000      	b.n	8004286 <HAL_UART_IRQHandler+0x5c6>
    return;
 8004284:	bf00      	nop
  }

}
 8004286:	37e8      	adds	r7, #232	; 0xe8
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	460b      	mov	r3, r1
 80042be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b088      	sub	sp, #32
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80042d4:	2300      	movs	r3, #0
 80042d6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	689a      	ldr	r2, [r3, #8]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	431a      	orrs	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	431a      	orrs	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	69db      	ldr	r3, [r3, #28]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	4b8a      	ldr	r3, [pc, #552]	; (8004520 <UART_SetConfig+0x254>)
 80042f8:	4013      	ands	r3, r2
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	6812      	ldr	r2, [r2, #0]
 80042fe:	6979      	ldr	r1, [r7, #20]
 8004300:	430b      	orrs	r3, r1
 8004302:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	68da      	ldr	r2, [r3, #12]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	430a      	orrs	r2, r1
 8004318:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a1b      	ldr	r3, [r3, #32]
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	4313      	orrs	r3, r2
 8004328:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	697a      	ldr	r2, [r7, #20]
 800433a:	430a      	orrs	r2, r1
 800433c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a78      	ldr	r2, [pc, #480]	; (8004524 <UART_SetConfig+0x258>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d120      	bne.n	800438a <UART_SetConfig+0xbe>
 8004348:	4b77      	ldr	r3, [pc, #476]	; (8004528 <UART_SetConfig+0x25c>)
 800434a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434c:	f003 0303 	and.w	r3, r3, #3
 8004350:	2b03      	cmp	r3, #3
 8004352:	d817      	bhi.n	8004384 <UART_SetConfig+0xb8>
 8004354:	a201      	add	r2, pc, #4	; (adr r2, 800435c <UART_SetConfig+0x90>)
 8004356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800435a:	bf00      	nop
 800435c:	0800436d 	.word	0x0800436d
 8004360:	08004379 	.word	0x08004379
 8004364:	0800437f 	.word	0x0800437f
 8004368:	08004373 	.word	0x08004373
 800436c:	2300      	movs	r3, #0
 800436e:	77fb      	strb	r3, [r7, #31]
 8004370:	e01d      	b.n	80043ae <UART_SetConfig+0xe2>
 8004372:	2302      	movs	r3, #2
 8004374:	77fb      	strb	r3, [r7, #31]
 8004376:	e01a      	b.n	80043ae <UART_SetConfig+0xe2>
 8004378:	2304      	movs	r3, #4
 800437a:	77fb      	strb	r3, [r7, #31]
 800437c:	e017      	b.n	80043ae <UART_SetConfig+0xe2>
 800437e:	2308      	movs	r3, #8
 8004380:	77fb      	strb	r3, [r7, #31]
 8004382:	e014      	b.n	80043ae <UART_SetConfig+0xe2>
 8004384:	2310      	movs	r3, #16
 8004386:	77fb      	strb	r3, [r7, #31]
 8004388:	e011      	b.n	80043ae <UART_SetConfig+0xe2>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a67      	ldr	r2, [pc, #412]	; (800452c <UART_SetConfig+0x260>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d102      	bne.n	800439a <UART_SetConfig+0xce>
 8004394:	2300      	movs	r3, #0
 8004396:	77fb      	strb	r3, [r7, #31]
 8004398:	e009      	b.n	80043ae <UART_SetConfig+0xe2>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a64      	ldr	r2, [pc, #400]	; (8004530 <UART_SetConfig+0x264>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d102      	bne.n	80043aa <UART_SetConfig+0xde>
 80043a4:	2300      	movs	r3, #0
 80043a6:	77fb      	strb	r3, [r7, #31]
 80043a8:	e001      	b.n	80043ae <UART_SetConfig+0xe2>
 80043aa:	2310      	movs	r3, #16
 80043ac:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	69db      	ldr	r3, [r3, #28]
 80043b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043b6:	d15a      	bne.n	800446e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80043b8:	7ffb      	ldrb	r3, [r7, #31]
 80043ba:	2b08      	cmp	r3, #8
 80043bc:	d827      	bhi.n	800440e <UART_SetConfig+0x142>
 80043be:	a201      	add	r2, pc, #4	; (adr r2, 80043c4 <UART_SetConfig+0xf8>)
 80043c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c4:	080043e9 	.word	0x080043e9
 80043c8:	080043f1 	.word	0x080043f1
 80043cc:	080043f9 	.word	0x080043f9
 80043d0:	0800440f 	.word	0x0800440f
 80043d4:	080043ff 	.word	0x080043ff
 80043d8:	0800440f 	.word	0x0800440f
 80043dc:	0800440f 	.word	0x0800440f
 80043e0:	0800440f 	.word	0x0800440f
 80043e4:	08004407 	.word	0x08004407
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043e8:	f7fe fa94 	bl	8002914 <HAL_RCC_GetPCLK1Freq>
 80043ec:	61b8      	str	r0, [r7, #24]
        break;
 80043ee:	e013      	b.n	8004418 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043f0:	f7fe fab2 	bl	8002958 <HAL_RCC_GetPCLK2Freq>
 80043f4:	61b8      	str	r0, [r7, #24]
        break;
 80043f6:	e00f      	b.n	8004418 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043f8:	4b4e      	ldr	r3, [pc, #312]	; (8004534 <UART_SetConfig+0x268>)
 80043fa:	61bb      	str	r3, [r7, #24]
        break;
 80043fc:	e00c      	b.n	8004418 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043fe:	f7fe fa11 	bl	8002824 <HAL_RCC_GetSysClockFreq>
 8004402:	61b8      	str	r0, [r7, #24]
        break;
 8004404:	e008      	b.n	8004418 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004406:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800440a:	61bb      	str	r3, [r7, #24]
        break;
 800440c:	e004      	b.n	8004418 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800440e:	2300      	movs	r3, #0
 8004410:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	77bb      	strb	r3, [r7, #30]
        break;
 8004416:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d074      	beq.n	8004508 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	005a      	lsls	r2, r3, #1
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	085b      	lsrs	r3, r3, #1
 8004428:	441a      	add	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004432:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	2b0f      	cmp	r3, #15
 8004438:	d916      	bls.n	8004468 <UART_SetConfig+0x19c>
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004440:	d212      	bcs.n	8004468 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	b29b      	uxth	r3, r3
 8004446:	f023 030f 	bic.w	r3, r3, #15
 800444a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	085b      	lsrs	r3, r3, #1
 8004450:	b29b      	uxth	r3, r3
 8004452:	f003 0307 	and.w	r3, r3, #7
 8004456:	b29a      	uxth	r2, r3
 8004458:	89fb      	ldrh	r3, [r7, #14]
 800445a:	4313      	orrs	r3, r2
 800445c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	89fa      	ldrh	r2, [r7, #14]
 8004464:	60da      	str	r2, [r3, #12]
 8004466:	e04f      	b.n	8004508 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	77bb      	strb	r3, [r7, #30]
 800446c:	e04c      	b.n	8004508 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800446e:	7ffb      	ldrb	r3, [r7, #31]
 8004470:	2b08      	cmp	r3, #8
 8004472:	d828      	bhi.n	80044c6 <UART_SetConfig+0x1fa>
 8004474:	a201      	add	r2, pc, #4	; (adr r2, 800447c <UART_SetConfig+0x1b0>)
 8004476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800447a:	bf00      	nop
 800447c:	080044a1 	.word	0x080044a1
 8004480:	080044a9 	.word	0x080044a9
 8004484:	080044b1 	.word	0x080044b1
 8004488:	080044c7 	.word	0x080044c7
 800448c:	080044b7 	.word	0x080044b7
 8004490:	080044c7 	.word	0x080044c7
 8004494:	080044c7 	.word	0x080044c7
 8004498:	080044c7 	.word	0x080044c7
 800449c:	080044bf 	.word	0x080044bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044a0:	f7fe fa38 	bl	8002914 <HAL_RCC_GetPCLK1Freq>
 80044a4:	61b8      	str	r0, [r7, #24]
        break;
 80044a6:	e013      	b.n	80044d0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044a8:	f7fe fa56 	bl	8002958 <HAL_RCC_GetPCLK2Freq>
 80044ac:	61b8      	str	r0, [r7, #24]
        break;
 80044ae:	e00f      	b.n	80044d0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044b0:	4b20      	ldr	r3, [pc, #128]	; (8004534 <UART_SetConfig+0x268>)
 80044b2:	61bb      	str	r3, [r7, #24]
        break;
 80044b4:	e00c      	b.n	80044d0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044b6:	f7fe f9b5 	bl	8002824 <HAL_RCC_GetSysClockFreq>
 80044ba:	61b8      	str	r0, [r7, #24]
        break;
 80044bc:	e008      	b.n	80044d0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044c2:	61bb      	str	r3, [r7, #24]
        break;
 80044c4:	e004      	b.n	80044d0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80044c6:	2300      	movs	r3, #0
 80044c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	77bb      	strb	r3, [r7, #30]
        break;
 80044ce:	bf00      	nop
    }

    if (pclk != 0U)
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d018      	beq.n	8004508 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	085a      	lsrs	r2, r3, #1
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	441a      	add	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	2b0f      	cmp	r3, #15
 80044ee:	d909      	bls.n	8004504 <UART_SetConfig+0x238>
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044f6:	d205      	bcs.n	8004504 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	b29a      	uxth	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	60da      	str	r2, [r3, #12]
 8004502:	e001      	b.n	8004508 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004514:	7fbb      	ldrb	r3, [r7, #30]
}
 8004516:	4618      	mov	r0, r3
 8004518:	3720      	adds	r7, #32
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	efff69f3 	.word	0xefff69f3
 8004524:	40013800 	.word	0x40013800
 8004528:	40021000 	.word	0x40021000
 800452c:	40004400 	.word	0x40004400
 8004530:	40004800 	.word	0x40004800
 8004534:	007a1200 	.word	0x007a1200

08004538 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004544:	f003 0301 	and.w	r3, r3, #1
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00a      	beq.n	8004562 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	430a      	orrs	r2, r1
 8004560:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00a      	beq.n	8004584 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	430a      	orrs	r2, r1
 8004582:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004588:	f003 0304 	and.w	r3, r3, #4
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00a      	beq.n	80045a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	430a      	orrs	r2, r1
 80045a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045aa:	f003 0308 	and.w	r3, r3, #8
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00a      	beq.n	80045c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	430a      	orrs	r2, r1
 80045c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045cc:	f003 0310 	and.w	r3, r3, #16
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00a      	beq.n	80045ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	430a      	orrs	r2, r1
 80045e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ee:	f003 0320 	and.w	r3, r3, #32
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00a      	beq.n	800460c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	430a      	orrs	r2, r1
 800460a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004614:	2b00      	cmp	r3, #0
 8004616:	d01a      	beq.n	800464e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	430a      	orrs	r2, r1
 800462c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004632:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004636:	d10a      	bne.n	800464e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	430a      	orrs	r2, r1
 800464c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00a      	beq.n	8004670 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	430a      	orrs	r2, r1
 800466e:	605a      	str	r2, [r3, #4]
  }
}
 8004670:	bf00      	nop
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b098      	sub	sp, #96	; 0x60
 8004680:	af02      	add	r7, sp, #8
 8004682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800468c:	f7fc fbc4 	bl	8000e18 <HAL_GetTick>
 8004690:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0308 	and.w	r3, r3, #8
 800469c:	2b08      	cmp	r3, #8
 800469e:	d12e      	bne.n	80046fe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046a4:	9300      	str	r3, [sp, #0]
 80046a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046a8:	2200      	movs	r2, #0
 80046aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 f88c 	bl	80047cc <UART_WaitOnFlagUntilTimeout>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d021      	beq.n	80046fe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c2:	e853 3f00 	ldrex	r3, [r3]
 80046c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80046c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046ce:	653b      	str	r3, [r7, #80]	; 0x50
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	461a      	mov	r2, r3
 80046d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046d8:	647b      	str	r3, [r7, #68]	; 0x44
 80046da:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80046de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046e0:	e841 2300 	strex	r3, r2, [r1]
 80046e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80046e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1e6      	bne.n	80046ba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2220      	movs	r2, #32
 80046f0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e062      	b.n	80047c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0304 	and.w	r3, r3, #4
 8004708:	2b04      	cmp	r3, #4
 800470a:	d149      	bne.n	80047a0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800470c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004710:	9300      	str	r3, [sp, #0]
 8004712:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004714:	2200      	movs	r2, #0
 8004716:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f856 	bl	80047cc <UART_WaitOnFlagUntilTimeout>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d03c      	beq.n	80047a0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472e:	e853 3f00 	ldrex	r3, [r3]
 8004732:	623b      	str	r3, [r7, #32]
   return(result);
 8004734:	6a3b      	ldr	r3, [r7, #32]
 8004736:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800473a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	461a      	mov	r2, r3
 8004742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004744:	633b      	str	r3, [r7, #48]	; 0x30
 8004746:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004748:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800474a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800474c:	e841 2300 	strex	r3, r2, [r1]
 8004750:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004754:	2b00      	cmp	r3, #0
 8004756:	d1e6      	bne.n	8004726 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	3308      	adds	r3, #8
 800475e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	e853 3f00 	ldrex	r3, [r3]
 8004766:	60fb      	str	r3, [r7, #12]
   return(result);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f023 0301 	bic.w	r3, r3, #1
 800476e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	3308      	adds	r3, #8
 8004776:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004778:	61fa      	str	r2, [r7, #28]
 800477a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800477c:	69b9      	ldr	r1, [r7, #24]
 800477e:	69fa      	ldr	r2, [r7, #28]
 8004780:	e841 2300 	strex	r3, r2, [r1]
 8004784:	617b      	str	r3, [r7, #20]
   return(result);
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d1e5      	bne.n	8004758 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2220      	movs	r2, #32
 8004790:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e011      	b.n	80047c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2220      	movs	r2, #32
 80047a4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2220      	movs	r2, #32
 80047aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3758      	adds	r7, #88	; 0x58
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	603b      	str	r3, [r7, #0]
 80047d8:	4613      	mov	r3, r2
 80047da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047dc:	e049      	b.n	8004872 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e4:	d045      	beq.n	8004872 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047e6:	f7fc fb17 	bl	8000e18 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d302      	bcc.n	80047fc <UART_WaitOnFlagUntilTimeout+0x30>
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d101      	bne.n	8004800 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e048      	b.n	8004892 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0304 	and.w	r3, r3, #4
 800480a:	2b00      	cmp	r3, #0
 800480c:	d031      	beq.n	8004872 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	69db      	ldr	r3, [r3, #28]
 8004814:	f003 0308 	and.w	r3, r3, #8
 8004818:	2b08      	cmp	r3, #8
 800481a:	d110      	bne.n	800483e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2208      	movs	r2, #8
 8004822:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004824:	68f8      	ldr	r0, [r7, #12]
 8004826:	f000 f838 	bl	800489a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2208      	movs	r2, #8
 800482e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e029      	b.n	8004892 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	69db      	ldr	r3, [r3, #28]
 8004844:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004848:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800484c:	d111      	bne.n	8004872 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004856:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f000 f81e 	bl	800489a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2220      	movs	r2, #32
 8004862:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e00f      	b.n	8004892 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	69da      	ldr	r2, [r3, #28]
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	4013      	ands	r3, r2
 800487c:	68ba      	ldr	r2, [r7, #8]
 800487e:	429a      	cmp	r2, r3
 8004880:	bf0c      	ite	eq
 8004882:	2301      	moveq	r3, #1
 8004884:	2300      	movne	r3, #0
 8004886:	b2db      	uxtb	r3, r3
 8004888:	461a      	mov	r2, r3
 800488a:	79fb      	ldrb	r3, [r7, #7]
 800488c:	429a      	cmp	r2, r3
 800488e:	d0a6      	beq.n	80047de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3710      	adds	r7, #16
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}

0800489a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800489a:	b480      	push	{r7}
 800489c:	b095      	sub	sp, #84	; 0x54
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048aa:	e853 3f00 	ldrex	r3, [r3]
 80048ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	461a      	mov	r2, r3
 80048be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048c0:	643b      	str	r3, [r7, #64]	; 0x40
 80048c2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048c8:	e841 2300 	strex	r3, r2, [r1]
 80048cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d1e6      	bne.n	80048a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	3308      	adds	r3, #8
 80048da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048dc:	6a3b      	ldr	r3, [r7, #32]
 80048de:	e853 3f00 	ldrex	r3, [r3]
 80048e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	f023 0301 	bic.w	r3, r3, #1
 80048ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	3308      	adds	r3, #8
 80048f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048fc:	e841 2300 	strex	r3, r2, [r1]
 8004900:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1e5      	bne.n	80048d4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800490c:	2b01      	cmp	r3, #1
 800490e:	d118      	bne.n	8004942 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	e853 3f00 	ldrex	r3, [r3]
 800491c:	60bb      	str	r3, [r7, #8]
   return(result);
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	f023 0310 	bic.w	r3, r3, #16
 8004924:	647b      	str	r3, [r7, #68]	; 0x44
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	461a      	mov	r2, r3
 800492c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800492e:	61bb      	str	r3, [r7, #24]
 8004930:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004932:	6979      	ldr	r1, [r7, #20]
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	e841 2300 	strex	r3, r2, [r1]
 800493a:	613b      	str	r3, [r7, #16]
   return(result);
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1e6      	bne.n	8004910 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2220      	movs	r2, #32
 8004946:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004956:	bf00      	nop
 8004958:	3754      	adds	r7, #84	; 0x54
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr

08004962 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004962:	b580      	push	{r7, lr}
 8004964:	b084      	sub	sp, #16
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f7ff fc8d 	bl	80042a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004986:	bf00      	nop
 8004988:	3710      	adds	r7, #16
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800498e:	b580      	push	{r7, lr}
 8004990:	b088      	sub	sp, #32
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	e853 3f00 	ldrex	r3, [r3]
 80049a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049aa:	61fb      	str	r3, [r7, #28]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	461a      	mov	r2, r3
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	61bb      	str	r3, [r7, #24]
 80049b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b8:	6979      	ldr	r1, [r7, #20]
 80049ba:	69ba      	ldr	r2, [r7, #24]
 80049bc:	e841 2300 	strex	r3, r2, [r1]
 80049c0:	613b      	str	r3, [r7, #16]
   return(result);
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d1e6      	bne.n	8004996 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2220      	movs	r2, #32
 80049cc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f7ff fc59 	bl	800428c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049da:	bf00      	nop
 80049dc:	3720      	adds	r7, #32
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80049e2:	b480      	push	{r7}
 80049e4:	b083      	sub	sp, #12
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80049ea:	bf00      	nop
 80049ec:	370c      	adds	r7, #12
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
	...

080049f8 <__errno>:
 80049f8:	4b01      	ldr	r3, [pc, #4]	; (8004a00 <__errno+0x8>)
 80049fa:	6818      	ldr	r0, [r3, #0]
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	20000024 	.word	0x20000024

08004a04 <__libc_init_array>:
 8004a04:	b570      	push	{r4, r5, r6, lr}
 8004a06:	4d0d      	ldr	r5, [pc, #52]	; (8004a3c <__libc_init_array+0x38>)
 8004a08:	4c0d      	ldr	r4, [pc, #52]	; (8004a40 <__libc_init_array+0x3c>)
 8004a0a:	1b64      	subs	r4, r4, r5
 8004a0c:	10a4      	asrs	r4, r4, #2
 8004a0e:	2600      	movs	r6, #0
 8004a10:	42a6      	cmp	r6, r4
 8004a12:	d109      	bne.n	8004a28 <__libc_init_array+0x24>
 8004a14:	4d0b      	ldr	r5, [pc, #44]	; (8004a44 <__libc_init_array+0x40>)
 8004a16:	4c0c      	ldr	r4, [pc, #48]	; (8004a48 <__libc_init_array+0x44>)
 8004a18:	f000 fce6 	bl	80053e8 <_init>
 8004a1c:	1b64      	subs	r4, r4, r5
 8004a1e:	10a4      	asrs	r4, r4, #2
 8004a20:	2600      	movs	r6, #0
 8004a22:	42a6      	cmp	r6, r4
 8004a24:	d105      	bne.n	8004a32 <__libc_init_array+0x2e>
 8004a26:	bd70      	pop	{r4, r5, r6, pc}
 8004a28:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a2c:	4798      	blx	r3
 8004a2e:	3601      	adds	r6, #1
 8004a30:	e7ee      	b.n	8004a10 <__libc_init_array+0xc>
 8004a32:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a36:	4798      	blx	r3
 8004a38:	3601      	adds	r6, #1
 8004a3a:	e7f2      	b.n	8004a22 <__libc_init_array+0x1e>
 8004a3c:	080054c0 	.word	0x080054c0
 8004a40:	080054c0 	.word	0x080054c0
 8004a44:	080054c0 	.word	0x080054c0
 8004a48:	080054c4 	.word	0x080054c4

08004a4c <memset>:
 8004a4c:	4402      	add	r2, r0
 8004a4e:	4603      	mov	r3, r0
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d100      	bne.n	8004a56 <memset+0xa>
 8004a54:	4770      	bx	lr
 8004a56:	f803 1b01 	strb.w	r1, [r3], #1
 8004a5a:	e7f9      	b.n	8004a50 <memset+0x4>

08004a5c <_puts_r>:
 8004a5c:	b570      	push	{r4, r5, r6, lr}
 8004a5e:	460e      	mov	r6, r1
 8004a60:	4605      	mov	r5, r0
 8004a62:	b118      	cbz	r0, 8004a6c <_puts_r+0x10>
 8004a64:	6983      	ldr	r3, [r0, #24]
 8004a66:	b90b      	cbnz	r3, 8004a6c <_puts_r+0x10>
 8004a68:	f000 fa48 	bl	8004efc <__sinit>
 8004a6c:	69ab      	ldr	r3, [r5, #24]
 8004a6e:	68ac      	ldr	r4, [r5, #8]
 8004a70:	b913      	cbnz	r3, 8004a78 <_puts_r+0x1c>
 8004a72:	4628      	mov	r0, r5
 8004a74:	f000 fa42 	bl	8004efc <__sinit>
 8004a78:	4b2c      	ldr	r3, [pc, #176]	; (8004b2c <_puts_r+0xd0>)
 8004a7a:	429c      	cmp	r4, r3
 8004a7c:	d120      	bne.n	8004ac0 <_puts_r+0x64>
 8004a7e:	686c      	ldr	r4, [r5, #4]
 8004a80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a82:	07db      	lsls	r3, r3, #31
 8004a84:	d405      	bmi.n	8004a92 <_puts_r+0x36>
 8004a86:	89a3      	ldrh	r3, [r4, #12]
 8004a88:	0598      	lsls	r0, r3, #22
 8004a8a:	d402      	bmi.n	8004a92 <_puts_r+0x36>
 8004a8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a8e:	f000 fad3 	bl	8005038 <__retarget_lock_acquire_recursive>
 8004a92:	89a3      	ldrh	r3, [r4, #12]
 8004a94:	0719      	lsls	r1, r3, #28
 8004a96:	d51d      	bpl.n	8004ad4 <_puts_r+0x78>
 8004a98:	6923      	ldr	r3, [r4, #16]
 8004a9a:	b1db      	cbz	r3, 8004ad4 <_puts_r+0x78>
 8004a9c:	3e01      	subs	r6, #1
 8004a9e:	68a3      	ldr	r3, [r4, #8]
 8004aa0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	60a3      	str	r3, [r4, #8]
 8004aa8:	bb39      	cbnz	r1, 8004afa <_puts_r+0x9e>
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	da38      	bge.n	8004b20 <_puts_r+0xc4>
 8004aae:	4622      	mov	r2, r4
 8004ab0:	210a      	movs	r1, #10
 8004ab2:	4628      	mov	r0, r5
 8004ab4:	f000 f848 	bl	8004b48 <__swbuf_r>
 8004ab8:	3001      	adds	r0, #1
 8004aba:	d011      	beq.n	8004ae0 <_puts_r+0x84>
 8004abc:	250a      	movs	r5, #10
 8004abe:	e011      	b.n	8004ae4 <_puts_r+0x88>
 8004ac0:	4b1b      	ldr	r3, [pc, #108]	; (8004b30 <_puts_r+0xd4>)
 8004ac2:	429c      	cmp	r4, r3
 8004ac4:	d101      	bne.n	8004aca <_puts_r+0x6e>
 8004ac6:	68ac      	ldr	r4, [r5, #8]
 8004ac8:	e7da      	b.n	8004a80 <_puts_r+0x24>
 8004aca:	4b1a      	ldr	r3, [pc, #104]	; (8004b34 <_puts_r+0xd8>)
 8004acc:	429c      	cmp	r4, r3
 8004ace:	bf08      	it	eq
 8004ad0:	68ec      	ldreq	r4, [r5, #12]
 8004ad2:	e7d5      	b.n	8004a80 <_puts_r+0x24>
 8004ad4:	4621      	mov	r1, r4
 8004ad6:	4628      	mov	r0, r5
 8004ad8:	f000 f888 	bl	8004bec <__swsetup_r>
 8004adc:	2800      	cmp	r0, #0
 8004ade:	d0dd      	beq.n	8004a9c <_puts_r+0x40>
 8004ae0:	f04f 35ff 	mov.w	r5, #4294967295
 8004ae4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ae6:	07da      	lsls	r2, r3, #31
 8004ae8:	d405      	bmi.n	8004af6 <_puts_r+0x9a>
 8004aea:	89a3      	ldrh	r3, [r4, #12]
 8004aec:	059b      	lsls	r3, r3, #22
 8004aee:	d402      	bmi.n	8004af6 <_puts_r+0x9a>
 8004af0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004af2:	f000 faa2 	bl	800503a <__retarget_lock_release_recursive>
 8004af6:	4628      	mov	r0, r5
 8004af8:	bd70      	pop	{r4, r5, r6, pc}
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	da04      	bge.n	8004b08 <_puts_r+0xac>
 8004afe:	69a2      	ldr	r2, [r4, #24]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	dc06      	bgt.n	8004b12 <_puts_r+0xb6>
 8004b04:	290a      	cmp	r1, #10
 8004b06:	d004      	beq.n	8004b12 <_puts_r+0xb6>
 8004b08:	6823      	ldr	r3, [r4, #0]
 8004b0a:	1c5a      	adds	r2, r3, #1
 8004b0c:	6022      	str	r2, [r4, #0]
 8004b0e:	7019      	strb	r1, [r3, #0]
 8004b10:	e7c5      	b.n	8004a9e <_puts_r+0x42>
 8004b12:	4622      	mov	r2, r4
 8004b14:	4628      	mov	r0, r5
 8004b16:	f000 f817 	bl	8004b48 <__swbuf_r>
 8004b1a:	3001      	adds	r0, #1
 8004b1c:	d1bf      	bne.n	8004a9e <_puts_r+0x42>
 8004b1e:	e7df      	b.n	8004ae0 <_puts_r+0x84>
 8004b20:	6823      	ldr	r3, [r4, #0]
 8004b22:	250a      	movs	r5, #10
 8004b24:	1c5a      	adds	r2, r3, #1
 8004b26:	6022      	str	r2, [r4, #0]
 8004b28:	701d      	strb	r5, [r3, #0]
 8004b2a:	e7db      	b.n	8004ae4 <_puts_r+0x88>
 8004b2c:	08005480 	.word	0x08005480
 8004b30:	080054a0 	.word	0x080054a0
 8004b34:	08005460 	.word	0x08005460

08004b38 <puts>:
 8004b38:	4b02      	ldr	r3, [pc, #8]	; (8004b44 <puts+0xc>)
 8004b3a:	4601      	mov	r1, r0
 8004b3c:	6818      	ldr	r0, [r3, #0]
 8004b3e:	f7ff bf8d 	b.w	8004a5c <_puts_r>
 8004b42:	bf00      	nop
 8004b44:	20000024 	.word	0x20000024

08004b48 <__swbuf_r>:
 8004b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b4a:	460e      	mov	r6, r1
 8004b4c:	4614      	mov	r4, r2
 8004b4e:	4605      	mov	r5, r0
 8004b50:	b118      	cbz	r0, 8004b5a <__swbuf_r+0x12>
 8004b52:	6983      	ldr	r3, [r0, #24]
 8004b54:	b90b      	cbnz	r3, 8004b5a <__swbuf_r+0x12>
 8004b56:	f000 f9d1 	bl	8004efc <__sinit>
 8004b5a:	4b21      	ldr	r3, [pc, #132]	; (8004be0 <__swbuf_r+0x98>)
 8004b5c:	429c      	cmp	r4, r3
 8004b5e:	d12b      	bne.n	8004bb8 <__swbuf_r+0x70>
 8004b60:	686c      	ldr	r4, [r5, #4]
 8004b62:	69a3      	ldr	r3, [r4, #24]
 8004b64:	60a3      	str	r3, [r4, #8]
 8004b66:	89a3      	ldrh	r3, [r4, #12]
 8004b68:	071a      	lsls	r2, r3, #28
 8004b6a:	d52f      	bpl.n	8004bcc <__swbuf_r+0x84>
 8004b6c:	6923      	ldr	r3, [r4, #16]
 8004b6e:	b36b      	cbz	r3, 8004bcc <__swbuf_r+0x84>
 8004b70:	6923      	ldr	r3, [r4, #16]
 8004b72:	6820      	ldr	r0, [r4, #0]
 8004b74:	1ac0      	subs	r0, r0, r3
 8004b76:	6963      	ldr	r3, [r4, #20]
 8004b78:	b2f6      	uxtb	r6, r6
 8004b7a:	4283      	cmp	r3, r0
 8004b7c:	4637      	mov	r7, r6
 8004b7e:	dc04      	bgt.n	8004b8a <__swbuf_r+0x42>
 8004b80:	4621      	mov	r1, r4
 8004b82:	4628      	mov	r0, r5
 8004b84:	f000 f926 	bl	8004dd4 <_fflush_r>
 8004b88:	bb30      	cbnz	r0, 8004bd8 <__swbuf_r+0x90>
 8004b8a:	68a3      	ldr	r3, [r4, #8]
 8004b8c:	3b01      	subs	r3, #1
 8004b8e:	60a3      	str	r3, [r4, #8]
 8004b90:	6823      	ldr	r3, [r4, #0]
 8004b92:	1c5a      	adds	r2, r3, #1
 8004b94:	6022      	str	r2, [r4, #0]
 8004b96:	701e      	strb	r6, [r3, #0]
 8004b98:	6963      	ldr	r3, [r4, #20]
 8004b9a:	3001      	adds	r0, #1
 8004b9c:	4283      	cmp	r3, r0
 8004b9e:	d004      	beq.n	8004baa <__swbuf_r+0x62>
 8004ba0:	89a3      	ldrh	r3, [r4, #12]
 8004ba2:	07db      	lsls	r3, r3, #31
 8004ba4:	d506      	bpl.n	8004bb4 <__swbuf_r+0x6c>
 8004ba6:	2e0a      	cmp	r6, #10
 8004ba8:	d104      	bne.n	8004bb4 <__swbuf_r+0x6c>
 8004baa:	4621      	mov	r1, r4
 8004bac:	4628      	mov	r0, r5
 8004bae:	f000 f911 	bl	8004dd4 <_fflush_r>
 8004bb2:	b988      	cbnz	r0, 8004bd8 <__swbuf_r+0x90>
 8004bb4:	4638      	mov	r0, r7
 8004bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bb8:	4b0a      	ldr	r3, [pc, #40]	; (8004be4 <__swbuf_r+0x9c>)
 8004bba:	429c      	cmp	r4, r3
 8004bbc:	d101      	bne.n	8004bc2 <__swbuf_r+0x7a>
 8004bbe:	68ac      	ldr	r4, [r5, #8]
 8004bc0:	e7cf      	b.n	8004b62 <__swbuf_r+0x1a>
 8004bc2:	4b09      	ldr	r3, [pc, #36]	; (8004be8 <__swbuf_r+0xa0>)
 8004bc4:	429c      	cmp	r4, r3
 8004bc6:	bf08      	it	eq
 8004bc8:	68ec      	ldreq	r4, [r5, #12]
 8004bca:	e7ca      	b.n	8004b62 <__swbuf_r+0x1a>
 8004bcc:	4621      	mov	r1, r4
 8004bce:	4628      	mov	r0, r5
 8004bd0:	f000 f80c 	bl	8004bec <__swsetup_r>
 8004bd4:	2800      	cmp	r0, #0
 8004bd6:	d0cb      	beq.n	8004b70 <__swbuf_r+0x28>
 8004bd8:	f04f 37ff 	mov.w	r7, #4294967295
 8004bdc:	e7ea      	b.n	8004bb4 <__swbuf_r+0x6c>
 8004bde:	bf00      	nop
 8004be0:	08005480 	.word	0x08005480
 8004be4:	080054a0 	.word	0x080054a0
 8004be8:	08005460 	.word	0x08005460

08004bec <__swsetup_r>:
 8004bec:	4b32      	ldr	r3, [pc, #200]	; (8004cb8 <__swsetup_r+0xcc>)
 8004bee:	b570      	push	{r4, r5, r6, lr}
 8004bf0:	681d      	ldr	r5, [r3, #0]
 8004bf2:	4606      	mov	r6, r0
 8004bf4:	460c      	mov	r4, r1
 8004bf6:	b125      	cbz	r5, 8004c02 <__swsetup_r+0x16>
 8004bf8:	69ab      	ldr	r3, [r5, #24]
 8004bfa:	b913      	cbnz	r3, 8004c02 <__swsetup_r+0x16>
 8004bfc:	4628      	mov	r0, r5
 8004bfe:	f000 f97d 	bl	8004efc <__sinit>
 8004c02:	4b2e      	ldr	r3, [pc, #184]	; (8004cbc <__swsetup_r+0xd0>)
 8004c04:	429c      	cmp	r4, r3
 8004c06:	d10f      	bne.n	8004c28 <__swsetup_r+0x3c>
 8004c08:	686c      	ldr	r4, [r5, #4]
 8004c0a:	89a3      	ldrh	r3, [r4, #12]
 8004c0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c10:	0719      	lsls	r1, r3, #28
 8004c12:	d42c      	bmi.n	8004c6e <__swsetup_r+0x82>
 8004c14:	06dd      	lsls	r5, r3, #27
 8004c16:	d411      	bmi.n	8004c3c <__swsetup_r+0x50>
 8004c18:	2309      	movs	r3, #9
 8004c1a:	6033      	str	r3, [r6, #0]
 8004c1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004c20:	81a3      	strh	r3, [r4, #12]
 8004c22:	f04f 30ff 	mov.w	r0, #4294967295
 8004c26:	e03e      	b.n	8004ca6 <__swsetup_r+0xba>
 8004c28:	4b25      	ldr	r3, [pc, #148]	; (8004cc0 <__swsetup_r+0xd4>)
 8004c2a:	429c      	cmp	r4, r3
 8004c2c:	d101      	bne.n	8004c32 <__swsetup_r+0x46>
 8004c2e:	68ac      	ldr	r4, [r5, #8]
 8004c30:	e7eb      	b.n	8004c0a <__swsetup_r+0x1e>
 8004c32:	4b24      	ldr	r3, [pc, #144]	; (8004cc4 <__swsetup_r+0xd8>)
 8004c34:	429c      	cmp	r4, r3
 8004c36:	bf08      	it	eq
 8004c38:	68ec      	ldreq	r4, [r5, #12]
 8004c3a:	e7e6      	b.n	8004c0a <__swsetup_r+0x1e>
 8004c3c:	0758      	lsls	r0, r3, #29
 8004c3e:	d512      	bpl.n	8004c66 <__swsetup_r+0x7a>
 8004c40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c42:	b141      	cbz	r1, 8004c56 <__swsetup_r+0x6a>
 8004c44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c48:	4299      	cmp	r1, r3
 8004c4a:	d002      	beq.n	8004c52 <__swsetup_r+0x66>
 8004c4c:	4630      	mov	r0, r6
 8004c4e:	f000 fa59 	bl	8005104 <_free_r>
 8004c52:	2300      	movs	r3, #0
 8004c54:	6363      	str	r3, [r4, #52]	; 0x34
 8004c56:	89a3      	ldrh	r3, [r4, #12]
 8004c58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004c5c:	81a3      	strh	r3, [r4, #12]
 8004c5e:	2300      	movs	r3, #0
 8004c60:	6063      	str	r3, [r4, #4]
 8004c62:	6923      	ldr	r3, [r4, #16]
 8004c64:	6023      	str	r3, [r4, #0]
 8004c66:	89a3      	ldrh	r3, [r4, #12]
 8004c68:	f043 0308 	orr.w	r3, r3, #8
 8004c6c:	81a3      	strh	r3, [r4, #12]
 8004c6e:	6923      	ldr	r3, [r4, #16]
 8004c70:	b94b      	cbnz	r3, 8004c86 <__swsetup_r+0x9a>
 8004c72:	89a3      	ldrh	r3, [r4, #12]
 8004c74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004c78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c7c:	d003      	beq.n	8004c86 <__swsetup_r+0x9a>
 8004c7e:	4621      	mov	r1, r4
 8004c80:	4630      	mov	r0, r6
 8004c82:	f000 f9ff 	bl	8005084 <__smakebuf_r>
 8004c86:	89a0      	ldrh	r0, [r4, #12]
 8004c88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c8c:	f010 0301 	ands.w	r3, r0, #1
 8004c90:	d00a      	beq.n	8004ca8 <__swsetup_r+0xbc>
 8004c92:	2300      	movs	r3, #0
 8004c94:	60a3      	str	r3, [r4, #8]
 8004c96:	6963      	ldr	r3, [r4, #20]
 8004c98:	425b      	negs	r3, r3
 8004c9a:	61a3      	str	r3, [r4, #24]
 8004c9c:	6923      	ldr	r3, [r4, #16]
 8004c9e:	b943      	cbnz	r3, 8004cb2 <__swsetup_r+0xc6>
 8004ca0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004ca4:	d1ba      	bne.n	8004c1c <__swsetup_r+0x30>
 8004ca6:	bd70      	pop	{r4, r5, r6, pc}
 8004ca8:	0781      	lsls	r1, r0, #30
 8004caa:	bf58      	it	pl
 8004cac:	6963      	ldrpl	r3, [r4, #20]
 8004cae:	60a3      	str	r3, [r4, #8]
 8004cb0:	e7f4      	b.n	8004c9c <__swsetup_r+0xb0>
 8004cb2:	2000      	movs	r0, #0
 8004cb4:	e7f7      	b.n	8004ca6 <__swsetup_r+0xba>
 8004cb6:	bf00      	nop
 8004cb8:	20000024 	.word	0x20000024
 8004cbc:	08005480 	.word	0x08005480
 8004cc0:	080054a0 	.word	0x080054a0
 8004cc4:	08005460 	.word	0x08005460

08004cc8 <__sflush_r>:
 8004cc8:	898a      	ldrh	r2, [r1, #12]
 8004cca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cce:	4605      	mov	r5, r0
 8004cd0:	0710      	lsls	r0, r2, #28
 8004cd2:	460c      	mov	r4, r1
 8004cd4:	d458      	bmi.n	8004d88 <__sflush_r+0xc0>
 8004cd6:	684b      	ldr	r3, [r1, #4]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	dc05      	bgt.n	8004ce8 <__sflush_r+0x20>
 8004cdc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	dc02      	bgt.n	8004ce8 <__sflush_r+0x20>
 8004ce2:	2000      	movs	r0, #0
 8004ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ce8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004cea:	2e00      	cmp	r6, #0
 8004cec:	d0f9      	beq.n	8004ce2 <__sflush_r+0x1a>
 8004cee:	2300      	movs	r3, #0
 8004cf0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004cf4:	682f      	ldr	r7, [r5, #0]
 8004cf6:	602b      	str	r3, [r5, #0]
 8004cf8:	d032      	beq.n	8004d60 <__sflush_r+0x98>
 8004cfa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004cfc:	89a3      	ldrh	r3, [r4, #12]
 8004cfe:	075a      	lsls	r2, r3, #29
 8004d00:	d505      	bpl.n	8004d0e <__sflush_r+0x46>
 8004d02:	6863      	ldr	r3, [r4, #4]
 8004d04:	1ac0      	subs	r0, r0, r3
 8004d06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d08:	b10b      	cbz	r3, 8004d0e <__sflush_r+0x46>
 8004d0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d0c:	1ac0      	subs	r0, r0, r3
 8004d0e:	2300      	movs	r3, #0
 8004d10:	4602      	mov	r2, r0
 8004d12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d14:	6a21      	ldr	r1, [r4, #32]
 8004d16:	4628      	mov	r0, r5
 8004d18:	47b0      	blx	r6
 8004d1a:	1c43      	adds	r3, r0, #1
 8004d1c:	89a3      	ldrh	r3, [r4, #12]
 8004d1e:	d106      	bne.n	8004d2e <__sflush_r+0x66>
 8004d20:	6829      	ldr	r1, [r5, #0]
 8004d22:	291d      	cmp	r1, #29
 8004d24:	d82c      	bhi.n	8004d80 <__sflush_r+0xb8>
 8004d26:	4a2a      	ldr	r2, [pc, #168]	; (8004dd0 <__sflush_r+0x108>)
 8004d28:	40ca      	lsrs	r2, r1
 8004d2a:	07d6      	lsls	r6, r2, #31
 8004d2c:	d528      	bpl.n	8004d80 <__sflush_r+0xb8>
 8004d2e:	2200      	movs	r2, #0
 8004d30:	6062      	str	r2, [r4, #4]
 8004d32:	04d9      	lsls	r1, r3, #19
 8004d34:	6922      	ldr	r2, [r4, #16]
 8004d36:	6022      	str	r2, [r4, #0]
 8004d38:	d504      	bpl.n	8004d44 <__sflush_r+0x7c>
 8004d3a:	1c42      	adds	r2, r0, #1
 8004d3c:	d101      	bne.n	8004d42 <__sflush_r+0x7a>
 8004d3e:	682b      	ldr	r3, [r5, #0]
 8004d40:	b903      	cbnz	r3, 8004d44 <__sflush_r+0x7c>
 8004d42:	6560      	str	r0, [r4, #84]	; 0x54
 8004d44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d46:	602f      	str	r7, [r5, #0]
 8004d48:	2900      	cmp	r1, #0
 8004d4a:	d0ca      	beq.n	8004ce2 <__sflush_r+0x1a>
 8004d4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d50:	4299      	cmp	r1, r3
 8004d52:	d002      	beq.n	8004d5a <__sflush_r+0x92>
 8004d54:	4628      	mov	r0, r5
 8004d56:	f000 f9d5 	bl	8005104 <_free_r>
 8004d5a:	2000      	movs	r0, #0
 8004d5c:	6360      	str	r0, [r4, #52]	; 0x34
 8004d5e:	e7c1      	b.n	8004ce4 <__sflush_r+0x1c>
 8004d60:	6a21      	ldr	r1, [r4, #32]
 8004d62:	2301      	movs	r3, #1
 8004d64:	4628      	mov	r0, r5
 8004d66:	47b0      	blx	r6
 8004d68:	1c41      	adds	r1, r0, #1
 8004d6a:	d1c7      	bne.n	8004cfc <__sflush_r+0x34>
 8004d6c:	682b      	ldr	r3, [r5, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d0c4      	beq.n	8004cfc <__sflush_r+0x34>
 8004d72:	2b1d      	cmp	r3, #29
 8004d74:	d001      	beq.n	8004d7a <__sflush_r+0xb2>
 8004d76:	2b16      	cmp	r3, #22
 8004d78:	d101      	bne.n	8004d7e <__sflush_r+0xb6>
 8004d7a:	602f      	str	r7, [r5, #0]
 8004d7c:	e7b1      	b.n	8004ce2 <__sflush_r+0x1a>
 8004d7e:	89a3      	ldrh	r3, [r4, #12]
 8004d80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d84:	81a3      	strh	r3, [r4, #12]
 8004d86:	e7ad      	b.n	8004ce4 <__sflush_r+0x1c>
 8004d88:	690f      	ldr	r7, [r1, #16]
 8004d8a:	2f00      	cmp	r7, #0
 8004d8c:	d0a9      	beq.n	8004ce2 <__sflush_r+0x1a>
 8004d8e:	0793      	lsls	r3, r2, #30
 8004d90:	680e      	ldr	r6, [r1, #0]
 8004d92:	bf08      	it	eq
 8004d94:	694b      	ldreq	r3, [r1, #20]
 8004d96:	600f      	str	r7, [r1, #0]
 8004d98:	bf18      	it	ne
 8004d9a:	2300      	movne	r3, #0
 8004d9c:	eba6 0807 	sub.w	r8, r6, r7
 8004da0:	608b      	str	r3, [r1, #8]
 8004da2:	f1b8 0f00 	cmp.w	r8, #0
 8004da6:	dd9c      	ble.n	8004ce2 <__sflush_r+0x1a>
 8004da8:	6a21      	ldr	r1, [r4, #32]
 8004daa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004dac:	4643      	mov	r3, r8
 8004dae:	463a      	mov	r2, r7
 8004db0:	4628      	mov	r0, r5
 8004db2:	47b0      	blx	r6
 8004db4:	2800      	cmp	r0, #0
 8004db6:	dc06      	bgt.n	8004dc6 <__sflush_r+0xfe>
 8004db8:	89a3      	ldrh	r3, [r4, #12]
 8004dba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dbe:	81a3      	strh	r3, [r4, #12]
 8004dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8004dc4:	e78e      	b.n	8004ce4 <__sflush_r+0x1c>
 8004dc6:	4407      	add	r7, r0
 8004dc8:	eba8 0800 	sub.w	r8, r8, r0
 8004dcc:	e7e9      	b.n	8004da2 <__sflush_r+0xda>
 8004dce:	bf00      	nop
 8004dd0:	20400001 	.word	0x20400001

08004dd4 <_fflush_r>:
 8004dd4:	b538      	push	{r3, r4, r5, lr}
 8004dd6:	690b      	ldr	r3, [r1, #16]
 8004dd8:	4605      	mov	r5, r0
 8004dda:	460c      	mov	r4, r1
 8004ddc:	b913      	cbnz	r3, 8004de4 <_fflush_r+0x10>
 8004dde:	2500      	movs	r5, #0
 8004de0:	4628      	mov	r0, r5
 8004de2:	bd38      	pop	{r3, r4, r5, pc}
 8004de4:	b118      	cbz	r0, 8004dee <_fflush_r+0x1a>
 8004de6:	6983      	ldr	r3, [r0, #24]
 8004de8:	b90b      	cbnz	r3, 8004dee <_fflush_r+0x1a>
 8004dea:	f000 f887 	bl	8004efc <__sinit>
 8004dee:	4b14      	ldr	r3, [pc, #80]	; (8004e40 <_fflush_r+0x6c>)
 8004df0:	429c      	cmp	r4, r3
 8004df2:	d11b      	bne.n	8004e2c <_fflush_r+0x58>
 8004df4:	686c      	ldr	r4, [r5, #4]
 8004df6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d0ef      	beq.n	8004dde <_fflush_r+0xa>
 8004dfe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004e00:	07d0      	lsls	r0, r2, #31
 8004e02:	d404      	bmi.n	8004e0e <_fflush_r+0x3a>
 8004e04:	0599      	lsls	r1, r3, #22
 8004e06:	d402      	bmi.n	8004e0e <_fflush_r+0x3a>
 8004e08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e0a:	f000 f915 	bl	8005038 <__retarget_lock_acquire_recursive>
 8004e0e:	4628      	mov	r0, r5
 8004e10:	4621      	mov	r1, r4
 8004e12:	f7ff ff59 	bl	8004cc8 <__sflush_r>
 8004e16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e18:	07da      	lsls	r2, r3, #31
 8004e1a:	4605      	mov	r5, r0
 8004e1c:	d4e0      	bmi.n	8004de0 <_fflush_r+0xc>
 8004e1e:	89a3      	ldrh	r3, [r4, #12]
 8004e20:	059b      	lsls	r3, r3, #22
 8004e22:	d4dd      	bmi.n	8004de0 <_fflush_r+0xc>
 8004e24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e26:	f000 f908 	bl	800503a <__retarget_lock_release_recursive>
 8004e2a:	e7d9      	b.n	8004de0 <_fflush_r+0xc>
 8004e2c:	4b05      	ldr	r3, [pc, #20]	; (8004e44 <_fflush_r+0x70>)
 8004e2e:	429c      	cmp	r4, r3
 8004e30:	d101      	bne.n	8004e36 <_fflush_r+0x62>
 8004e32:	68ac      	ldr	r4, [r5, #8]
 8004e34:	e7df      	b.n	8004df6 <_fflush_r+0x22>
 8004e36:	4b04      	ldr	r3, [pc, #16]	; (8004e48 <_fflush_r+0x74>)
 8004e38:	429c      	cmp	r4, r3
 8004e3a:	bf08      	it	eq
 8004e3c:	68ec      	ldreq	r4, [r5, #12]
 8004e3e:	e7da      	b.n	8004df6 <_fflush_r+0x22>
 8004e40:	08005480 	.word	0x08005480
 8004e44:	080054a0 	.word	0x080054a0
 8004e48:	08005460 	.word	0x08005460

08004e4c <std>:
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	b510      	push	{r4, lr}
 8004e50:	4604      	mov	r4, r0
 8004e52:	e9c0 3300 	strd	r3, r3, [r0]
 8004e56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e5a:	6083      	str	r3, [r0, #8]
 8004e5c:	8181      	strh	r1, [r0, #12]
 8004e5e:	6643      	str	r3, [r0, #100]	; 0x64
 8004e60:	81c2      	strh	r2, [r0, #14]
 8004e62:	6183      	str	r3, [r0, #24]
 8004e64:	4619      	mov	r1, r3
 8004e66:	2208      	movs	r2, #8
 8004e68:	305c      	adds	r0, #92	; 0x5c
 8004e6a:	f7ff fdef 	bl	8004a4c <memset>
 8004e6e:	4b05      	ldr	r3, [pc, #20]	; (8004e84 <std+0x38>)
 8004e70:	6263      	str	r3, [r4, #36]	; 0x24
 8004e72:	4b05      	ldr	r3, [pc, #20]	; (8004e88 <std+0x3c>)
 8004e74:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e76:	4b05      	ldr	r3, [pc, #20]	; (8004e8c <std+0x40>)
 8004e78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e7a:	4b05      	ldr	r3, [pc, #20]	; (8004e90 <std+0x44>)
 8004e7c:	6224      	str	r4, [r4, #32]
 8004e7e:	6323      	str	r3, [r4, #48]	; 0x30
 8004e80:	bd10      	pop	{r4, pc}
 8004e82:	bf00      	nop
 8004e84:	08005279 	.word	0x08005279
 8004e88:	0800529b 	.word	0x0800529b
 8004e8c:	080052d3 	.word	0x080052d3
 8004e90:	080052f7 	.word	0x080052f7

08004e94 <_cleanup_r>:
 8004e94:	4901      	ldr	r1, [pc, #4]	; (8004e9c <_cleanup_r+0x8>)
 8004e96:	f000 b8af 	b.w	8004ff8 <_fwalk_reent>
 8004e9a:	bf00      	nop
 8004e9c:	08004dd5 	.word	0x08004dd5

08004ea0 <__sfmoreglue>:
 8004ea0:	b570      	push	{r4, r5, r6, lr}
 8004ea2:	1e4a      	subs	r2, r1, #1
 8004ea4:	2568      	movs	r5, #104	; 0x68
 8004ea6:	4355      	muls	r5, r2
 8004ea8:	460e      	mov	r6, r1
 8004eaa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004eae:	f000 f979 	bl	80051a4 <_malloc_r>
 8004eb2:	4604      	mov	r4, r0
 8004eb4:	b140      	cbz	r0, 8004ec8 <__sfmoreglue+0x28>
 8004eb6:	2100      	movs	r1, #0
 8004eb8:	e9c0 1600 	strd	r1, r6, [r0]
 8004ebc:	300c      	adds	r0, #12
 8004ebe:	60a0      	str	r0, [r4, #8]
 8004ec0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004ec4:	f7ff fdc2 	bl	8004a4c <memset>
 8004ec8:	4620      	mov	r0, r4
 8004eca:	bd70      	pop	{r4, r5, r6, pc}

08004ecc <__sfp_lock_acquire>:
 8004ecc:	4801      	ldr	r0, [pc, #4]	; (8004ed4 <__sfp_lock_acquire+0x8>)
 8004ece:	f000 b8b3 	b.w	8005038 <__retarget_lock_acquire_recursive>
 8004ed2:	bf00      	nop
 8004ed4:	200001fc 	.word	0x200001fc

08004ed8 <__sfp_lock_release>:
 8004ed8:	4801      	ldr	r0, [pc, #4]	; (8004ee0 <__sfp_lock_release+0x8>)
 8004eda:	f000 b8ae 	b.w	800503a <__retarget_lock_release_recursive>
 8004ede:	bf00      	nop
 8004ee0:	200001fc 	.word	0x200001fc

08004ee4 <__sinit_lock_acquire>:
 8004ee4:	4801      	ldr	r0, [pc, #4]	; (8004eec <__sinit_lock_acquire+0x8>)
 8004ee6:	f000 b8a7 	b.w	8005038 <__retarget_lock_acquire_recursive>
 8004eea:	bf00      	nop
 8004eec:	200001f7 	.word	0x200001f7

08004ef0 <__sinit_lock_release>:
 8004ef0:	4801      	ldr	r0, [pc, #4]	; (8004ef8 <__sinit_lock_release+0x8>)
 8004ef2:	f000 b8a2 	b.w	800503a <__retarget_lock_release_recursive>
 8004ef6:	bf00      	nop
 8004ef8:	200001f7 	.word	0x200001f7

08004efc <__sinit>:
 8004efc:	b510      	push	{r4, lr}
 8004efe:	4604      	mov	r4, r0
 8004f00:	f7ff fff0 	bl	8004ee4 <__sinit_lock_acquire>
 8004f04:	69a3      	ldr	r3, [r4, #24]
 8004f06:	b11b      	cbz	r3, 8004f10 <__sinit+0x14>
 8004f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f0c:	f7ff bff0 	b.w	8004ef0 <__sinit_lock_release>
 8004f10:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004f14:	6523      	str	r3, [r4, #80]	; 0x50
 8004f16:	4b13      	ldr	r3, [pc, #76]	; (8004f64 <__sinit+0x68>)
 8004f18:	4a13      	ldr	r2, [pc, #76]	; (8004f68 <__sinit+0x6c>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	62a2      	str	r2, [r4, #40]	; 0x28
 8004f1e:	42a3      	cmp	r3, r4
 8004f20:	bf04      	itt	eq
 8004f22:	2301      	moveq	r3, #1
 8004f24:	61a3      	streq	r3, [r4, #24]
 8004f26:	4620      	mov	r0, r4
 8004f28:	f000 f820 	bl	8004f6c <__sfp>
 8004f2c:	6060      	str	r0, [r4, #4]
 8004f2e:	4620      	mov	r0, r4
 8004f30:	f000 f81c 	bl	8004f6c <__sfp>
 8004f34:	60a0      	str	r0, [r4, #8]
 8004f36:	4620      	mov	r0, r4
 8004f38:	f000 f818 	bl	8004f6c <__sfp>
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	60e0      	str	r0, [r4, #12]
 8004f40:	2104      	movs	r1, #4
 8004f42:	6860      	ldr	r0, [r4, #4]
 8004f44:	f7ff ff82 	bl	8004e4c <std>
 8004f48:	68a0      	ldr	r0, [r4, #8]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	2109      	movs	r1, #9
 8004f4e:	f7ff ff7d 	bl	8004e4c <std>
 8004f52:	68e0      	ldr	r0, [r4, #12]
 8004f54:	2202      	movs	r2, #2
 8004f56:	2112      	movs	r1, #18
 8004f58:	f7ff ff78 	bl	8004e4c <std>
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	61a3      	str	r3, [r4, #24]
 8004f60:	e7d2      	b.n	8004f08 <__sinit+0xc>
 8004f62:	bf00      	nop
 8004f64:	0800545c 	.word	0x0800545c
 8004f68:	08004e95 	.word	0x08004e95

08004f6c <__sfp>:
 8004f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f6e:	4607      	mov	r7, r0
 8004f70:	f7ff ffac 	bl	8004ecc <__sfp_lock_acquire>
 8004f74:	4b1e      	ldr	r3, [pc, #120]	; (8004ff0 <__sfp+0x84>)
 8004f76:	681e      	ldr	r6, [r3, #0]
 8004f78:	69b3      	ldr	r3, [r6, #24]
 8004f7a:	b913      	cbnz	r3, 8004f82 <__sfp+0x16>
 8004f7c:	4630      	mov	r0, r6
 8004f7e:	f7ff ffbd 	bl	8004efc <__sinit>
 8004f82:	3648      	adds	r6, #72	; 0x48
 8004f84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	d503      	bpl.n	8004f94 <__sfp+0x28>
 8004f8c:	6833      	ldr	r3, [r6, #0]
 8004f8e:	b30b      	cbz	r3, 8004fd4 <__sfp+0x68>
 8004f90:	6836      	ldr	r6, [r6, #0]
 8004f92:	e7f7      	b.n	8004f84 <__sfp+0x18>
 8004f94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004f98:	b9d5      	cbnz	r5, 8004fd0 <__sfp+0x64>
 8004f9a:	4b16      	ldr	r3, [pc, #88]	; (8004ff4 <__sfp+0x88>)
 8004f9c:	60e3      	str	r3, [r4, #12]
 8004f9e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004fa2:	6665      	str	r5, [r4, #100]	; 0x64
 8004fa4:	f000 f847 	bl	8005036 <__retarget_lock_init_recursive>
 8004fa8:	f7ff ff96 	bl	8004ed8 <__sfp_lock_release>
 8004fac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004fb0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004fb4:	6025      	str	r5, [r4, #0]
 8004fb6:	61a5      	str	r5, [r4, #24]
 8004fb8:	2208      	movs	r2, #8
 8004fba:	4629      	mov	r1, r5
 8004fbc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004fc0:	f7ff fd44 	bl	8004a4c <memset>
 8004fc4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004fc8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004fcc:	4620      	mov	r0, r4
 8004fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fd0:	3468      	adds	r4, #104	; 0x68
 8004fd2:	e7d9      	b.n	8004f88 <__sfp+0x1c>
 8004fd4:	2104      	movs	r1, #4
 8004fd6:	4638      	mov	r0, r7
 8004fd8:	f7ff ff62 	bl	8004ea0 <__sfmoreglue>
 8004fdc:	4604      	mov	r4, r0
 8004fde:	6030      	str	r0, [r6, #0]
 8004fe0:	2800      	cmp	r0, #0
 8004fe2:	d1d5      	bne.n	8004f90 <__sfp+0x24>
 8004fe4:	f7ff ff78 	bl	8004ed8 <__sfp_lock_release>
 8004fe8:	230c      	movs	r3, #12
 8004fea:	603b      	str	r3, [r7, #0]
 8004fec:	e7ee      	b.n	8004fcc <__sfp+0x60>
 8004fee:	bf00      	nop
 8004ff0:	0800545c 	.word	0x0800545c
 8004ff4:	ffff0001 	.word	0xffff0001

08004ff8 <_fwalk_reent>:
 8004ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ffc:	4606      	mov	r6, r0
 8004ffe:	4688      	mov	r8, r1
 8005000:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005004:	2700      	movs	r7, #0
 8005006:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800500a:	f1b9 0901 	subs.w	r9, r9, #1
 800500e:	d505      	bpl.n	800501c <_fwalk_reent+0x24>
 8005010:	6824      	ldr	r4, [r4, #0]
 8005012:	2c00      	cmp	r4, #0
 8005014:	d1f7      	bne.n	8005006 <_fwalk_reent+0xe>
 8005016:	4638      	mov	r0, r7
 8005018:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800501c:	89ab      	ldrh	r3, [r5, #12]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d907      	bls.n	8005032 <_fwalk_reent+0x3a>
 8005022:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005026:	3301      	adds	r3, #1
 8005028:	d003      	beq.n	8005032 <_fwalk_reent+0x3a>
 800502a:	4629      	mov	r1, r5
 800502c:	4630      	mov	r0, r6
 800502e:	47c0      	blx	r8
 8005030:	4307      	orrs	r7, r0
 8005032:	3568      	adds	r5, #104	; 0x68
 8005034:	e7e9      	b.n	800500a <_fwalk_reent+0x12>

08005036 <__retarget_lock_init_recursive>:
 8005036:	4770      	bx	lr

08005038 <__retarget_lock_acquire_recursive>:
 8005038:	4770      	bx	lr

0800503a <__retarget_lock_release_recursive>:
 800503a:	4770      	bx	lr

0800503c <__swhatbuf_r>:
 800503c:	b570      	push	{r4, r5, r6, lr}
 800503e:	460e      	mov	r6, r1
 8005040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005044:	2900      	cmp	r1, #0
 8005046:	b096      	sub	sp, #88	; 0x58
 8005048:	4614      	mov	r4, r2
 800504a:	461d      	mov	r5, r3
 800504c:	da07      	bge.n	800505e <__swhatbuf_r+0x22>
 800504e:	2300      	movs	r3, #0
 8005050:	602b      	str	r3, [r5, #0]
 8005052:	89b3      	ldrh	r3, [r6, #12]
 8005054:	061a      	lsls	r2, r3, #24
 8005056:	d410      	bmi.n	800507a <__swhatbuf_r+0x3e>
 8005058:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800505c:	e00e      	b.n	800507c <__swhatbuf_r+0x40>
 800505e:	466a      	mov	r2, sp
 8005060:	f000 f970 	bl	8005344 <_fstat_r>
 8005064:	2800      	cmp	r0, #0
 8005066:	dbf2      	blt.n	800504e <__swhatbuf_r+0x12>
 8005068:	9a01      	ldr	r2, [sp, #4]
 800506a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800506e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005072:	425a      	negs	r2, r3
 8005074:	415a      	adcs	r2, r3
 8005076:	602a      	str	r2, [r5, #0]
 8005078:	e7ee      	b.n	8005058 <__swhatbuf_r+0x1c>
 800507a:	2340      	movs	r3, #64	; 0x40
 800507c:	2000      	movs	r0, #0
 800507e:	6023      	str	r3, [r4, #0]
 8005080:	b016      	add	sp, #88	; 0x58
 8005082:	bd70      	pop	{r4, r5, r6, pc}

08005084 <__smakebuf_r>:
 8005084:	898b      	ldrh	r3, [r1, #12]
 8005086:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005088:	079d      	lsls	r5, r3, #30
 800508a:	4606      	mov	r6, r0
 800508c:	460c      	mov	r4, r1
 800508e:	d507      	bpl.n	80050a0 <__smakebuf_r+0x1c>
 8005090:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005094:	6023      	str	r3, [r4, #0]
 8005096:	6123      	str	r3, [r4, #16]
 8005098:	2301      	movs	r3, #1
 800509a:	6163      	str	r3, [r4, #20]
 800509c:	b002      	add	sp, #8
 800509e:	bd70      	pop	{r4, r5, r6, pc}
 80050a0:	ab01      	add	r3, sp, #4
 80050a2:	466a      	mov	r2, sp
 80050a4:	f7ff ffca 	bl	800503c <__swhatbuf_r>
 80050a8:	9900      	ldr	r1, [sp, #0]
 80050aa:	4605      	mov	r5, r0
 80050ac:	4630      	mov	r0, r6
 80050ae:	f000 f879 	bl	80051a4 <_malloc_r>
 80050b2:	b948      	cbnz	r0, 80050c8 <__smakebuf_r+0x44>
 80050b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050b8:	059a      	lsls	r2, r3, #22
 80050ba:	d4ef      	bmi.n	800509c <__smakebuf_r+0x18>
 80050bc:	f023 0303 	bic.w	r3, r3, #3
 80050c0:	f043 0302 	orr.w	r3, r3, #2
 80050c4:	81a3      	strh	r3, [r4, #12]
 80050c6:	e7e3      	b.n	8005090 <__smakebuf_r+0xc>
 80050c8:	4b0d      	ldr	r3, [pc, #52]	; (8005100 <__smakebuf_r+0x7c>)
 80050ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80050cc:	89a3      	ldrh	r3, [r4, #12]
 80050ce:	6020      	str	r0, [r4, #0]
 80050d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050d4:	81a3      	strh	r3, [r4, #12]
 80050d6:	9b00      	ldr	r3, [sp, #0]
 80050d8:	6163      	str	r3, [r4, #20]
 80050da:	9b01      	ldr	r3, [sp, #4]
 80050dc:	6120      	str	r0, [r4, #16]
 80050de:	b15b      	cbz	r3, 80050f8 <__smakebuf_r+0x74>
 80050e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050e4:	4630      	mov	r0, r6
 80050e6:	f000 f93f 	bl	8005368 <_isatty_r>
 80050ea:	b128      	cbz	r0, 80050f8 <__smakebuf_r+0x74>
 80050ec:	89a3      	ldrh	r3, [r4, #12]
 80050ee:	f023 0303 	bic.w	r3, r3, #3
 80050f2:	f043 0301 	orr.w	r3, r3, #1
 80050f6:	81a3      	strh	r3, [r4, #12]
 80050f8:	89a0      	ldrh	r0, [r4, #12]
 80050fa:	4305      	orrs	r5, r0
 80050fc:	81a5      	strh	r5, [r4, #12]
 80050fe:	e7cd      	b.n	800509c <__smakebuf_r+0x18>
 8005100:	08004e95 	.word	0x08004e95

08005104 <_free_r>:
 8005104:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005106:	2900      	cmp	r1, #0
 8005108:	d048      	beq.n	800519c <_free_r+0x98>
 800510a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800510e:	9001      	str	r0, [sp, #4]
 8005110:	2b00      	cmp	r3, #0
 8005112:	f1a1 0404 	sub.w	r4, r1, #4
 8005116:	bfb8      	it	lt
 8005118:	18e4      	addlt	r4, r4, r3
 800511a:	f000 f947 	bl	80053ac <__malloc_lock>
 800511e:	4a20      	ldr	r2, [pc, #128]	; (80051a0 <_free_r+0x9c>)
 8005120:	9801      	ldr	r0, [sp, #4]
 8005122:	6813      	ldr	r3, [r2, #0]
 8005124:	4615      	mov	r5, r2
 8005126:	b933      	cbnz	r3, 8005136 <_free_r+0x32>
 8005128:	6063      	str	r3, [r4, #4]
 800512a:	6014      	str	r4, [r2, #0]
 800512c:	b003      	add	sp, #12
 800512e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005132:	f000 b941 	b.w	80053b8 <__malloc_unlock>
 8005136:	42a3      	cmp	r3, r4
 8005138:	d90b      	bls.n	8005152 <_free_r+0x4e>
 800513a:	6821      	ldr	r1, [r4, #0]
 800513c:	1862      	adds	r2, r4, r1
 800513e:	4293      	cmp	r3, r2
 8005140:	bf04      	itt	eq
 8005142:	681a      	ldreq	r2, [r3, #0]
 8005144:	685b      	ldreq	r3, [r3, #4]
 8005146:	6063      	str	r3, [r4, #4]
 8005148:	bf04      	itt	eq
 800514a:	1852      	addeq	r2, r2, r1
 800514c:	6022      	streq	r2, [r4, #0]
 800514e:	602c      	str	r4, [r5, #0]
 8005150:	e7ec      	b.n	800512c <_free_r+0x28>
 8005152:	461a      	mov	r2, r3
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	b10b      	cbz	r3, 800515c <_free_r+0x58>
 8005158:	42a3      	cmp	r3, r4
 800515a:	d9fa      	bls.n	8005152 <_free_r+0x4e>
 800515c:	6811      	ldr	r1, [r2, #0]
 800515e:	1855      	adds	r5, r2, r1
 8005160:	42a5      	cmp	r5, r4
 8005162:	d10b      	bne.n	800517c <_free_r+0x78>
 8005164:	6824      	ldr	r4, [r4, #0]
 8005166:	4421      	add	r1, r4
 8005168:	1854      	adds	r4, r2, r1
 800516a:	42a3      	cmp	r3, r4
 800516c:	6011      	str	r1, [r2, #0]
 800516e:	d1dd      	bne.n	800512c <_free_r+0x28>
 8005170:	681c      	ldr	r4, [r3, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	6053      	str	r3, [r2, #4]
 8005176:	4421      	add	r1, r4
 8005178:	6011      	str	r1, [r2, #0]
 800517a:	e7d7      	b.n	800512c <_free_r+0x28>
 800517c:	d902      	bls.n	8005184 <_free_r+0x80>
 800517e:	230c      	movs	r3, #12
 8005180:	6003      	str	r3, [r0, #0]
 8005182:	e7d3      	b.n	800512c <_free_r+0x28>
 8005184:	6825      	ldr	r5, [r4, #0]
 8005186:	1961      	adds	r1, r4, r5
 8005188:	428b      	cmp	r3, r1
 800518a:	bf04      	itt	eq
 800518c:	6819      	ldreq	r1, [r3, #0]
 800518e:	685b      	ldreq	r3, [r3, #4]
 8005190:	6063      	str	r3, [r4, #4]
 8005192:	bf04      	itt	eq
 8005194:	1949      	addeq	r1, r1, r5
 8005196:	6021      	streq	r1, [r4, #0]
 8005198:	6054      	str	r4, [r2, #4]
 800519a:	e7c7      	b.n	800512c <_free_r+0x28>
 800519c:	b003      	add	sp, #12
 800519e:	bd30      	pop	{r4, r5, pc}
 80051a0:	200000a8 	.word	0x200000a8

080051a4 <_malloc_r>:
 80051a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051a6:	1ccd      	adds	r5, r1, #3
 80051a8:	f025 0503 	bic.w	r5, r5, #3
 80051ac:	3508      	adds	r5, #8
 80051ae:	2d0c      	cmp	r5, #12
 80051b0:	bf38      	it	cc
 80051b2:	250c      	movcc	r5, #12
 80051b4:	2d00      	cmp	r5, #0
 80051b6:	4606      	mov	r6, r0
 80051b8:	db01      	blt.n	80051be <_malloc_r+0x1a>
 80051ba:	42a9      	cmp	r1, r5
 80051bc:	d903      	bls.n	80051c6 <_malloc_r+0x22>
 80051be:	230c      	movs	r3, #12
 80051c0:	6033      	str	r3, [r6, #0]
 80051c2:	2000      	movs	r0, #0
 80051c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051c6:	f000 f8f1 	bl	80053ac <__malloc_lock>
 80051ca:	4921      	ldr	r1, [pc, #132]	; (8005250 <_malloc_r+0xac>)
 80051cc:	680a      	ldr	r2, [r1, #0]
 80051ce:	4614      	mov	r4, r2
 80051d0:	b99c      	cbnz	r4, 80051fa <_malloc_r+0x56>
 80051d2:	4f20      	ldr	r7, [pc, #128]	; (8005254 <_malloc_r+0xb0>)
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	b923      	cbnz	r3, 80051e2 <_malloc_r+0x3e>
 80051d8:	4621      	mov	r1, r4
 80051da:	4630      	mov	r0, r6
 80051dc:	f000 f83c 	bl	8005258 <_sbrk_r>
 80051e0:	6038      	str	r0, [r7, #0]
 80051e2:	4629      	mov	r1, r5
 80051e4:	4630      	mov	r0, r6
 80051e6:	f000 f837 	bl	8005258 <_sbrk_r>
 80051ea:	1c43      	adds	r3, r0, #1
 80051ec:	d123      	bne.n	8005236 <_malloc_r+0x92>
 80051ee:	230c      	movs	r3, #12
 80051f0:	6033      	str	r3, [r6, #0]
 80051f2:	4630      	mov	r0, r6
 80051f4:	f000 f8e0 	bl	80053b8 <__malloc_unlock>
 80051f8:	e7e3      	b.n	80051c2 <_malloc_r+0x1e>
 80051fa:	6823      	ldr	r3, [r4, #0]
 80051fc:	1b5b      	subs	r3, r3, r5
 80051fe:	d417      	bmi.n	8005230 <_malloc_r+0x8c>
 8005200:	2b0b      	cmp	r3, #11
 8005202:	d903      	bls.n	800520c <_malloc_r+0x68>
 8005204:	6023      	str	r3, [r4, #0]
 8005206:	441c      	add	r4, r3
 8005208:	6025      	str	r5, [r4, #0]
 800520a:	e004      	b.n	8005216 <_malloc_r+0x72>
 800520c:	6863      	ldr	r3, [r4, #4]
 800520e:	42a2      	cmp	r2, r4
 8005210:	bf0c      	ite	eq
 8005212:	600b      	streq	r3, [r1, #0]
 8005214:	6053      	strne	r3, [r2, #4]
 8005216:	4630      	mov	r0, r6
 8005218:	f000 f8ce 	bl	80053b8 <__malloc_unlock>
 800521c:	f104 000b 	add.w	r0, r4, #11
 8005220:	1d23      	adds	r3, r4, #4
 8005222:	f020 0007 	bic.w	r0, r0, #7
 8005226:	1ac2      	subs	r2, r0, r3
 8005228:	d0cc      	beq.n	80051c4 <_malloc_r+0x20>
 800522a:	1a1b      	subs	r3, r3, r0
 800522c:	50a3      	str	r3, [r4, r2]
 800522e:	e7c9      	b.n	80051c4 <_malloc_r+0x20>
 8005230:	4622      	mov	r2, r4
 8005232:	6864      	ldr	r4, [r4, #4]
 8005234:	e7cc      	b.n	80051d0 <_malloc_r+0x2c>
 8005236:	1cc4      	adds	r4, r0, #3
 8005238:	f024 0403 	bic.w	r4, r4, #3
 800523c:	42a0      	cmp	r0, r4
 800523e:	d0e3      	beq.n	8005208 <_malloc_r+0x64>
 8005240:	1a21      	subs	r1, r4, r0
 8005242:	4630      	mov	r0, r6
 8005244:	f000 f808 	bl	8005258 <_sbrk_r>
 8005248:	3001      	adds	r0, #1
 800524a:	d1dd      	bne.n	8005208 <_malloc_r+0x64>
 800524c:	e7cf      	b.n	80051ee <_malloc_r+0x4a>
 800524e:	bf00      	nop
 8005250:	200000a8 	.word	0x200000a8
 8005254:	200000ac 	.word	0x200000ac

08005258 <_sbrk_r>:
 8005258:	b538      	push	{r3, r4, r5, lr}
 800525a:	4d06      	ldr	r5, [pc, #24]	; (8005274 <_sbrk_r+0x1c>)
 800525c:	2300      	movs	r3, #0
 800525e:	4604      	mov	r4, r0
 8005260:	4608      	mov	r0, r1
 8005262:	602b      	str	r3, [r5, #0]
 8005264:	f7fb fd0c 	bl	8000c80 <_sbrk>
 8005268:	1c43      	adds	r3, r0, #1
 800526a:	d102      	bne.n	8005272 <_sbrk_r+0x1a>
 800526c:	682b      	ldr	r3, [r5, #0]
 800526e:	b103      	cbz	r3, 8005272 <_sbrk_r+0x1a>
 8005270:	6023      	str	r3, [r4, #0]
 8005272:	bd38      	pop	{r3, r4, r5, pc}
 8005274:	20000200 	.word	0x20000200

08005278 <__sread>:
 8005278:	b510      	push	{r4, lr}
 800527a:	460c      	mov	r4, r1
 800527c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005280:	f000 f8a0 	bl	80053c4 <_read_r>
 8005284:	2800      	cmp	r0, #0
 8005286:	bfab      	itete	ge
 8005288:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800528a:	89a3      	ldrhlt	r3, [r4, #12]
 800528c:	181b      	addge	r3, r3, r0
 800528e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005292:	bfac      	ite	ge
 8005294:	6563      	strge	r3, [r4, #84]	; 0x54
 8005296:	81a3      	strhlt	r3, [r4, #12]
 8005298:	bd10      	pop	{r4, pc}

0800529a <__swrite>:
 800529a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800529e:	461f      	mov	r7, r3
 80052a0:	898b      	ldrh	r3, [r1, #12]
 80052a2:	05db      	lsls	r3, r3, #23
 80052a4:	4605      	mov	r5, r0
 80052a6:	460c      	mov	r4, r1
 80052a8:	4616      	mov	r6, r2
 80052aa:	d505      	bpl.n	80052b8 <__swrite+0x1e>
 80052ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052b0:	2302      	movs	r3, #2
 80052b2:	2200      	movs	r2, #0
 80052b4:	f000 f868 	bl	8005388 <_lseek_r>
 80052b8:	89a3      	ldrh	r3, [r4, #12]
 80052ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052c2:	81a3      	strh	r3, [r4, #12]
 80052c4:	4632      	mov	r2, r6
 80052c6:	463b      	mov	r3, r7
 80052c8:	4628      	mov	r0, r5
 80052ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052ce:	f000 b817 	b.w	8005300 <_write_r>

080052d2 <__sseek>:
 80052d2:	b510      	push	{r4, lr}
 80052d4:	460c      	mov	r4, r1
 80052d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052da:	f000 f855 	bl	8005388 <_lseek_r>
 80052de:	1c43      	adds	r3, r0, #1
 80052e0:	89a3      	ldrh	r3, [r4, #12]
 80052e2:	bf15      	itete	ne
 80052e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80052e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80052ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80052ee:	81a3      	strheq	r3, [r4, #12]
 80052f0:	bf18      	it	ne
 80052f2:	81a3      	strhne	r3, [r4, #12]
 80052f4:	bd10      	pop	{r4, pc}

080052f6 <__sclose>:
 80052f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052fa:	f000 b813 	b.w	8005324 <_close_r>
	...

08005300 <_write_r>:
 8005300:	b538      	push	{r3, r4, r5, lr}
 8005302:	4d07      	ldr	r5, [pc, #28]	; (8005320 <_write_r+0x20>)
 8005304:	4604      	mov	r4, r0
 8005306:	4608      	mov	r0, r1
 8005308:	4611      	mov	r1, r2
 800530a:	2200      	movs	r2, #0
 800530c:	602a      	str	r2, [r5, #0]
 800530e:	461a      	mov	r2, r3
 8005310:	f7fb f938 	bl	8000584 <_write>
 8005314:	1c43      	adds	r3, r0, #1
 8005316:	d102      	bne.n	800531e <_write_r+0x1e>
 8005318:	682b      	ldr	r3, [r5, #0]
 800531a:	b103      	cbz	r3, 800531e <_write_r+0x1e>
 800531c:	6023      	str	r3, [r4, #0]
 800531e:	bd38      	pop	{r3, r4, r5, pc}
 8005320:	20000200 	.word	0x20000200

08005324 <_close_r>:
 8005324:	b538      	push	{r3, r4, r5, lr}
 8005326:	4d06      	ldr	r5, [pc, #24]	; (8005340 <_close_r+0x1c>)
 8005328:	2300      	movs	r3, #0
 800532a:	4604      	mov	r4, r0
 800532c:	4608      	mov	r0, r1
 800532e:	602b      	str	r3, [r5, #0]
 8005330:	f7fb fc71 	bl	8000c16 <_close>
 8005334:	1c43      	adds	r3, r0, #1
 8005336:	d102      	bne.n	800533e <_close_r+0x1a>
 8005338:	682b      	ldr	r3, [r5, #0]
 800533a:	b103      	cbz	r3, 800533e <_close_r+0x1a>
 800533c:	6023      	str	r3, [r4, #0]
 800533e:	bd38      	pop	{r3, r4, r5, pc}
 8005340:	20000200 	.word	0x20000200

08005344 <_fstat_r>:
 8005344:	b538      	push	{r3, r4, r5, lr}
 8005346:	4d07      	ldr	r5, [pc, #28]	; (8005364 <_fstat_r+0x20>)
 8005348:	2300      	movs	r3, #0
 800534a:	4604      	mov	r4, r0
 800534c:	4608      	mov	r0, r1
 800534e:	4611      	mov	r1, r2
 8005350:	602b      	str	r3, [r5, #0]
 8005352:	f7fb fc6c 	bl	8000c2e <_fstat>
 8005356:	1c43      	adds	r3, r0, #1
 8005358:	d102      	bne.n	8005360 <_fstat_r+0x1c>
 800535a:	682b      	ldr	r3, [r5, #0]
 800535c:	b103      	cbz	r3, 8005360 <_fstat_r+0x1c>
 800535e:	6023      	str	r3, [r4, #0]
 8005360:	bd38      	pop	{r3, r4, r5, pc}
 8005362:	bf00      	nop
 8005364:	20000200 	.word	0x20000200

08005368 <_isatty_r>:
 8005368:	b538      	push	{r3, r4, r5, lr}
 800536a:	4d06      	ldr	r5, [pc, #24]	; (8005384 <_isatty_r+0x1c>)
 800536c:	2300      	movs	r3, #0
 800536e:	4604      	mov	r4, r0
 8005370:	4608      	mov	r0, r1
 8005372:	602b      	str	r3, [r5, #0]
 8005374:	f7fb fc6b 	bl	8000c4e <_isatty>
 8005378:	1c43      	adds	r3, r0, #1
 800537a:	d102      	bne.n	8005382 <_isatty_r+0x1a>
 800537c:	682b      	ldr	r3, [r5, #0]
 800537e:	b103      	cbz	r3, 8005382 <_isatty_r+0x1a>
 8005380:	6023      	str	r3, [r4, #0]
 8005382:	bd38      	pop	{r3, r4, r5, pc}
 8005384:	20000200 	.word	0x20000200

08005388 <_lseek_r>:
 8005388:	b538      	push	{r3, r4, r5, lr}
 800538a:	4d07      	ldr	r5, [pc, #28]	; (80053a8 <_lseek_r+0x20>)
 800538c:	4604      	mov	r4, r0
 800538e:	4608      	mov	r0, r1
 8005390:	4611      	mov	r1, r2
 8005392:	2200      	movs	r2, #0
 8005394:	602a      	str	r2, [r5, #0]
 8005396:	461a      	mov	r2, r3
 8005398:	f7fb fc64 	bl	8000c64 <_lseek>
 800539c:	1c43      	adds	r3, r0, #1
 800539e:	d102      	bne.n	80053a6 <_lseek_r+0x1e>
 80053a0:	682b      	ldr	r3, [r5, #0]
 80053a2:	b103      	cbz	r3, 80053a6 <_lseek_r+0x1e>
 80053a4:	6023      	str	r3, [r4, #0]
 80053a6:	bd38      	pop	{r3, r4, r5, pc}
 80053a8:	20000200 	.word	0x20000200

080053ac <__malloc_lock>:
 80053ac:	4801      	ldr	r0, [pc, #4]	; (80053b4 <__malloc_lock+0x8>)
 80053ae:	f7ff be43 	b.w	8005038 <__retarget_lock_acquire_recursive>
 80053b2:	bf00      	nop
 80053b4:	200001f8 	.word	0x200001f8

080053b8 <__malloc_unlock>:
 80053b8:	4801      	ldr	r0, [pc, #4]	; (80053c0 <__malloc_unlock+0x8>)
 80053ba:	f7ff be3e 	b.w	800503a <__retarget_lock_release_recursive>
 80053be:	bf00      	nop
 80053c0:	200001f8 	.word	0x200001f8

080053c4 <_read_r>:
 80053c4:	b538      	push	{r3, r4, r5, lr}
 80053c6:	4d07      	ldr	r5, [pc, #28]	; (80053e4 <_read_r+0x20>)
 80053c8:	4604      	mov	r4, r0
 80053ca:	4608      	mov	r0, r1
 80053cc:	4611      	mov	r1, r2
 80053ce:	2200      	movs	r2, #0
 80053d0:	602a      	str	r2, [r5, #0]
 80053d2:	461a      	mov	r2, r3
 80053d4:	f7fb fc02 	bl	8000bdc <_read>
 80053d8:	1c43      	adds	r3, r0, #1
 80053da:	d102      	bne.n	80053e2 <_read_r+0x1e>
 80053dc:	682b      	ldr	r3, [r5, #0]
 80053de:	b103      	cbz	r3, 80053e2 <_read_r+0x1e>
 80053e0:	6023      	str	r3, [r4, #0]
 80053e2:	bd38      	pop	{r3, r4, r5, pc}
 80053e4:	20000200 	.word	0x20000200

080053e8 <_init>:
 80053e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ea:	bf00      	nop
 80053ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ee:	bc08      	pop	{r3}
 80053f0:	469e      	mov	lr, r3
 80053f2:	4770      	bx	lr

080053f4 <_fini>:
 80053f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053f6:	bf00      	nop
 80053f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053fa:	bc08      	pop	{r3}
 80053fc:	469e      	mov	lr, r3
 80053fe:	4770      	bx	lr
